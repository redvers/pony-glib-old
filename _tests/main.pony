use "lib:glib-2.0"
use "../GLibSys"
use "ponytest"

actor Main is TestList
  new create(env: Env) => PonyTest(env, this)



  fun tag tests(test: PonyTest) =>
    test(_TestGArray)






class iso _TestGArray is UnitTest
  fun name(): String => "_TestGArray"

  fun apply(h: TestHelper) =>
    let tarray: NullablePointer[GArray] = GLibSys.g_array_new(I32(1), I32(1), U32(4))
    h.assert_eq[U32](U32(4), GLibSys.g_array_get_element_size(tarray))
    let tsizedarray: NullablePointer[GArray] = GLibSys.g_array_sized_new(I32(1), I32(1), U32(8), U32(4))
    h.assert_eq[U32](U32(8), GLibSys.g_array_get_element_size(tsizedarray))
    let tarraycopy: NullablePointer[GArray] = GLibSys.g_array_copy(tarray)
    h.assert_eq[U32](U32(4), GLibSys.g_array_get_element_size(tarraycopy))

    let a: Array[U32] = [ U32(100); U32(200); U32(400); U32(800) ]
    let ap: Pointer[U32] tag = a.cpointer()

//   fun g_array_append_vals(array: NullablePointer[GArray] tag, data: Pointer[None] tag, len: U32): NullablePointer[GArray] =>
    GLibSys.g_array_append_vals(tarray, ap, U32(4))

//   fun g_filename_to_uri(filename: Pointer[U8] tag, hostname: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//
//
//
//
//
//
//   fun g_array_steal(array: NullablePointer[GArray] tag, len: Pointer[U64] tag): Pointer[None] =>
//   fun g_array_copy(array: NullablePointer[GArray] tag): NullablePointer[GArray] =>
//   fun g_array_free(array: NullablePointer[GArray] tag, freesegment: I32): Pointer[U8] =>
//   fun g_array_ref(array: NullablePointer[GArray] tag): NullablePointer[GArray] =>
//   fun g_array_unref(array: NullablePointer[GArray] tag): None =>
//   fun g_array_append_vals(array: NullablePointer[GArray] tag, data: Pointer[None] tag, len: U32): NullablePointer[GArray] =>
//   fun g_array_prepend_vals(array: NullablePointer[GArray] tag, data: Pointer[None] tag, len: U32): NullablePointer[GArray] =>
//   fun g_array_insert_vals(array: NullablePointer[GArray] tag, index: U32, data: Pointer[None] tag, len: U32): NullablePointer[GArray] =>
//   fun g_array_set_size(array: NullablePointer[GArray] tag, length: U32): NullablePointer[GArray] =>
//   fun g_array_remove_index(array: NullablePointer[GArray] tag, index: U32): NullablePointer[GArray] =>
//   fun g_array_remove_index_fast(array: NullablePointer[GArray] tag, index: U32): NullablePointer[GArray] =>
//   fun g_array_remove_range(array: NullablePointer[GArray] tag, index: U32, length: U32): NullablePointer[GArray] =>
//   fun g_array_sort(array: NullablePointer[GArray] tag, comparefunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_array_sort_with_data(array: NullablePointer[GArray] tag, comparefunc: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_array_binary_search(array: NullablePointer[GArray] tag, target: Pointer[None] tag, comparefunc: NullablePointer[FUNCTIONTYPE] tag, outmatchindex: Pointer[U32] tag): I32 =>
//   fun g_array_set_clear_func(array: NullablePointer[GArray] tag, clearfunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_ptr_array_new(): NullablePointer[GPtrArray] =>
//   fun g_ptr_array_new_with_free_func(elementfreefunc: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[GPtrArray] =>
//   fun g_ptr_array_steal(array: NullablePointer[GPtrArray] tag, len: Pointer[U64] tag): NullablePointer[Pointer[None]] =>
//   fun g_ptr_array_copy(array: NullablePointer[GPtrArray] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): NullablePointer[GPtrArray] =>
//   fun g_ptr_array_sized_new(reservedsize: U32): NullablePointer[GPtrArray] =>
//   fun g_ptr_array_new_full(reservedsize: U32, elementfreefunc: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[GPtrArray] =>
//   fun g_ptr_array_free(array: NullablePointer[GPtrArray] tag, freeseg: I32): NullablePointer[Pointer[None]] =>
//   fun g_ptr_array_ref(array: NullablePointer[GPtrArray] tag): NullablePointer[GPtrArray] =>
//   fun g_ptr_array_unref(array: NullablePointer[GPtrArray] tag): None =>
//   fun g_ptr_array_set_free_func(array: NullablePointer[GPtrArray] tag, elementfreefunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_ptr_array_set_size(array: NullablePointer[GPtrArray] tag, length: I32): None =>
//   fun g_ptr_array_remove_index(array: NullablePointer[GPtrArray] tag, index: U32): Pointer[None] =>
//   fun g_ptr_array_remove_index_fast(array: NullablePointer[GPtrArray] tag, index: U32): Pointer[None] =>
//   fun g_ptr_array_steal_index(array: NullablePointer[GPtrArray] tag, index: U32): Pointer[None] =>
//   fun g_ptr_array_steal_index_fast(array: NullablePointer[GPtrArray] tag, index: U32): Pointer[None] =>
//   fun g_ptr_array_remove(array: NullablePointer[GPtrArray] tag, data: Pointer[None] tag): I32 =>
//   fun g_ptr_array_remove_fast(array: NullablePointer[GPtrArray] tag, data: Pointer[None] tag): I32 =>
//   fun g_ptr_array_remove_range(array: NullablePointer[GPtrArray] tag, index: U32, length: U32): NullablePointer[GPtrArray] =>
//   fun g_ptr_array_add(array: NullablePointer[GPtrArray] tag, data: Pointer[None] tag): None =>
//   fun g_ptr_array_extend(arraytoextend: NullablePointer[GPtrArray] tag, array: NullablePointer[GPtrArray] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_ptr_array_extend_and_steal(arraytoextend: NullablePointer[GPtrArray] tag, array: NullablePointer[GPtrArray] tag): None =>
//   fun g_ptr_array_insert(array: NullablePointer[GPtrArray] tag, index: I32, data: Pointer[None] tag): None =>
//   fun g_ptr_array_sort(array: NullablePointer[GPtrArray] tag, comparefunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_ptr_array_sort_with_data(array: NullablePointer[GPtrArray] tag, comparefunc: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_ptr_array_foreach(array: NullablePointer[GPtrArray] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_ptr_array_find(haystack: NullablePointer[GPtrArray] tag, needle: Pointer[None] tag, index: Pointer[U32] tag): I32 =>
//   fun g_ptr_array_find_with_equal_func(haystack: NullablePointer[GPtrArray] tag, needle: Pointer[None] tag, equalfunc: NullablePointer[FUNCTIONTYPE] tag, index: Pointer[U32] tag): I32 =>
//   fun g_byte_array_new(): NullablePointer[GByteArray] =>
//   fun g_byte_array_new_take(data: Pointer[U8] tag, len: U64): NullablePointer[GByteArray] =>
//   fun g_byte_array_steal(array: NullablePointer[GByteArray] tag, len: Pointer[U64] tag): Pointer[U8] =>
//   fun g_byte_array_sized_new(reservedsize: U32): NullablePointer[GByteArray] =>
//   fun g_byte_array_free(array: NullablePointer[GByteArray] tag, freesegment: I32): Pointer[U8] =>
//   fun g_byte_array_free_to_bytes(array: NullablePointer[GByteArray] tag): NullablePointer[GBytes] =>
//   fun g_byte_array_ref(array: NullablePointer[GByteArray] tag): NullablePointer[GByteArray] =>
//   fun g_byte_array_unref(array: NullablePointer[GByteArray] tag): None =>
//   fun g_byte_array_append(array: NullablePointer[GByteArray] tag, data: Pointer[U8] tag, len: U32): NullablePointer[GByteArray] =>
//   fun g_byte_array_prepend(array: NullablePointer[GByteArray] tag, data: Pointer[U8] tag, len: U32): NullablePointer[GByteArray] =>
//   fun g_byte_array_set_size(array: NullablePointer[GByteArray] tag, length: U32): NullablePointer[GByteArray] =>
//   fun g_byte_array_remove_index(array: NullablePointer[GByteArray] tag, index: U32): NullablePointer[GByteArray] =>
//   fun g_byte_array_remove_index_fast(array: NullablePointer[GByteArray] tag, index: U32): NullablePointer[GByteArray] =>
//   fun g_byte_array_remove_range(array: NullablePointer[GByteArray] tag, index: U32, length: U32): NullablePointer[GByteArray] =>
//   fun g_byte_array_sort(array: NullablePointer[GByteArray] tag, comparefunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_byte_array_sort_with_data(array: NullablePointer[GByteArray] tag, comparefunc: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_atomic_int_get(atomic: Pointer[I32] tag): I32 =>
//   fun g_atomic_int_set(atomic: Pointer[I32] tag, newval: I32): None =>
//   fun g_atomic_int_inc(atomic: Pointer[I32] tag): None =>
//   fun g_atomic_int_dec_and_test(atomic: Pointer[I32] tag): I32 =>
//   fun g_atomic_int_compare_and_exchange(atomic: Pointer[I32] tag, oldval: I32, newval: I32): I32 =>
//   fun g_atomic_int_add(atomic: Pointer[I32] tag, g_val: I32): I32 =>
//   fun g_atomic_int_and(atomic: Pointer[U32] tag, g_val: U32): U32 =>
//   fun g_atomic_int_or(atomic: Pointer[U32] tag, g_val: U32): U32 =>
//   fun g_atomic_int_xor(atomic: Pointer[U32] tag, g_val: U32): U32 =>
//   fun g_atomic_pointer_get(atomic: Pointer[None] tag): Pointer[None] =>
//   fun g_atomic_pointer_set(atomic: Pointer[None] tag, newval: Pointer[None] tag): None =>
//   fun g_atomic_pointer_compare_and_exchange(atomic: Pointer[None] tag, oldval: Pointer[None] tag, newval: Pointer[None] tag): I32 =>
//   fun g_atomic_pointer_add(atomic: Pointer[None] tag, g_val: I64): I64 =>
//   fun g_atomic_pointer_and(atomic: Pointer[None] tag, g_val: U64): U64 =>
//   fun g_atomic_pointer_or(atomic: Pointer[None] tag, g_val: U64): U64 =>
//   fun g_atomic_pointer_xor(atomic: Pointer[None] tag, g_val: U64): U64 =>
//   fun g_atomic_int_exchange_and_add(atomic: Pointer[I32] tag, g_val: I32): I32 =>
//   fun g_quark_try_string(string: Pointer[U8] tag): U32 =>
//   fun g_quark_from_static_string(string: Pointer[U8] tag): U32 =>
//   fun g_quark_from_string(string: Pointer[U8] tag): U32 =>
//   fun g_quark_to_string(quark: U32): Pointer[U8] =>
//   fun g_intern_string(string: Pointer[U8] tag): Pointer[U8] =>
//   fun g_intern_static_string(string: Pointer[U8] tag): Pointer[U8] =>
//   fun g_error_domain_register_static(errortypename: Pointer[U8] tag, errortypeprivatesize: U64, errortypeinit: NullablePointer[FUNCTIONTYPE] tag, errortypecopy: NullablePointer[FUNCTIONTYPE] tag, errortypeclear: NullablePointer[FUNCTIONTYPE] tag): U32 =>
//   fun g_error_domain_register(errortypename: Pointer[U8] tag, errortypeprivatesize: U64, errortypeinit: NullablePointer[FUNCTIONTYPE] tag, errortypecopy: NullablePointer[FUNCTIONTYPE] tag, errortypeclear: NullablePointer[FUNCTIONTYPE] tag): U32 =>
// /*  fun g_error_new(domain: U32, code: I32, format: Pointer[U8] tag, ...): NullablePointer[GError] =>
//   fun g_error_new_literal(domain: U32, code: I32, message: Pointer[U8] tag): NullablePointer[GError] =>
//   fun g_error_new_valist(domain: U32, code: I32, format: Pointer[U8] tag, args: NullablePointer[Valisttag] tag): NullablePointer[GError] =>
//   fun g_error_free(g_error: NullablePointer[GError] tag): None =>
//   fun g_error_copy(g_error: NullablePointer[GError] tag): NullablePointer[GError] =>
//   fun g_error_matches(g_error: NullablePointer[GError] tag, domain: U32, code: I32): I32 =>
// /*  fun g_set_error(err: NullablePointer[NullablePointer[GError]] tag, domain: U32, code: I32, format: Pointer[U8] tag, ...): None =>
//   fun g_set_error_literal(err: NullablePointer[NullablePointer[GError]] tag, domain: U32, code: I32, message: Pointer[U8] tag): None =>
//   fun g_propagate_error(dest: NullablePointer[NullablePointer[GError]] tag, src: NullablePointer[GError] tag): None =>
//   fun g_clear_error(err: NullablePointer[NullablePointer[GError]] tag): None =>
// /*  fun g_prefix_error(err: NullablePointer[NullablePointer[GError]] tag, format: Pointer[U8] tag, ...): None =>
// /*  fun g_propagate_prefixed_error(dest: NullablePointer[NullablePointer[GError]] tag, src: NullablePointer[GError] tag, format: Pointer[U8] tag, ...): None =>
//   fun g_get_user_name(): Pointer[U8] =>
//   fun g_get_real_name(): Pointer[U8] =>
//   fun g_get_home_dir(): Pointer[U8] =>
//   fun g_get_tmp_dir(): Pointer[U8] =>
//   fun g_get_host_name(): Pointer[U8] =>
//   fun g_get_prgname(): Pointer[U8] =>
//   fun g_set_prgname(prgname: Pointer[U8] tag): None =>
//   fun g_get_application_name(): Pointer[U8] =>
//   fun g_set_application_name(applicationname: Pointer[U8] tag): None =>
//   fun g_get_os_info(keyname: Pointer[U8] tag): Pointer[U8] =>
//   fun g_reload_user_special_dirs_cache(): None =>
//   fun g_get_user_data_dir(): Pointer[U8] =>
//   fun g_get_user_config_dir(): Pointer[U8] =>
//   fun g_get_user_cache_dir(): Pointer[U8] =>
//   fun g_get_system_data_dirs(): NullablePointer[Pointer[U8]] =>
//   fun g_get_system_config_dirs(): NullablePointer[Pointer[U8]] =>
//   fun g_get_user_runtime_dir(): Pointer[U8] =>
//   fun g_get_user_special_dir(directory: I32): Pointer[U8] =>
//   fun g_parse_debug_string(string: Pointer[U8] tag, keys: NullablePointer[GDebugKey] tag, nkeys: U32): U32 =>
// /*  fun g_snprintf(string: Pointer[U8] tag, n: U64, format: Pointer[U8] tag, ...): I32 =>
//   fun g_vsnprintf(string: Pointer[U8] tag, n: U64, format: Pointer[U8] tag, args: NullablePointer[Valisttag] tag): I32 =>
//   fun g_nullify_pointer(nullifylocation: NullablePointer[Pointer[None]] tag): None =>
//   fun g_format_size_full(size: U64, flags: I32): Pointer[U8] =>
//   fun g_format_size(size: U64): Pointer[U8] =>
//   fun g_format_size_for_display(size: I64): Pointer[U8] =>
//   fun g_atexit(func: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_find_program_in_path(program: Pointer[U8] tag): Pointer[U8] =>
//   fun g_bit_nth_lsf(mask: U64, nthbit: I32): I32 =>
//   fun g_bit_nth_msf(mask: U64, nthbit: I32): I32 =>
//   fun g_bit_storage(number: U64): U32 =>
//   fun g_bit_nth_lsf_impl(mask: U64, nthbit: I32): I32 =>
//   fun g_bit_nth_msf_impl(mask: U64, nthbit: I32): I32 =>
//   fun g_bit_storage_impl(number: U64): U32 =>
//   fun g_thread_error_quark(): U32 =>
//   fun g_thread_ref(thread: NullablePointer[GThread] tag): NullablePointer[GThread] =>
//   fun g_thread_unref(thread: NullablePointer[GThread] tag): None =>
//   fun g_thread_new(name: Pointer[U8] tag, func: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag): NullablePointer[GThread] =>
//   fun g_thread_try_new(name: Pointer[U8] tag, func: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GThread] =>
//   fun g_thread_self(): NullablePointer[GThread] =>
//   fun g_thread_exit(retval: Pointer[None] tag): None =>
//   fun g_thread_join(thread: NullablePointer[GThread] tag): Pointer[None] =>
//   fun g_thread_yield(): None =>
//   fun g_mutex_init(mutex: Pointer[None] tag): None =>
//   fun g_mutex_clear(mutex: Pointer[None] tag): None =>
//   fun g_mutex_lock(mutex: Pointer[None] tag): None =>
//   fun g_mutex_trylock(mutex: Pointer[None] tag): I32 =>
//   fun g_mutex_unlock(mutex: Pointer[None] tag): None =>
//   fun g_rw_lock_init(rwlock: NullablePointer[GRWLock] tag): None =>
//   fun g_rw_lock_clear(rwlock: NullablePointer[GRWLock] tag): None =>
//   fun g_rw_lock_writer_lock(rwlock: NullablePointer[GRWLock] tag): None =>
//   fun g_rw_lock_writer_trylock(rwlock: NullablePointer[GRWLock] tag): I32 =>
//   fun g_rw_lock_writer_unlock(rwlock: NullablePointer[GRWLock] tag): None =>
//   fun g_rw_lock_reader_lock(rwlock: NullablePointer[GRWLock] tag): None =>
//   fun g_rw_lock_reader_trylock(rwlock: NullablePointer[GRWLock] tag): I32 =>
//   fun g_rw_lock_reader_unlock(rwlock: NullablePointer[GRWLock] tag): None =>
//   fun g_rec_mutex_init(recmutex: NullablePointer[GRecMutex] tag): None =>
//   fun g_rec_mutex_clear(recmutex: NullablePointer[GRecMutex] tag): None =>
//   fun g_rec_mutex_lock(recmutex: NullablePointer[GRecMutex] tag): None =>
//   fun g_rec_mutex_trylock(recmutex: NullablePointer[GRecMutex] tag): I32 =>
//   fun g_rec_mutex_unlock(recmutex: NullablePointer[GRecMutex] tag): None =>
//   fun g_cond_init(cond: NullablePointer[GCond] tag): None =>
//   fun g_cond_clear(cond: NullablePointer[GCond] tag): None =>
//   fun g_cond_wait(cond: NullablePointer[GCond] tag, mutex: Pointer[None] tag): None =>
//   fun g_cond_signal(cond: NullablePointer[GCond] tag): None =>
//   fun g_cond_broadcast(cond: NullablePointer[GCond] tag): None =>
//   fun g_cond_wait_until(cond: NullablePointer[GCond] tag, mutex: Pointer[None] tag, endtime: I64): I32 =>
//   fun g_private_get(key: NullablePointer[GPrivate] tag): Pointer[None] =>
//   fun g_private_set(key: NullablePointer[GPrivate] tag, value: Pointer[None] tag): None =>
//   fun g_private_replace(key: NullablePointer[GPrivate] tag, value: Pointer[None] tag): None =>
//   fun g_once_impl(once: NullablePointer[GOnce] tag, func: NullablePointer[FUNCTIONTYPE] tag, arg: Pointer[None] tag): Pointer[None] =>
//   fun g_once_init_enter(location: Pointer[None] tag): I32 =>
//   fun g_once_init_leave(location: Pointer[None] tag, result: U64): None =>
//   fun g_get_num_processors(): U32 =>
//   fun g_mutex_locker_new(mutex: Pointer[None] tag): Pointer[None] =>
//   fun g_mutex_locker_free(locker: Pointer[None] tag): None =>
//   fun g_rec_mutex_locker_new(recmutex: NullablePointer[GRecMutex] tag): Pointer[None] =>
//   fun g_rec_mutex_locker_free(locker: Pointer[None] tag): None =>
//   fun g_rw_lock_writer_locker_new(rwlock: NullablePointer[GRWLock] tag): Pointer[None] =>
//   fun g_rw_lock_writer_locker_free(locker: Pointer[None] tag): None =>
//   fun g_rw_lock_reader_locker_new(rwlock: NullablePointer[GRWLock] tag): Pointer[None] =>
//   fun g_rw_lock_reader_locker_free(locker: Pointer[None] tag): None =>
//   fun g_async_queue_new(): NullablePointer[GAsyncQueue] =>
//   fun g_async_queue_new_full(itemfreefunc: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[GAsyncQueue] =>
//   fun g_async_queue_lock(queue: NullablePointer[GAsyncQueue] tag): None =>
//   fun g_async_queue_unlock(queue: NullablePointer[GAsyncQueue] tag): None =>
//   fun g_async_queue_ref(queue: NullablePointer[GAsyncQueue] tag): NullablePointer[GAsyncQueue] =>
//   fun g_async_queue_unref(queue: NullablePointer[GAsyncQueue] tag): None =>
//   fun g_async_queue_ref_unlocked(queue: NullablePointer[GAsyncQueue] tag): None =>
//   fun g_async_queue_unref_and_unlock(queue: NullablePointer[GAsyncQueue] tag): None =>
//   fun g_async_queue_push(queue: NullablePointer[GAsyncQueue] tag, data: Pointer[None] tag): None =>
//   fun g_async_queue_push_unlocked(queue: NullablePointer[GAsyncQueue] tag, data: Pointer[None] tag): None =>
//   fun g_async_queue_push_sorted(queue: NullablePointer[GAsyncQueue] tag, data: Pointer[None] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_async_queue_push_sorted_unlocked(queue: NullablePointer[GAsyncQueue] tag, data: Pointer[None] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_async_queue_pop(queue: NullablePointer[GAsyncQueue] tag): Pointer[None] =>
//   fun g_async_queue_pop_unlocked(queue: NullablePointer[GAsyncQueue] tag): Pointer[None] =>
//   fun g_async_queue_try_pop(queue: NullablePointer[GAsyncQueue] tag): Pointer[None] =>
//   fun g_async_queue_try_pop_unlocked(queue: NullablePointer[GAsyncQueue] tag): Pointer[None] =>
//   fun g_async_queue_timeout_pop(queue: NullablePointer[GAsyncQueue] tag, timeout: U64): Pointer[None] =>
//   fun g_async_queue_timeout_pop_unlocked(queue: NullablePointer[GAsyncQueue] tag, timeout: U64): Pointer[None] =>
//   fun g_async_queue_length(queue: NullablePointer[GAsyncQueue] tag): I32 =>
//   fun g_async_queue_length_unlocked(queue: NullablePointer[GAsyncQueue] tag): I32 =>
//   fun g_async_queue_sort(queue: NullablePointer[GAsyncQueue] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_async_queue_sort_unlocked(queue: NullablePointer[GAsyncQueue] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_async_queue_remove(queue: NullablePointer[GAsyncQueue] tag, item: Pointer[None] tag): I32 =>
//   fun g_async_queue_remove_unlocked(queue: NullablePointer[GAsyncQueue] tag, item: Pointer[None] tag): I32 =>
//   fun g_async_queue_push_front(queue: NullablePointer[GAsyncQueue] tag, item: Pointer[None] tag): None =>
//   fun g_async_queue_push_front_unlocked(queue: NullablePointer[GAsyncQueue] tag, item: Pointer[None] tag): None =>
//   fun g_async_queue_timed_pop(queue: NullablePointer[GAsyncQueue] tag, endtime: NullablePointer[GTimeVal] tag): Pointer[None] =>
//   fun g_async_queue_timed_pop_unlocked(queue: NullablePointer[GAsyncQueue] tag, endtime: NullablePointer[GTimeVal] tag): Pointer[None] =>
//   fun g_on_error_query(prgname: Pointer[U8] tag): None =>
//   fun g_on_error_stack_trace(prgname: Pointer[U8] tag): None =>
//   fun g_base64_encode_step(g_in: Pointer[U8] tag, len: U64, breaklines: I32, out: Pointer[U8] tag, state: Pointer[I32] tag, save: Pointer[I32] tag): U64 =>
//   fun g_base64_encode_close(breaklines: I32, out: Pointer[U8] tag, state: Pointer[I32] tag, save: Pointer[I32] tag): U64 =>
//   fun g_base64_encode(data: Pointer[U8] tag, len: U64): Pointer[U8] =>
//   fun g_base64_decode_step(g_in: Pointer[U8] tag, len: U64, out: Pointer[U8] tag, state: Pointer[I32] tag, save: Pointer[U32] tag): U64 =>
//   fun g_base64_decode(text: Pointer[U8] tag, outlen: Pointer[U64] tag): Pointer[U8] =>
//   fun g_base64_decode_inplace(text: Pointer[U8] tag, outlen: Pointer[U64] tag): Pointer[U8] =>
//   fun g_bit_lock(address: Pointer[I32] tag, lockbit: I32): None =>
//   fun g_bit_trylock(address: Pointer[I32] tag, lockbit: I32): I32 =>
//   fun g_bit_unlock(address: Pointer[I32] tag, lockbit: I32): None =>
//   fun g_pointer_bit_lock(address: Pointer[None] tag, lockbit: I32): None =>
//   fun g_pointer_bit_trylock(address: Pointer[None] tag, lockbit: I32): I32 =>
//   fun g_pointer_bit_unlock(address: Pointer[None] tag, lockbit: I32): None =>
//   fun g_time_zone_new(identifier: Pointer[U8] tag): NullablePointer[GTimeZone] =>
//   fun g_time_zone_new_identifier(identifier: Pointer[U8] tag): NullablePointer[GTimeZone] =>
//   fun g_time_zone_new_utc(): NullablePointer[GTimeZone] =>
//   fun g_time_zone_new_local(): NullablePointer[GTimeZone] =>
//   fun g_time_zone_new_offset(seconds: I32): NullablePointer[GTimeZone] =>
//   fun g_time_zone_ref(tz: NullablePointer[GTimeZone] tag): NullablePointer[GTimeZone] =>
//   fun g_time_zone_unref(tz: NullablePointer[GTimeZone] tag): None =>
//   fun g_time_zone_find_interval(tz: NullablePointer[GTimeZone] tag, g_type: I32, time: I64): I32 =>
//   fun g_time_zone_adjust_time(tz: NullablePointer[GTimeZone] tag, g_type: I32, time: Pointer[I64] tag): I32 =>
//   fun g_time_zone_get_abbreviation(tz: NullablePointer[GTimeZone] tag, interval: I32): Pointer[U8] =>
//   fun g_time_zone_get_offset(tz: NullablePointer[GTimeZone] tag, interval: I32): I32 =>
//   fun g_time_zone_is_dst(tz: NullablePointer[GTimeZone] tag, interval: I32): I32 =>
//   fun g_time_zone_get_identifier(tz: NullablePointer[GTimeZone] tag): Pointer[U8] =>
//   fun g_date_time_unref(datetime: NullablePointer[GDateTime] tag): None =>
//   fun g_date_time_ref(datetime: NullablePointer[GDateTime] tag): NullablePointer[GDateTime] =>
//   fun g_date_time_new_now(tz: NullablePointer[GTimeZone] tag): NullablePointer[GDateTime] =>
//   fun g_date_time_new_now_local(): NullablePointer[GDateTime] =>
//   fun g_date_time_new_now_utc(): NullablePointer[GDateTime] =>
//   fun g_date_time_new_from_unix_local(t: I64): NullablePointer[GDateTime] =>
//   fun g_date_time_new_from_unix_utc(t: I64): NullablePointer[GDateTime] =>
//   fun g_date_time_new_from_timeval_local(tv: NullablePointer[GTimeVal] tag): NullablePointer[GDateTime] =>
//   fun g_date_time_new_from_timeval_utc(tv: NullablePointer[GTimeVal] tag): NullablePointer[GDateTime] =>
//   fun g_date_time_new_from_iso8601(text: Pointer[U8] tag, defaulttz: NullablePointer[GTimeZone] tag): NullablePointer[GDateTime] =>
//   fun g_date_time_new(tz: NullablePointer[GTimeZone] tag, year: I32, month: I32, day: I32, hour: I32, minute: I32, seconds: F64): NullablePointer[GDateTime] =>
//   fun g_date_time_new_local(year: I32, month: I32, day: I32, hour: I32, minute: I32, seconds: F64): NullablePointer[GDateTime] =>
//   fun g_date_time_new_utc(year: I32, month: I32, day: I32, hour: I32, minute: I32, seconds: F64): NullablePointer[GDateTime] =>
//   fun g_date_time_add(datetime: NullablePointer[GDateTime] tag, timespan: I64): NullablePointer[GDateTime] =>
//   fun g_date_time_add_years(datetime: NullablePointer[GDateTime] tag, years: I32): NullablePointer[GDateTime] =>
//   fun g_date_time_add_months(datetime: NullablePointer[GDateTime] tag, months: I32): NullablePointer[GDateTime] =>
//   fun g_date_time_add_weeks(datetime: NullablePointer[GDateTime] tag, weeks: I32): NullablePointer[GDateTime] =>
//   fun g_date_time_add_days(datetime: NullablePointer[GDateTime] tag, days: I32): NullablePointer[GDateTime] =>
//   fun g_date_time_add_hours(datetime: NullablePointer[GDateTime] tag, hours: I32): NullablePointer[GDateTime] =>
//   fun g_date_time_add_minutes(datetime: NullablePointer[GDateTime] tag, minutes: I32): NullablePointer[GDateTime] =>
//   fun g_date_time_add_seconds(datetime: NullablePointer[GDateTime] tag, seconds: F64): NullablePointer[GDateTime] =>
//   fun g_date_time_add_full(datetime: NullablePointer[GDateTime] tag, years: I32, months: I32, days: I32, hours: I32, minutes: I32, seconds: F64): NullablePointer[GDateTime] =>
//   fun g_date_time_compare(dt1: Pointer[None] tag, dt2: Pointer[None] tag): I32 =>
//   fun g_date_time_difference(g_end: NullablePointer[GDateTime] tag, begin: NullablePointer[GDateTime] tag): I64 =>
//   fun g_date_time_hash(datetime: Pointer[None] tag): U32 =>
//   fun g_date_time_equal(dt1: Pointer[None] tag, dt2: Pointer[None] tag): I32 =>
//   fun g_date_time_get_ymd(datetime: NullablePointer[GDateTime] tag, year: Pointer[I32] tag, month: Pointer[I32] tag, day: Pointer[I32] tag): None =>
//   fun g_date_time_get_year(datetime: NullablePointer[GDateTime] tag): I32 =>
//   fun g_date_time_get_month(datetime: NullablePointer[GDateTime] tag): I32 =>
//   fun g_date_time_get_day_of_month(datetime: NullablePointer[GDateTime] tag): I32 =>
//   fun g_date_time_get_week_numbering_year(datetime: NullablePointer[GDateTime] tag): I32 =>
//   fun g_date_time_get_week_of_year(datetime: NullablePointer[GDateTime] tag): I32 =>
//   fun g_date_time_get_day_of_week(datetime: NullablePointer[GDateTime] tag): I32 =>
//   fun g_date_time_get_day_of_year(datetime: NullablePointer[GDateTime] tag): I32 =>
//   fun g_date_time_get_hour(datetime: NullablePointer[GDateTime] tag): I32 =>
//   fun g_date_time_get_minute(datetime: NullablePointer[GDateTime] tag): I32 =>
//   fun g_date_time_get_second(datetime: NullablePointer[GDateTime] tag): I32 =>
//   fun g_date_time_get_microsecond(datetime: NullablePointer[GDateTime] tag): I32 =>
//   fun g_date_time_get_seconds(datetime: NullablePointer[GDateTime] tag): F64 =>
//   fun g_date_time_to_unix(datetime: NullablePointer[GDateTime] tag): I64 =>
//   fun g_date_time_to_timeval(datetime: NullablePointer[GDateTime] tag, tv: NullablePointer[GTimeVal] tag): I32 =>
//   fun g_date_time_get_utc_offset(datetime: NullablePointer[GDateTime] tag): I64 =>
//   fun g_date_time_get_timezone(datetime: NullablePointer[GDateTime] tag): NullablePointer[GTimeZone] =>
//   fun g_date_time_get_timezone_abbreviation(datetime: NullablePointer[GDateTime] tag): Pointer[U8] =>
//   fun g_date_time_is_daylight_savings(datetime: NullablePointer[GDateTime] tag): I32 =>
//   fun g_date_time_to_timezone(datetime: NullablePointer[GDateTime] tag, tz: NullablePointer[GTimeZone] tag): NullablePointer[GDateTime] =>
//   fun g_date_time_to_local(datetime: NullablePointer[GDateTime] tag): NullablePointer[GDateTime] =>
//   fun g_date_time_to_utc(datetime: NullablePointer[GDateTime] tag): NullablePointer[GDateTime] =>
//   fun g_date_time_format(datetime: NullablePointer[GDateTime] tag, format: Pointer[U8] tag): Pointer[U8] =>
//   fun g_date_time_format_iso8601(datetime: NullablePointer[GDateTime] tag): Pointer[U8] =>
//   fun g_bookmark_file_error_quark(): U32 =>
//   fun g_bookmark_file_new(): NullablePointer[GBookmarkFile] =>
//   fun g_bookmark_file_free(bookmark: NullablePointer[GBookmarkFile] tag): None =>
//   fun g_bookmark_file_load_from_file(bookmark: NullablePointer[GBookmarkFile] tag, filename: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_bookmark_file_load_from_data(bookmark: NullablePointer[GBookmarkFile] tag, data: Pointer[U8] tag, length: U64, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_bookmark_file_load_from_data_dirs(bookmark: NullablePointer[GBookmarkFile] tag, file: Pointer[U8] tag, fullpath: NullablePointer[Pointer[U8]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_bookmark_file_to_data(bookmark: NullablePointer[GBookmarkFile] tag, length: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_bookmark_file_to_file(bookmark: NullablePointer[GBookmarkFile] tag, filename: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_bookmark_file_set_title(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, title: Pointer[U8] tag): None =>
//   fun g_bookmark_file_get_title(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_bookmark_file_set_description(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, description: Pointer[U8] tag): None =>
//   fun g_bookmark_file_get_description(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_bookmark_file_set_mime_type(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, mimetype: Pointer[U8] tag): None =>
//   fun g_bookmark_file_get_mime_type(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_bookmark_file_set_groups(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, groups: NullablePointer[Pointer[U8]] tag, length: U64): None =>
//   fun g_bookmark_file_add_group(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, group: Pointer[U8] tag): None =>
//   fun g_bookmark_file_has_group(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, group: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_bookmark_file_get_groups(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, length: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[Pointer[U8]] =>
//   fun g_bookmark_file_add_application(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, name: Pointer[U8] tag, exec: Pointer[U8] tag): None =>
//   fun g_bookmark_file_has_application(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, name: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_bookmark_file_get_applications(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, length: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[Pointer[U8]] =>
//   fun g_bookmark_file_set_app_info(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, name: Pointer[U8] tag, exec: Pointer[U8] tag, count: I32, stamp: I64, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_bookmark_file_set_application_info(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, name: Pointer[U8] tag, exec: Pointer[U8] tag, count: I32, stamp: NullablePointer[GDateTime] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_bookmark_file_get_app_info(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, name: Pointer[U8] tag, exec: NullablePointer[Pointer[U8]] tag, count: Pointer[U32] tag, stamp: Pointer[I64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_bookmark_file_get_application_info(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, name: Pointer[U8] tag, exec: NullablePointer[Pointer[U8]] tag, count: Pointer[U32] tag, stamp: NullablePointer[NullablePointer[GDateTime]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_bookmark_file_set_is_private(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, isprivate: I32): None =>
//   fun g_bookmark_file_get_is_private(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_bookmark_file_set_icon(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, href: Pointer[U8] tag, mimetype: Pointer[U8] tag): None =>
//   fun g_bookmark_file_get_icon(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, href: NullablePointer[Pointer[U8]] tag, mimetype: NullablePointer[Pointer[U8]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_bookmark_file_set_added(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, added: I64): None =>
//   fun g_bookmark_file_set_added_date_time(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, added: NullablePointer[GDateTime] tag): None =>
//   fun g_bookmark_file_get_added(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_bookmark_file_get_added_date_time(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDateTime] =>
//   fun g_bookmark_file_set_modified(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, modified: I64): None =>
//   fun g_bookmark_file_set_modified_date_time(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, modified: NullablePointer[GDateTime] tag): None =>
//   fun g_bookmark_file_get_modified(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_bookmark_file_get_modified_date_time(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDateTime] =>
//   fun g_bookmark_file_set_visited(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, visited: I64): None =>
//   fun g_bookmark_file_set_visited_date_time(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, visited: NullablePointer[GDateTime] tag): None =>
//   fun g_bookmark_file_get_visited(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_bookmark_file_get_visited_date_time(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDateTime] =>
//   fun g_bookmark_file_has_item(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag): I32 =>
//   fun g_bookmark_file_get_size(bookmark: NullablePointer[GBookmarkFile] tag): I32 =>
//   fun g_bookmark_file_get_uris(bookmark: NullablePointer[GBookmarkFile] tag, length: Pointer[U64] tag): NullablePointer[Pointer[U8]] =>
//   fun g_bookmark_file_remove_group(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, group: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_bookmark_file_remove_application(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, name: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_bookmark_file_remove_item(bookmark: NullablePointer[GBookmarkFile] tag, uri: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_bookmark_file_move_item(bookmark: NullablePointer[GBookmarkFile] tag, olduri: Pointer[U8] tag, newuri: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_bytes_new(data: Pointer[None] tag, size: U64): NullablePointer[GBytes] =>
//   fun g_bytes_new_take(data: Pointer[None] tag, size: U64): NullablePointer[GBytes] =>
//   fun g_bytes_new_static(data: Pointer[None] tag, size: U64): NullablePointer[GBytes] =>
//   Original Name: g_bytes_new_with_free_func/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gbytes.h:47
//   fun g_bytes_new_with_free_func(data: Pointer[None] tag, size: U64, freefunc: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): NullablePointer[GBytes] =>
//   fun g_bytes_new_from_bytes(bytes: NullablePointer[GBytes] tag, offset: U64, length: U64): NullablePointer[GBytes] =>
//   fun g_bytes_get_data(bytes: NullablePointer[GBytes] tag, size: Pointer[U64] tag): Pointer[None] =>
//   fun g_bytes_get_size(bytes: NullablePointer[GBytes] tag): U64 =>
//   fun g_bytes_ref(bytes: NullablePointer[GBytes] tag): NullablePointer[GBytes] =>
//   fun g_bytes_unref(bytes: NullablePointer[GBytes] tag): None =>
//   fun g_bytes_unref_to_data(bytes: NullablePointer[GBytes] tag, size: Pointer[U64] tag): Pointer[None] =>
//   fun g_bytes_unref_to_array(bytes: NullablePointer[GBytes] tag): NullablePointer[GByteArray] =>
//   fun g_bytes_hash(bytes: Pointer[None] tag): U32 =>
//   fun g_bytes_equal(bytes1: Pointer[None] tag, bytes2: Pointer[None] tag): I32 =>
//   fun g_bytes_compare(bytes1: Pointer[None] tag, bytes2: Pointer[None] tag): I32 =>
//   fun g_get_charset(charset: NullablePointer[Pointer[U8]] tag): I32 =>
//   fun g_get_codeset(): Pointer[U8] =>
//   fun g_get_console_charset(charset: NullablePointer[Pointer[U8]] tag): I32 =>
//   fun g_get_language_names(): NullablePointer[Pointer[U8]] =>
//   fun g_get_language_names_with_category(categoryname: Pointer[U8] tag): NullablePointer[Pointer[U8]] =>
//   fun g_get_locale_variants(locale: Pointer[U8] tag): NullablePointer[Pointer[U8]] =>
//   fun g_checksum_type_get_length(checksumtype: I32): I64 =>
//   fun g_checksum_new(checksumtype: I32): NullablePointer[GChecksum] =>
//   fun g_checksum_reset(checksum: NullablePointer[GChecksum] tag): None =>
//   fun g_checksum_copy(checksum: NullablePointer[GChecksum] tag): NullablePointer[GChecksum] =>
//   fun g_checksum_free(checksum: NullablePointer[GChecksum] tag): None =>
//   fun g_checksum_update(checksum: NullablePointer[GChecksum] tag, data: Pointer[U8] tag, length: I64): None =>
//   fun g_checksum_get_string(checksum: NullablePointer[GChecksum] tag): Pointer[U8] =>
//   fun g_checksum_get_digest(checksum: NullablePointer[GChecksum] tag, buffer: Pointer[U8] tag, digestlen: Pointer[U64] tag): None =>
//   fun g_compute_checksum_for_data(checksumtype: I32, data: Pointer[U8] tag, length: U64): Pointer[U8] =>
//   fun g_compute_checksum_for_string(checksumtype: I32, str: Pointer[U8] tag, length: I64): Pointer[U8] =>
//   fun g_compute_checksum_for_bytes(checksumtype: I32, data: NullablePointer[GBytes] tag): Pointer[U8] =>
//   fun g_convert_error_quark(): U32 =>
//   fun g_iconv_open(tocodeset: Pointer[U8] tag, fromcodeset: Pointer[U8] tag): NullablePointer[GIConv] =>
//   fun g_iconv(converter: NullablePointer[GIConv] tag, inbuf: NullablePointer[Pointer[U8]] tag, inbytesleft: Pointer[U64] tag, outbuf: NullablePointer[Pointer[U8]] tag, outbytesleft: Pointer[U64] tag): U64 =>
//   fun g_iconv_close(converter: NullablePointer[GIConv] tag): I32 =>
//   fun g_convert(str: Pointer[U8] tag, len: I64, tocodeset: Pointer[U8] tag, fromcodeset: Pointer[U8] tag, bytesread: Pointer[U64] tag, byteswritten: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_convert_with_iconv(str: Pointer[U8] tag, len: I64, converter: NullablePointer[GIConv] tag, bytesread: Pointer[U64] tag, byteswritten: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_convert_with_fallback(str: Pointer[U8] tag, len: I64, tocodeset: Pointer[U8] tag, fromcodeset: Pointer[U8] tag, fallback: Pointer[U8] tag, bytesread: Pointer[U64] tag, byteswritten: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_locale_to_utf8(opsysstring: Pointer[U8] tag, len: I64, bytesread: Pointer[U64] tag, byteswritten: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_locale_from_utf8(utf8string: Pointer[U8] tag, len: I64, bytesread: Pointer[U64] tag, byteswritten: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_filename_to_utf8(opsysstring: Pointer[U8] tag, len: I64, bytesread: Pointer[U64] tag, byteswritten: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_filename_from_utf8(utf8string: Pointer[U8] tag, len: I64, bytesread: Pointer[U64] tag, byteswritten: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_filename_from_uri(uri: Pointer[U8] tag, hostname: NullablePointer[Pointer[U8]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_filename_display_name(filename: Pointer[U8] tag): Pointer[U8] =>
//   fun g_get_filename_charsets(filenamecharsets: NullablePointer[NullablePointer[Pointer[U8]]] tag): I32 =>
//   fun g_filename_display_basename(filename: Pointer[U8] tag): Pointer[U8] =>
//   fun g_uri_list_extract_uris(urilist: Pointer[U8] tag): NullablePointer[Pointer[U8]] =>
//   fun g_datalist_init(datalist: NullablePointer[NullablePointer[GData]] tag): None =>
//   fun g_datalist_clear(datalist: NullablePointer[NullablePointer[GData]] tag): None =>
//   fun g_datalist_id_get_data(datalist: NullablePointer[NullablePointer[GData]] tag, keyid: U32): Pointer[None] =>
//   fun g_datalist_id_set_data_full(datalist: NullablePointer[NullablePointer[GData]] tag, keyid: U32, data: Pointer[None] tag, destroyfunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_datalist_id_dup_data(datalist: NullablePointer[NullablePointer[GData]] tag, keyid: U32, dupfunc: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): Pointer[None] =>
//   fun g_datalist_id_replace_data(datalist: NullablePointer[NullablePointer[GData]] tag, keyid: U32, oldval: Pointer[None] tag, newval: Pointer[None] tag, destroy: NullablePointer[FUNCTIONTYPE] tag, olddestroy: NullablePointer[NullablePointer[FUNCTIONTYPE]] tag): I32 =>
//   fun g_datalist_id_remove_no_notify(datalist: NullablePointer[NullablePointer[GData]] tag, keyid: U32): Pointer[None] =>
//   fun g_datalist_foreach(datalist: NullablePointer[NullablePointer[GData]] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_datalist_set_flags(datalist: NullablePointer[NullablePointer[GData]] tag, flags: U32): None =>
//   fun g_datalist_unset_flags(datalist: NullablePointer[NullablePointer[GData]] tag, flags: U32): None =>
//   fun g_datalist_get_flags(datalist: NullablePointer[NullablePointer[GData]] tag): U32 =>
//   fun g_dataset_destroy(datasetlocation: Pointer[None] tag): None =>
//   fun g_dataset_id_get_data(datasetlocation: Pointer[None] tag, keyid: U32): Pointer[None] =>
//   fun g_datalist_get_data(datalist: NullablePointer[NullablePointer[GData]] tag, key: Pointer[U8] tag): Pointer[None] =>
//   fun g_dataset_id_set_data_full(datasetlocation: Pointer[None] tag, keyid: U32, data: Pointer[None] tag, destroyfunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_dataset_id_remove_no_notify(datasetlocation: Pointer[None] tag, keyid: U32): Pointer[None] =>
//   fun g_dataset_foreach(datasetlocation: Pointer[None] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_date_new(): NullablePointer[GDate] =>
//   fun g_date_new_dmy(day: U8, month: I32, year: U16): NullablePointer[GDate] =>
//   fun g_date_new_julian(julianday: U32): NullablePointer[GDate] =>
//   fun g_date_free(date: NullablePointer[GDate] tag): None =>
//   fun g_date_copy(date: NullablePointer[GDate] tag): NullablePointer[GDate] =>
//   fun g_date_valid(date: NullablePointer[GDate] tag): I32 =>
//   fun g_date_valid_day(day: U8): I32 =>
//   fun g_date_valid_month(month: I32): I32 =>
//   fun g_date_valid_year(year: U16): I32 =>
//   fun g_date_valid_weekday(weekday: I32): I32 =>
//   fun g_date_valid_julian(juliandate: U32): I32 =>
//   fun g_date_valid_dmy(day: U8, month: I32, year: U16): I32 =>
//   fun g_date_get_weekday(date: NullablePointer[GDate] tag): I32 =>
//   fun g_date_get_month(date: NullablePointer[GDate] tag): I32 =>
//   fun g_date_get_year(date: NullablePointer[GDate] tag): U16 =>
//   fun g_date_get_day(date: NullablePointer[GDate] tag): U8 =>
//   fun g_date_get_julian(date: NullablePointer[GDate] tag): U32 =>
//   fun g_date_get_day_of_year(date: NullablePointer[GDate] tag): U32 =>
//   fun g_date_get_monday_week_of_year(date: NullablePointer[GDate] tag): U32 =>
//   fun g_date_get_sunday_week_of_year(date: NullablePointer[GDate] tag): U32 =>
//   fun g_date_get_iso8601_week_of_year(date: NullablePointer[GDate] tag): U32 =>
//   fun g_date_clear(date: NullablePointer[GDate] tag, ndates: U32): None =>
//   fun g_date_set_parse(date: NullablePointer[GDate] tag, str: Pointer[U8] tag): None =>
//   fun g_date_set_time_t(date: NullablePointer[GDate] tag, timet: I64): None =>
//   fun g_date_set_time_val(date: NullablePointer[GDate] tag, timeval: NullablePointer[GTimeVal] tag): None =>
//   fun g_date_set_time(date: NullablePointer[GDate] tag, time: I32): None =>
//   fun g_date_set_month(date: NullablePointer[GDate] tag, month: I32): None =>
//   fun g_date_set_day(date: NullablePointer[GDate] tag, day: U8): None =>
//   fun g_date_set_year(date: NullablePointer[GDate] tag, year: U16): None =>
//   fun g_date_set_dmy(date: NullablePointer[GDate] tag, day: U8, month: I32, y: U16): None =>
//   fun g_date_set_julian(date: NullablePointer[GDate] tag, juliandate: U32): None =>
//   fun g_date_is_first_of_month(date: NullablePointer[GDate] tag): I32 =>
//   fun g_date_is_last_of_month(date: NullablePointer[GDate] tag): I32 =>
//   fun g_date_add_days(date: NullablePointer[GDate] tag, ndays: U32): None =>
//   fun g_date_subtract_days(date: NullablePointer[GDate] tag, ndays: U32): None =>
//   fun g_date_add_months(date: NullablePointer[GDate] tag, nmonths: U32): None =>
//   fun g_date_subtract_months(date: NullablePointer[GDate] tag, nmonths: U32): None =>
//   fun g_date_add_years(date: NullablePointer[GDate] tag, nyears: U32): None =>
//   fun g_date_subtract_years(date: NullablePointer[GDate] tag, nyears: U32): None =>
//   fun g_date_is_leap_year(year: U16): I32 =>
//   fun g_date_get_days_in_month(month: I32, year: U16): U8 =>
//   fun g_date_get_monday_weeks_in_year(year: U16): U8 =>
//   fun g_date_get_sunday_weeks_in_year(year: U16): U8 =>
//   fun g_date_days_between(date1: NullablePointer[GDate] tag, date2: NullablePointer[GDate] tag): I32 =>
//   fun g_date_compare(lhs: NullablePointer[GDate] tag, rhs: NullablePointer[GDate] tag): I32 =>
//   fun g_date_to_struct_tm(date: NullablePointer[GDate] tag, tm: NullablePointer[Tm] tag): None =>
//   fun g_date_clamp(date: NullablePointer[GDate] tag, mindate: NullablePointer[GDate] tag, maxdate: NullablePointer[GDate] tag): None =>
//   fun g_date_order(date1: NullablePointer[GDate] tag, date2: NullablePointer[GDate] tag): None =>
//   fun g_date_strftime(s: Pointer[U8] tag, slen: U64, format: Pointer[U8] tag, date: NullablePointer[GDate] tag): U64 =>
//   fun g_dir_open(path: Pointer[U8] tag, flags: U32, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDir] =>
//   fun g_dir_read_name(dir: NullablePointer[GDir] tag): Pointer[U8] =>
//   fun g_dir_rewind(dir: NullablePointer[GDir] tag): None =>
//   fun g_dir_close(dir: NullablePointer[GDir] tag): None =>
//   fun g_getenv(variable: Pointer[U8] tag): Pointer[U8] =>
//   fun g_setenv(variable: Pointer[U8] tag, value: Pointer[U8] tag, overwrite: I32): I32 =>
//   fun g_unsetenv(variable: Pointer[U8] tag): None =>
//   fun g_listenv(): NullablePointer[Pointer[U8]] =>
//   fun g_get_environ(): NullablePointer[Pointer[U8]] =>
//   fun g_environ_getenv(envp: NullablePointer[Pointer[U8]] tag, variable: Pointer[U8] tag): Pointer[U8] =>
//   fun g_environ_setenv(envp: NullablePointer[Pointer[U8]] tag, variable: Pointer[U8] tag, value: Pointer[U8] tag, overwrite: I32): NullablePointer[Pointer[U8]] =>
//   fun g_environ_unsetenv(envp: NullablePointer[Pointer[U8]] tag, variable: Pointer[U8] tag): NullablePointer[Pointer[U8]] =>
//   fun g_file_error_quark(): U32 =>
//   fun g_file_error_from_errno(errno: I32): I32 =>
//   fun g_file_test(filename: Pointer[U8] tag, test: I32): I32 =>
//   fun g_file_get_contents(filename: Pointer[U8] tag, contents: NullablePointer[Pointer[U8]] tag, length: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_set_contents(filename: Pointer[U8] tag, contents: Pointer[U8] tag, length: I64, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_set_contents_full(filename: Pointer[U8] tag, contents: Pointer[U8] tag, length: I64, flags: I32, mode: I32, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_read_link(filename: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_mkdtemp(tmpl: Pointer[U8] tag): Pointer[U8] =>
//   fun g_mkdtemp_full(tmpl: Pointer[U8] tag, mode: I32): Pointer[U8] =>
//   fun g_mkstemp(tmpl: Pointer[U8] tag): I32 =>
//   fun g_mkstemp_full(tmpl: Pointer[U8] tag, flags: I32, mode: I32): I32 =>
//   fun g_file_open_tmp(tmpl: Pointer[U8] tag, nameused: NullablePointer[Pointer[U8]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_dir_make_tmp(tmpl: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
// /*  fun g_build_path(separator: Pointer[U8] tag, firstelement: Pointer[U8] tag, ...): Pointer[U8] =>
//   fun g_build_pathv(separator: Pointer[U8] tag, args: NullablePointer[Pointer[U8]] tag): Pointer[U8] =>
// /*  fun g_build_filename(firstelement: Pointer[U8] tag, ...): Pointer[U8] =>
//   fun g_build_filenamev(args: NullablePointer[Pointer[U8]] tag): Pointer[U8] =>
//   fun g_build_filename_valist(firstelement: Pointer[U8] tag, args: NullablePointer[Pointer[Valisttag]] tag): Pointer[U8] =>
//   fun g_mkdir_with_parents(pathname: Pointer[U8] tag, mode: I32): I32 =>
//   fun g_path_is_absolute(filename: Pointer[U8] tag): I32 =>
//   fun g_path_skip_root(filename: Pointer[U8] tag): Pointer[U8] =>
//   fun g_basename(filename: Pointer[U8] tag): Pointer[U8] =>
//   fun g_get_current_dir(): Pointer[U8] =>
//   fun g_path_get_basename(filename: Pointer[U8] tag): Pointer[U8] =>
//   fun g_path_get_dirname(filename: Pointer[U8] tag): Pointer[U8] =>
//   fun g_canonicalize_filename(filename: Pointer[U8] tag, relativeto: Pointer[U8] tag): Pointer[U8] =>
//   fun g_strip_context(msgid: Pointer[U8] tag, msgval: Pointer[U8] tag): Pointer[U8] =>
//   fun g_dgettext(domain: Pointer[U8] tag, msgid: Pointer[U8] tag): Pointer[U8] =>
//   fun g_dcgettext(domain: Pointer[U8] tag, msgid: Pointer[U8] tag, category: I32): Pointer[U8] =>
//   fun g_dngettext(domain: Pointer[U8] tag, msgid: Pointer[U8] tag, msgidplural: Pointer[U8] tag, n: U64): Pointer[U8] =>
//   fun g_dpgettext(domain: Pointer[U8] tag, msgctxtid: Pointer[U8] tag, msgidoffset: U64): Pointer[U8] =>
//   fun g_dpgettext2(domain: Pointer[U8] tag, context: Pointer[U8] tag, msgid: Pointer[U8] tag): Pointer[U8] =>
//   fun g_free(mem: Pointer[None] tag): None =>
//   fun g_clear_pointer(pp: NullablePointer[Pointer[None]] tag, destroy: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_malloc(nbytes: U64): Pointer[None] =>
//   fun g_malloc0(nbytes: U64): Pointer[None] =>
//   fun g_realloc(mem: Pointer[None] tag, nbytes: U64): Pointer[None] =>
//   fun g_try_malloc(nbytes: U64): Pointer[None] =>
//   fun g_try_malloc0(nbytes: U64): Pointer[None] =>
//   fun g_try_realloc(mem: Pointer[None] tag, nbytes: U64): Pointer[None] =>
//   fun g_malloc_n(nblocks: U64, nblockbytes: U64): Pointer[None] =>
//   fun g_malloc0_n(nblocks: U64, nblockbytes: U64): Pointer[None] =>
//   fun g_realloc_n(mem: Pointer[None] tag, nblocks: U64, nblockbytes: U64): Pointer[None] =>
//   fun g_try_malloc_n(nblocks: U64, nblockbytes: U64): Pointer[None] =>
//   fun g_try_malloc0_n(nblocks: U64, nblockbytes: U64): Pointer[None] =>
//   fun g_try_realloc_n(mem: Pointer[None] tag, nblocks: U64, nblockbytes: U64): Pointer[None] =>
//   fun g_steal_pointer(pp: Pointer[None] tag): Pointer[None] =>
//   fun g_mem_set_vtable(vtable: NullablePointer[GMemVTable] tag): None =>
//   fun g_mem_is_system_malloc(): I32 =>
//   fun g_mem_profile(): None =>
//   fun g_node_new(data: Pointer[None] tag): NullablePointer[GNode] =>
//   fun g_node_destroy(root: NullablePointer[GNode] tag): None =>
//   fun g_node_unlink(node: NullablePointer[GNode] tag): None =>
//   fun g_node_copy_deep(node: NullablePointer[GNode] tag, copyfunc: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag): NullablePointer[GNode] =>
//   fun g_node_copy(node: NullablePointer[GNode] tag): NullablePointer[GNode] =>
//   fun g_node_insert(parent: NullablePointer[GNode] tag, position: I32, node: NullablePointer[GNode] tag): NullablePointer[GNode] =>
//   fun g_node_insert_before(parent: NullablePointer[GNode] tag, sibling: NullablePointer[GNode] tag, node: NullablePointer[GNode] tag): NullablePointer[GNode] =>
//   fun g_node_insert_after(parent: NullablePointer[GNode] tag, sibling: NullablePointer[GNode] tag, node: NullablePointer[GNode] tag): NullablePointer[GNode] =>
//   fun g_node_prepend(parent: NullablePointer[GNode] tag, node: NullablePointer[GNode] tag): NullablePointer[GNode] =>
//   fun g_node_n_nodes(root: NullablePointer[GNode] tag, flags: I32): U32 =>
//   fun g_node_get_root(node: NullablePointer[GNode] tag): NullablePointer[GNode] =>
//   fun g_node_is_ancestor(node: NullablePointer[GNode] tag, descendant: NullablePointer[GNode] tag): I32 =>
//   fun g_node_depth(node: NullablePointer[GNode] tag): U32 =>
//   fun g_node_find(root: NullablePointer[GNode] tag, order: I32, flags: I32, data: Pointer[None] tag): NullablePointer[GNode] =>
//   fun g_node_traverse(root: NullablePointer[GNode] tag, order: I32, flags: I32, maxdepth: I32, func: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag): None =>
//   fun g_node_max_height(root: NullablePointer[GNode] tag): U32 =>
//   fun g_node_children_foreach(node: NullablePointer[GNode] tag, flags: I32, func: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag): None =>
//   fun g_node_reverse_children(node: NullablePointer[GNode] tag): None =>
//   fun g_node_n_children(node: NullablePointer[GNode] tag): U32 =>
//   fun g_node_nth_child(node: NullablePointer[GNode] tag, n: U32): NullablePointer[GNode] =>
//   fun g_node_last_child(node: NullablePointer[GNode] tag): NullablePointer[GNode] =>
//   fun g_node_find_child(node: NullablePointer[GNode] tag, flags: I32, data: Pointer[None] tag): NullablePointer[GNode] =>
//   fun g_node_child_position(node: NullablePointer[GNode] tag, child: NullablePointer[GNode] tag): I32 =>
//   fun g_node_child_index(node: NullablePointer[GNode] tag, data: Pointer[None] tag): I32 =>
//   fun g_node_first_sibling(node: NullablePointer[GNode] tag): NullablePointer[GNode] =>
//   fun g_node_last_sibling(node: NullablePointer[GNode] tag): NullablePointer[GNode] =>
//   fun g_list_alloc(): NullablePointer[GList] =>
//   fun g_list_free(list: NullablePointer[GList] tag): None =>
//   fun g_list_free_1(list: NullablePointer[GList] tag): None =>
//   fun g_list_free_full(list: NullablePointer[GList] tag, freefunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_list_append(list: NullablePointer[GList] tag, data: Pointer[None] tag): NullablePointer[GList] =>
//   fun g_list_prepend(list: NullablePointer[GList] tag, data: Pointer[None] tag): NullablePointer[GList] =>
//   fun g_list_insert(list: NullablePointer[GList] tag, data: Pointer[None] tag, position: I32): NullablePointer[GList] =>
//   fun g_list_insert_sorted(list: NullablePointer[GList] tag, data: Pointer[None] tag, func: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[GList] =>
//   fun g_list_insert_sorted_with_data(list: NullablePointer[GList] tag, data: Pointer[None] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): NullablePointer[GList] =>
//   fun g_list_insert_before(list: NullablePointer[GList] tag, sibling: NullablePointer[GList] tag, data: Pointer[None] tag): NullablePointer[GList] =>
//   fun g_list_insert_before_link(list: NullablePointer[GList] tag, sibling: NullablePointer[GList] tag, link: NullablePointer[GList] tag): NullablePointer[GList] =>
//   fun g_list_concat(list1: NullablePointer[GList] tag, list2: NullablePointer[GList] tag): NullablePointer[GList] =>
//   fun g_list_remove(list: NullablePointer[GList] tag, data: Pointer[None] tag): NullablePointer[GList] =>
//   fun g_list_remove_all(list: NullablePointer[GList] tag, data: Pointer[None] tag): NullablePointer[GList] =>
//   fun g_list_remove_link(list: NullablePointer[GList] tag, llink: NullablePointer[GList] tag): NullablePointer[GList] =>
//   fun g_list_delete_link(list: NullablePointer[GList] tag, link: NullablePointer[GList] tag): NullablePointer[GList] =>
//   fun g_list_reverse(list: NullablePointer[GList] tag): NullablePointer[GList] =>
//   fun g_list_copy(list: NullablePointer[GList] tag): NullablePointer[GList] =>
//   fun g_list_copy_deep(list: NullablePointer[GList] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): NullablePointer[GList] =>
//   fun g_list_nth(list: NullablePointer[GList] tag, n: U32): NullablePointer[GList] =>
//   fun g_list_nth_prev(list: NullablePointer[GList] tag, n: U32): NullablePointer[GList] =>
//   fun g_list_find(list: NullablePointer[GList] tag, data: Pointer[None] tag): NullablePointer[GList] =>
//   fun g_list_find_custom(list: NullablePointer[GList] tag, data: Pointer[None] tag, func: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[GList] =>
//   fun g_list_position(list: NullablePointer[GList] tag, llink: NullablePointer[GList] tag): I32 =>
//   fun g_list_index(list: NullablePointer[GList] tag, data: Pointer[None] tag): I32 =>
//   fun g_list_last(list: NullablePointer[GList] tag): NullablePointer[GList] =>
//   fun g_list_first(list: NullablePointer[GList] tag): NullablePointer[GList] =>
//   fun g_list_length(list: NullablePointer[GList] tag): U32 =>
//   fun g_list_foreach(list: NullablePointer[GList] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_list_sort(list: NullablePointer[GList] tag, comparefunc: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[GList] =>
//   fun g_list_sort_with_data(list: NullablePointer[GList] tag, comparefunc: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): NullablePointer[GList] =>
//   fun g_list_nth_data(list: NullablePointer[GList] tag, n: U32): Pointer[None] =>
//   fun g_clear_list(listptr: NullablePointer[NullablePointer[GList]] tag, destroy: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_hash_table_new(hashfunc: NullablePointer[FUNCTIONTYPE] tag, keyequalfunc: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[GHashTable] =>
//   fun g_hash_table_new_full(hashfunc: NullablePointer[FUNCTIONTYPE] tag, keyequalfunc: NullablePointer[FUNCTIONTYPE] tag, keydestroyfunc: NullablePointer[FUNCTIONTYPE] tag, valuedestroyfunc: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[GHashTable] =>
//   fun g_hash_table_destroy(hashtable: NullablePointer[GHashTable] tag): None =>
//   fun g_hash_table_insert(hashtable: NullablePointer[GHashTable] tag, key: Pointer[None] tag, value: Pointer[None] tag): I32 =>
//   fun g_hash_table_replace(hashtable: NullablePointer[GHashTable] tag, key: Pointer[None] tag, value: Pointer[None] tag): I32 =>
//   fun g_hash_table_add(hashtable: NullablePointer[GHashTable] tag, key: Pointer[None] tag): I32 =>
//   fun g_hash_table_remove(hashtable: NullablePointer[GHashTable] tag, key: Pointer[None] tag): I32 =>
//   fun g_hash_table_remove_all(hashtable: NullablePointer[GHashTable] tag): None =>
//   fun g_hash_table_steal(hashtable: NullablePointer[GHashTable] tag, key: Pointer[None] tag): I32 =>
//   fun g_hash_table_steal_extended(hashtable: NullablePointer[GHashTable] tag, lookupkey: Pointer[None] tag, stolenkey: NullablePointer[Pointer[None]] tag, stolenvalue: NullablePointer[Pointer[None]] tag): I32 =>
//   fun g_hash_table_steal_all(hashtable: NullablePointer[GHashTable] tag): None =>
//   fun g_hash_table_lookup(hashtable: NullablePointer[GHashTable] tag, key: Pointer[None] tag): Pointer[None] =>
//   fun g_hash_table_contains(hashtable: NullablePointer[GHashTable] tag, key: Pointer[None] tag): I32 =>
//   fun g_hash_table_lookup_extended(hashtable: NullablePointer[GHashTable] tag, lookupkey: Pointer[None] tag, origkey: NullablePointer[Pointer[None]] tag, value: NullablePointer[Pointer[None]] tag): I32 =>
//   fun g_hash_table_foreach(hashtable: NullablePointer[GHashTable] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_hash_table_find(hashtable: NullablePointer[GHashTable] tag, predicate: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): Pointer[None] =>
//   fun g_hash_table_foreach_remove(hashtable: NullablePointer[GHashTable] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): U32 =>
//   fun g_hash_table_foreach_steal(hashtable: NullablePointer[GHashTable] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): U32 =>
//   fun g_hash_table_size(hashtable: NullablePointer[GHashTable] tag): U32 =>
//   fun g_hash_table_get_keys(hashtable: NullablePointer[GHashTable] tag): NullablePointer[GList] =>
//   fun g_hash_table_get_values(hashtable: NullablePointer[GHashTable] tag): NullablePointer[GList] =>
//   fun g_hash_table_get_keys_as_array(hashtable: NullablePointer[GHashTable] tag, length: Pointer[U32] tag): NullablePointer[Pointer[None]] =>
//   fun g_hash_table_iter_init(iter: NullablePointer[GHashTableIter] tag, hashtable: NullablePointer[GHashTable] tag): None =>
//   fun g_hash_table_iter_next(iter: NullablePointer[GHashTableIter] tag, key: NullablePointer[Pointer[None]] tag, value: NullablePointer[Pointer[None]] tag): I32 =>
//   fun g_hash_table_iter_get_hash_table(iter: NullablePointer[GHashTableIter] tag): NullablePointer[GHashTable] =>
//   fun g_hash_table_iter_remove(iter: NullablePointer[GHashTableIter] tag): None =>
//   fun g_hash_table_iter_replace(iter: NullablePointer[GHashTableIter] tag, value: Pointer[None] tag): None =>
//   fun g_hash_table_iter_steal(iter: NullablePointer[GHashTableIter] tag): None =>
//   fun g_hash_table_ref(hashtable: NullablePointer[GHashTable] tag): NullablePointer[GHashTable] =>
//   fun g_hash_table_unref(hashtable: NullablePointer[GHashTable] tag): None =>
//   fun g_str_equal(v1: Pointer[None] tag, v2: Pointer[None] tag): I32 =>
//   fun g_str_hash(v: Pointer[None] tag): U32 =>
//   fun g_int_equal(v1: Pointer[None] tag, v2: Pointer[None] tag): I32 =>
//   fun g_int_hash(v: Pointer[None] tag): U32 =>
//   fun g_int64_equal(v1: Pointer[None] tag, v2: Pointer[None] tag): I32 =>
//   fun g_int64_hash(v: Pointer[None] tag): U32 =>
//   fun g_double_equal(v1: Pointer[None] tag, v2: Pointer[None] tag): I32 =>
//   fun g_double_hash(v: Pointer[None] tag): U32 =>
//   fun g_direct_hash(v: Pointer[None] tag): U32 =>
//   fun g_direct_equal(v1: Pointer[None] tag, v2: Pointer[None] tag): I32 =>
//   fun g_hmac_new(digesttype: I32, key: Pointer[U8] tag, keylen: U64): NullablePointer[GHmac] =>
//   fun g_hmac_copy(hmac: NullablePointer[GHmac] tag): NullablePointer[GHmac] =>
//   fun g_hmac_ref(hmac: NullablePointer[GHmac] tag): NullablePointer[GHmac] =>
//   fun g_hmac_unref(hmac: NullablePointer[GHmac] tag): None =>
//   fun g_hmac_update(hmac: NullablePointer[GHmac] tag, data: Pointer[U8] tag, length: I64): None =>
//   fun g_hmac_get_string(hmac: NullablePointer[GHmac] tag): Pointer[U8] =>
//   fun g_hmac_get_digest(hmac: NullablePointer[GHmac] tag, buffer: Pointer[U8] tag, digestlen: Pointer[U64] tag): None =>
//   fun g_compute_hmac_for_data(digesttype: I32, key: Pointer[U8] tag, keylen: U64, data: Pointer[U8] tag, length: U64): Pointer[U8] =>
//   fun g_compute_hmac_for_string(digesttype: I32, key: Pointer[U8] tag, keylen: U64, str: Pointer[U8] tag, length: I64): Pointer[U8] =>
//   fun g_compute_hmac_for_bytes(digesttype: I32, key: NullablePointer[GBytes] tag, data: NullablePointer[GBytes] tag): Pointer[U8] =>
//   fun g_hook_list_init(hooklist: NullablePointer[GHookList] tag, hooksize: U32): None =>
//   fun g_hook_list_clear(hooklist: NullablePointer[GHookList] tag): None =>
//   fun g_hook_alloc(hooklist: NullablePointer[GHookList] tag): NullablePointer[GHook] =>
//   fun g_hook_free(hooklist: NullablePointer[GHookList] tag, hook: NullablePointer[GHook] tag): None =>
//   fun g_hook_ref(hooklist: NullablePointer[GHookList] tag, hook: NullablePointer[GHook] tag): NullablePointer[GHook] =>
//   fun g_hook_unref(hooklist: NullablePointer[GHookList] tag, hook: NullablePointer[GHook] tag): None =>
//   fun g_hook_destroy(hooklist: NullablePointer[GHookList] tag, hookid: U64): I32 =>
//   fun g_hook_destroy_link(hooklist: NullablePointer[GHookList] tag, hook: NullablePointer[GHook] tag): None =>
//   fun g_hook_prepend(hooklist: NullablePointer[GHookList] tag, hook: NullablePointer[GHook] tag): None =>
//   fun g_hook_insert_before(hooklist: NullablePointer[GHookList] tag, sibling: NullablePointer[GHook] tag, hook: NullablePointer[GHook] tag): None =>
//   fun g_hook_insert_sorted(hooklist: NullablePointer[GHookList] tag, hook: NullablePointer[GHook] tag, func: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_hook_get(hooklist: NullablePointer[GHookList] tag, hookid: U64): NullablePointer[GHook] =>
//   fun g_hook_find(hooklist: NullablePointer[GHookList] tag, needvalids: I32, func: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag): NullablePointer[GHook] =>
//   fun g_hook_find_data(hooklist: NullablePointer[GHookList] tag, needvalids: I32, data: Pointer[None] tag): NullablePointer[GHook] =>
//   Original Name: g_hook_find_func/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/ghook.h:150
//   fun g_hook_find_func(hooklist: NullablePointer[GHookList] tag, needvalids: I32, func: Pointer[None] tag): NullablePointer[GHook] =>
//   Original Name: g_hook_find_func_data/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/ghook.h:154
//   fun g_hook_find_func_data(hooklist: NullablePointer[GHookList] tag, needvalids: I32, func: Pointer[None] tag, data: Pointer[None] tag): NullablePointer[GHook] =>
//   fun g_hook_first_valid(hooklist: NullablePointer[GHookList] tag, maybeincall: I32): NullablePointer[GHook] =>
//   fun g_hook_next_valid(hooklist: NullablePointer[GHookList] tag, hook: NullablePointer[GHook] tag, maybeincall: I32): NullablePointer[GHook] =>
//   fun g_hook_compare_ids(newhook: NullablePointer[GHook] tag, sibling: NullablePointer[GHook] tag): I32 =>
//   fun g_hook_list_invoke(hooklist: NullablePointer[GHookList] tag, mayrecurse: I32): None =>
//   fun g_hook_list_invoke_check(hooklist: NullablePointer[GHookList] tag, mayrecurse: I32): None =>
//   fun g_hook_list_marshal(hooklist: NullablePointer[GHookList] tag, mayrecurse: I32, marshaller: NullablePointer[FUNCTIONTYPE] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_hook_list_marshal_check(hooklist: NullablePointer[GHookList] tag, mayrecurse: I32, marshaller: NullablePointer[FUNCTIONTYPE] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_hostname_is_non_ascii(hostname: Pointer[U8] tag): I32 =>
//   fun g_hostname_is_ascii_encoded(hostname: Pointer[U8] tag): I32 =>
//   fun g_hostname_is_ip_address(hostname: Pointer[U8] tag): I32 =>
//   fun g_hostname_to_ascii(hostname: Pointer[U8] tag): Pointer[U8] =>
//   fun g_hostname_to_unicode(hostname: Pointer[U8] tag): Pointer[U8] =>
//   fun g_poll(fds: NullablePointer[GPollFD] tag, nfds: U32, timeout: I32): I32 =>
//   fun g_slist_alloc(): NullablePointer[GSList] =>
//   fun g_slist_free(list: NullablePointer[GSList] tag): None =>
//   fun g_slist_free_1(list: NullablePointer[GSList] tag): None =>
//   fun g_slist_free_full(list: NullablePointer[GSList] tag, freefunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_slist_append(list: NullablePointer[GSList] tag, data: Pointer[None] tag): NullablePointer[GSList] =>
//   fun g_slist_prepend(list: NullablePointer[GSList] tag, data: Pointer[None] tag): NullablePointer[GSList] =>
//   fun g_slist_insert(list: NullablePointer[GSList] tag, data: Pointer[None] tag, position: I32): NullablePointer[GSList] =>
//   fun g_slist_insert_sorted(list: NullablePointer[GSList] tag, data: Pointer[None] tag, func: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[GSList] =>
//   fun g_slist_insert_sorted_with_data(list: NullablePointer[GSList] tag, data: Pointer[None] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): NullablePointer[GSList] =>
//   fun g_slist_insert_before(slist: NullablePointer[GSList] tag, sibling: NullablePointer[GSList] tag, data: Pointer[None] tag): NullablePointer[GSList] =>
//   fun g_slist_concat(list1: NullablePointer[GSList] tag, list2: NullablePointer[GSList] tag): NullablePointer[GSList] =>
//   fun g_slist_remove(list: NullablePointer[GSList] tag, data: Pointer[None] tag): NullablePointer[GSList] =>
//   fun g_slist_remove_all(list: NullablePointer[GSList] tag, data: Pointer[None] tag): NullablePointer[GSList] =>
//   fun g_slist_remove_link(list: NullablePointer[GSList] tag, link: NullablePointer[GSList] tag): NullablePointer[GSList] =>
//   fun g_slist_delete_link(list: NullablePointer[GSList] tag, link: NullablePointer[GSList] tag): NullablePointer[GSList] =>
//   fun g_slist_reverse(list: NullablePointer[GSList] tag): NullablePointer[GSList] =>
//   fun g_slist_copy(list: NullablePointer[GSList] tag): NullablePointer[GSList] =>
//   fun g_slist_copy_deep(list: NullablePointer[GSList] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): NullablePointer[GSList] =>
//   fun g_slist_nth(list: NullablePointer[GSList] tag, n: U32): NullablePointer[GSList] =>
//   fun g_slist_find(list: NullablePointer[GSList] tag, data: Pointer[None] tag): NullablePointer[GSList] =>
//   fun g_slist_find_custom(list: NullablePointer[GSList] tag, data: Pointer[None] tag, func: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[GSList] =>
//   fun g_slist_position(list: NullablePointer[GSList] tag, llink: NullablePointer[GSList] tag): I32 =>
//   fun g_slist_index(list: NullablePointer[GSList] tag, data: Pointer[None] tag): I32 =>
//   fun g_slist_last(list: NullablePointer[GSList] tag): NullablePointer[GSList] =>
//   fun g_slist_length(list: NullablePointer[GSList] tag): U32 =>
//   fun g_slist_foreach(list: NullablePointer[GSList] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_slist_sort(list: NullablePointer[GSList] tag, comparefunc: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[GSList] =>
//   fun g_slist_sort_with_data(list: NullablePointer[GSList] tag, comparefunc: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): NullablePointer[GSList] =>
//   fun g_slist_nth_data(list: NullablePointer[GSList] tag, n: U32): Pointer[None] =>
//   fun g_clear_slist(slistptr: NullablePointer[NullablePointer[GSList]] tag, destroy: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_main_context_new(): NullablePointer[GMainContext] =>
//   fun g_main_context_ref(context: NullablePointer[GMainContext] tag): NullablePointer[GMainContext] =>
//   fun g_main_context_unref(context: NullablePointer[GMainContext] tag): None =>
//   fun g_main_context_default(): NullablePointer[GMainContext] =>
//   fun g_main_context_iteration(context: NullablePointer[GMainContext] tag, mayblock: I32): I32 =>
//   fun g_main_context_pending(context: NullablePointer[GMainContext] tag): I32 =>
//   fun g_main_context_find_source_by_id(context: NullablePointer[GMainContext] tag, sourceid: U32): NullablePointer[GSource] =>
//   fun g_main_context_find_source_by_user_data(context: NullablePointer[GMainContext] tag, userdata: Pointer[None] tag): NullablePointer[GSource] =>
//   Original Name: g_main_context_find_source_by_funcs_user_data/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gmain.h:379
//   fun g_main_context_find_source_by_funcs_user_data(context: NullablePointer[GMainContext] tag, funcs: NullablePointer[GSourceFuncs] tag, userdata: Pointer[None] tag): NullablePointer[GSource] =>
//   fun g_main_context_wakeup(context: NullablePointer[GMainContext] tag): None =>
//   fun g_main_context_acquire(context: NullablePointer[GMainContext] tag): I32 =>
//   fun g_main_context_release(context: NullablePointer[GMainContext] tag): None =>
//   fun g_main_context_is_owner(context: NullablePointer[GMainContext] tag): I32 =>
//   fun g_main_context_wait(context: NullablePointer[GMainContext] tag, cond: NullablePointer[GCond] tag, mutex: Pointer[None] tag): I32 =>
//   fun g_main_context_prepare(context: NullablePointer[GMainContext] tag, priority: Pointer[I32] tag): I32 =>
//   fun g_main_context_query(context: NullablePointer[GMainContext] tag, maxpriority: I32, timeout: Pointer[I32] tag, fds: NullablePointer[GPollFD] tag, nfds: I32): I32 =>
//   fun g_main_context_check(context: NullablePointer[GMainContext] tag, maxpriority: I32, fds: NullablePointer[GPollFD] tag, nfds: I32): I32 =>
//   fun g_main_context_dispatch(context: NullablePointer[GMainContext] tag): None =>
//   Original Name: g_main_context_set_poll_func/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gmain.h:416
//   fun g_main_context_set_poll_func(context: NullablePointer[GMainContext] tag, func: NullablePointer[FUNCTIONTYPE] tag): None =>
//   Original Name: g_main_context_get_poll_func/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gmain.h:419
//   fun g_main_context_get_poll_func(context: NullablePointer[GMainContext] tag): NullablePointer[FUNCTIONTYPE] =>
//   fun g_main_context_add_poll(context: NullablePointer[GMainContext] tag, fd: NullablePointer[GPollFD] tag, priority: I32): None =>
//   fun g_main_context_remove_poll(context: NullablePointer[GMainContext] tag, fd: NullablePointer[GPollFD] tag): None =>
//   fun g_main_depth(): I32 =>
//   fun g_main_current_source(): NullablePointer[GSource] =>
//   fun g_main_context_push_thread_default(context: NullablePointer[GMainContext] tag): None =>
//   fun g_main_context_pop_thread_default(context: NullablePointer[GMainContext] tag): None =>
//   fun g_main_context_get_thread_default(): NullablePointer[GMainContext] =>
//   fun g_main_context_ref_thread_default(): NullablePointer[GMainContext] =>
//   fun g_main_context_pusher_new(maincontext: NullablePointer[GMainContext] tag): Pointer[None] =>
//   fun g_main_context_pusher_free(pusher: Pointer[None] tag): None =>
//   fun g_main_loop_new(context: NullablePointer[GMainContext] tag, isrunning: I32): NullablePointer[GMainLoop] =>
//   fun g_main_loop_run(loop: NullablePointer[GMainLoop] tag): None =>
//   fun g_main_loop_quit(loop: NullablePointer[GMainLoop] tag): None =>
//   fun g_main_loop_ref(loop: NullablePointer[GMainLoop] tag): NullablePointer[GMainLoop] =>
//   fun g_main_loop_unref(loop: NullablePointer[GMainLoop] tag): None =>
//   fun g_main_loop_is_running(loop: NullablePointer[GMainLoop] tag): I32 =>
//   fun g_main_loop_get_context(loop: NullablePointer[GMainLoop] tag): NullablePointer[GMainContext] =>
//   fun g_source_new(sourcefuncs: NullablePointer[GSourceFuncs] tag, structsize: U32): NullablePointer[GSource] =>
//   Original Name: g_source_set_dispose_function/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gmain.h:558
//   fun g_source_set_dispose_function(source: NullablePointer[GSource] tag, dispose: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_source_ref(source: NullablePointer[GSource] tag): NullablePointer[GSource] =>
//   fun g_source_unref(source: NullablePointer[GSource] tag): None =>
//   fun g_source_attach(source: NullablePointer[GSource] tag, context: NullablePointer[GMainContext] tag): U32 =>
//   fun g_source_destroy(source: NullablePointer[GSource] tag): None =>
//   fun g_source_set_priority(source: NullablePointer[GSource] tag, priority: I32): None =>
//   fun g_source_get_priority(source: NullablePointer[GSource] tag): I32 =>
//   fun g_source_set_can_recurse(source: NullablePointer[GSource] tag, canrecurse: I32): None =>
//   fun g_source_get_can_recurse(source: NullablePointer[GSource] tag): I32 =>
//   fun g_source_get_id(source: NullablePointer[GSource] tag): U32 =>
//   fun g_source_get_context(source: NullablePointer[GSource] tag): NullablePointer[GMainContext] =>
//   fun g_source_set_callback(source: NullablePointer[GSource] tag, func: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag, notify: NullablePointer[FUNCTIONTYPE] tag): None =>
//   Original Name: g_source_set_funcs/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gmain.h:596
//   fun g_source_set_funcs(source: NullablePointer[GSource] tag, funcs: NullablePointer[GSourceFuncs] tag): None =>
//   fun g_source_is_destroyed(source: NullablePointer[GSource] tag): I32 =>
//   fun g_source_set_name(source: NullablePointer[GSource] tag, name: Pointer[U8] tag): None =>
//   fun g_source_get_name(source: NullablePointer[GSource] tag): Pointer[U8] =>
//   fun g_source_set_name_by_id(g_tag: U32, name: Pointer[U8] tag): None =>
//   fun g_source_set_ready_time(source: NullablePointer[GSource] tag, readytime: I64): None =>
//   fun g_source_get_ready_time(source: NullablePointer[GSource] tag): I64 =>
//   fun g_source_add_unix_fd(source: NullablePointer[GSource] tag, fd: I32, events: I32): Pointer[None] =>
//   fun g_source_modify_unix_fd(source: NullablePointer[GSource] tag, g_tag: Pointer[None] tag, newevents: I32): None =>
//   fun g_source_remove_unix_fd(source: NullablePointer[GSource] tag, g_tag: Pointer[None] tag): None =>
//   fun g_source_query_unix_fd(source: NullablePointer[GSource] tag, g_tag: Pointer[None] tag): I32 =>
//   fun g_source_set_callback_indirect(source: NullablePointer[GSource] tag, callbackdata: Pointer[None] tag, callbackfuncs: NullablePointer[GSourceCallbackFuncs] tag): None =>
//   fun g_source_add_poll(source: NullablePointer[GSource] tag, fd: NullablePointer[GPollFD] tag): None =>
//   fun g_source_remove_poll(source: NullablePointer[GSource] tag, fd: NullablePointer[GPollFD] tag): None =>
//   fun g_source_add_child_source(source: NullablePointer[GSource] tag, childsource: NullablePointer[GSource] tag): None =>
//   fun g_source_remove_child_source(source: NullablePointer[GSource] tag, childsource: NullablePointer[GSource] tag): None =>
//   fun g_source_get_current_time(source: NullablePointer[GSource] tag, timeval: NullablePointer[GTimeVal] tag): None =>
//   fun g_source_get_time(source: NullablePointer[GSource] tag): I64 =>
//   fun g_idle_source_new(): NullablePointer[GSource] =>
//   fun g_child_watch_source_new(pid: I32): NullablePointer[GSource] =>
//   fun g_timeout_source_new(interval: U32): NullablePointer[GSource] =>
//   fun g_timeout_source_new_seconds(interval: U32): NullablePointer[GSource] =>
//   fun g_get_current_time(result: NullablePointer[GTimeVal] tag): None =>
//   fun g_get_monotonic_time(): I64 =>
//   fun g_get_real_time(): I64 =>
//   fun g_source_remove(g_tag: U32): I32 =>
//   fun g_source_remove_by_user_data(userdata: Pointer[None] tag): I32 =>
//   Original Name: g_source_remove_by_funcs_user_data/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gmain.h:696
//   fun g_source_remove_by_funcs_user_data(funcs: NullablePointer[GSourceFuncs] tag, userdata: Pointer[None] tag): I32 =>
//   fun g_clear_handle_id(tagptr: Pointer[U32] tag, clearfunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_timeout_add_full(priority: I32, interval: U32, function: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag, notify: NullablePointer[FUNCTIONTYPE] tag): U32 =>
//   fun g_timeout_add(interval: U32, function: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag): U32 =>
//   fun g_timeout_add_seconds_full(priority: I32, interval: U32, function: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag, notify: NullablePointer[FUNCTIONTYPE] tag): U32 =>
//     @g_timeout_add_seconds_full(priority, interval, function, data, notify)
//   fun g_timeout_add_seconds(interval: U32, function: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag): U32 =>
//     @g_timeout_add_seconds(interval, function, data)
//   fun g_child_watch_add_full(priority: I32, pid: I32, function: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag, notify: NullablePointer[FUNCTIONTYPE] tag): U32 =>
//     @g_child_watch_add_full(priority, pid, function, data, notify)
//   fun g_child_watch_add(pid: I32, function: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag): U32 =>
//     @g_child_watch_add(pid, function, data)
//   fun g_idle_add(function: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag): U32 =>
//     @g_idle_add(function, data)
//   fun g_idle_add_full(priority: I32, function: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag, notify: NullablePointer[FUNCTIONTYPE] tag): U32 =>
//     @g_idle_add_full(priority, function, data, notify)
//   fun g_idle_remove_by_data(data: Pointer[None] tag): I32 =>
//   fun g_main_context_invoke_full(context: NullablePointer[GMainContext] tag, priority: I32, function: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag, notify: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_main_context_invoke_full(context, priority, function, data, notify)
//   fun g_main_context_invoke(context: NullablePointer[GMainContext] tag, function: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag): None =>
//     @g_main_context_invoke(context, function, data)
//   fun g_unicode_script_to_iso15924(script: I32): U32 =>
//   fun g_unicode_script_from_iso15924(iso15924: U32): I32 =>
//   fun g_unichar_isalnum(c: U32): I32 =>
//   fun g_unichar_isalpha(c: U32): I32 =>
//   fun g_unichar_iscntrl(c: U32): I32 =>
//   fun g_unichar_isdigit(c: U32): I32 =>
//   fun g_unichar_isgraph(c: U32): I32 =>
//   fun g_unichar_islower(c: U32): I32 =>
//   fun g_unichar_isprint(c: U32): I32 =>
//   fun g_unichar_ispunct(c: U32): I32 =>
//   fun g_unichar_isspace(c: U32): I32 =>
//   fun g_unichar_isupper(c: U32): I32 =>
//   fun g_unichar_isxdigit(c: U32): I32 =>
//   fun g_unichar_istitle(c: U32): I32 =>
//   fun g_unichar_isdefined(c: U32): I32 =>
//   fun g_unichar_iswide(c: U32): I32 =>
//   fun g_unichar_iswide_cjk(c: U32): I32 =>
//   fun g_unichar_iszerowidth(c: U32): I32 =>
//   fun g_unichar_ismark(c: U32): I32 =>
//   fun g_unichar_toupper(c: U32): U32 =>
//   fun g_unichar_tolower(c: U32): U32 =>
//   fun g_unichar_totitle(c: U32): U32 =>
//   fun g_unichar_digit_value(c: U32): I32 =>
//   fun g_unichar_xdigit_value(c: U32): I32 =>
//   fun g_unichar_type(c: U32): I32 =>
//   fun g_unichar_break_type(c: U32): I32 =>
//   fun g_unichar_combining_class(uc: U32): I32 =>
//   fun g_unichar_get_mirror_char(ch: U32, mirroredch: Pointer[U32] tag): I32 =>
//   fun g_unichar_get_script(ch: U32): I32 =>
//   fun g_unichar_validate(ch: U32): I32 =>
//   fun g_unichar_compose(a: U32, b: U32, ch: Pointer[U32] tag): I32 =>
//   fun g_unichar_decompose(ch: U32, a: Pointer[U32] tag, b: Pointer[U32] tag): I32 =>
//   fun g_unichar_fully_decompose(ch: U32, compat: I32, result: Pointer[U32] tag, resultlen: U64): U64 =>
//   fun g_unicode_canonical_ordering(string: Pointer[U32] tag, len: U64): None =>
//   fun g_unicode_canonical_decomposition(ch: U32, resultlen: Pointer[U64] tag): Pointer[U32] =>
//   fun g_utf8_get_char(p: Pointer[U8] tag): U32 =>
//   fun g_utf8_get_char_validated(p: Pointer[U8] tag, maxlen: I64): U32 =>
//   fun g_utf8_offset_to_pointer(str: Pointer[U8] tag, offset: I64): Pointer[U8] =>
//   fun g_utf8_pointer_to_offset(str: Pointer[U8] tag, pos: Pointer[U8] tag): I64 =>
//   fun g_utf8_prev_char(p: Pointer[U8] tag): Pointer[U8] =>
//   fun g_utf8_find_next_char(p: Pointer[U8] tag, g_end: Pointer[U8] tag): Pointer[U8] =>
//   fun g_utf8_find_prev_char(str: Pointer[U8] tag, p: Pointer[U8] tag): Pointer[U8] =>
//   fun g_utf8_strlen(p: Pointer[U8] tag, max: I64): I64 =>
//   fun g_utf8_substring(str: Pointer[U8] tag, startpos: I64, endpos: I64): Pointer[U8] =>
//   fun g_utf8_strncpy(dest: Pointer[U8] tag, src: Pointer[U8] tag, n: U64): Pointer[U8] =>
//   fun g_utf8_strchr(p: Pointer[U8] tag, len: I64, c: U32): Pointer[U8] =>
//   fun g_utf8_strrchr(p: Pointer[U8] tag, len: I64, c: U32): Pointer[U8] =>
//   fun g_utf8_strreverse(str: Pointer[U8] tag, len: I64): Pointer[U8] =>
//   fun g_utf8_to_utf16(str: Pointer[U8] tag, len: I64, itemsread: Pointer[I64] tag, itemswritten: Pointer[I64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U16] =>
//   fun g_utf8_to_ucs4(str: Pointer[U8] tag, len: I64, itemsread: Pointer[I64] tag, itemswritten: Pointer[I64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U32] =>
//   fun g_utf8_to_ucs4_fast(str: Pointer[U8] tag, len: I64, itemswritten: Pointer[I64] tag): Pointer[U32] =>
//   fun g_utf16_to_ucs4(str: Pointer[U16] tag, len: I64, itemsread: Pointer[I64] tag, itemswritten: Pointer[I64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U32] =>
//   fun g_utf16_to_utf8(str: Pointer[U16] tag, len: I64, itemsread: Pointer[I64] tag, itemswritten: Pointer[I64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_ucs4_to_utf16(str: Pointer[U32] tag, len: I64, itemsread: Pointer[I64] tag, itemswritten: Pointer[I64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U16] =>
//   fun g_ucs4_to_utf8(str: Pointer[U32] tag, len: I64, itemsread: Pointer[I64] tag, itemswritten: Pointer[I64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_unichar_to_utf8(c: U32, outbuf: Pointer[U8] tag): I32 =>
//   fun g_utf8_validate(str: Pointer[U8] tag, maxlen: I64, g_end: NullablePointer[Pointer[U8]] tag): I32 =>
//   fun g_utf8_validate_len(str: Pointer[U8] tag, maxlen: U64, g_end: NullablePointer[Pointer[U8]] tag): I32 =>
//   fun g_utf8_strup(str: Pointer[U8] tag, len: I64): Pointer[U8] =>
//   fun g_utf8_strdown(str: Pointer[U8] tag, len: I64): Pointer[U8] =>
//   fun g_utf8_casefold(str: Pointer[U8] tag, len: I64): Pointer[U8] =>
//   fun g_utf8_normalize(str: Pointer[U8] tag, len: I64, mode: I32): Pointer[U8] =>
//   fun g_utf8_collate(str1: Pointer[U8] tag, str2: Pointer[U8] tag): I32 =>
//   fun g_utf8_collate_key(str: Pointer[U8] tag, len: I64): Pointer[U8] =>
//   fun g_utf8_collate_key_for_filename(str: Pointer[U8] tag, len: I64): Pointer[U8] =>
//   fun g_utf8_make_valid(str: Pointer[U8] tag, len: I64): Pointer[U8] =>
//   fun g_string_new(init: Pointer[U8] tag): NullablePointer[GString] =>
//   fun g_string_new_len(init: Pointer[U8] tag, len: I64): NullablePointer[GString] =>
//   fun g_string_sized_new(dflsize: U64): NullablePointer[GString] =>
//   fun g_string_free(string: NullablePointer[GString] tag, freesegment: I32): Pointer[U8] =>
//   fun g_string_free_to_bytes(string: NullablePointer[GString] tag): NullablePointer[GBytes] =>
//   fun g_string_equal(v: NullablePointer[GString] tag, v2: NullablePointer[GString] tag): I32 =>
//   fun g_string_hash(str: NullablePointer[GString] tag): U32 =>
//   fun g_string_assign(string: NullablePointer[GString] tag, rval: Pointer[U8] tag): NullablePointer[GString] =>
//   fun g_string_truncate(string: NullablePointer[GString] tag, len: U64): NullablePointer[GString] =>
//   fun g_string_set_size(string: NullablePointer[GString] tag, len: U64): NullablePointer[GString] =>
//   fun g_string_insert_len(string: NullablePointer[GString] tag, pos: I64, g_val: Pointer[U8] tag, len: I64): NullablePointer[GString] =>
//   fun g_string_append(string: NullablePointer[GString] tag, g_val: Pointer[U8] tag): NullablePointer[GString] =>
//   fun g_string_append_len(string: NullablePointer[GString] tag, g_val: Pointer[U8] tag, len: I64): NullablePointer[GString] =>
//   fun g_string_append_c(string: NullablePointer[GString] tag, c: U8): NullablePointer[GString] =>
//   fun g_string_append_unichar(string: NullablePointer[GString] tag, wc: U32): NullablePointer[GString] =>
//   fun g_string_prepend(string: NullablePointer[GString] tag, g_val: Pointer[U8] tag): NullablePointer[GString] =>
//   fun g_string_prepend_c(string: NullablePointer[GString] tag, c: U8): NullablePointer[GString] =>
//   fun g_string_prepend_unichar(string: NullablePointer[GString] tag, wc: U32): NullablePointer[GString] =>
//   fun g_string_prepend_len(string: NullablePointer[GString] tag, g_val: Pointer[U8] tag, len: I64): NullablePointer[GString] =>
//   fun g_string_insert(string: NullablePointer[GString] tag, pos: I64, g_val: Pointer[U8] tag): NullablePointer[GString] =>
//   fun g_string_insert_c(string: NullablePointer[GString] tag, pos: I64, c: U8): NullablePointer[GString] =>
//   fun g_string_insert_unichar(string: NullablePointer[GString] tag, pos: I64, wc: U32): NullablePointer[GString] =>
//   fun g_string_overwrite(string: NullablePointer[GString] tag, pos: U64, g_val: Pointer[U8] tag): NullablePointer[GString] =>
//   fun g_string_overwrite_len(string: NullablePointer[GString] tag, pos: U64, g_val: Pointer[U8] tag, len: I64): NullablePointer[GString] =>
//   fun g_string_erase(string: NullablePointer[GString] tag, pos: I64, len: I64): NullablePointer[GString] =>
//   fun g_string_replace(string: NullablePointer[GString] tag, find: Pointer[U8] tag, replace: Pointer[U8] tag, limit: U32): U32 =>
//   fun g_string_ascii_down(string: NullablePointer[GString] tag): NullablePointer[GString] =>
//   fun g_string_ascii_up(string: NullablePointer[GString] tag): NullablePointer[GString] =>
//   fun g_string_vprintf(string: NullablePointer[GString] tag, format: Pointer[U8] tag, args: NullablePointer[Valisttag] tag): None =>
// /*  fun g_string_printf(string: NullablePointer[GString] tag, format: Pointer[U8] tag, ...): None =>
//   fun g_string_append_vprintf(string: NullablePointer[GString] tag, format: Pointer[U8] tag, args: NullablePointer[Valisttag] tag): None =>
// /*  fun g_string_append_printf(string: NullablePointer[GString] tag, format: Pointer[U8] tag, ...): None =>
//   fun g_string_append_uri_escaped(string: NullablePointer[GString] tag, unescaped: Pointer[U8] tag, reservedcharsallowed: Pointer[U8] tag, allowutf8: I32): NullablePointer[GString] =>
//   fun g_string_append_c_inline(gstring: NullablePointer[GString] tag, c: U8): NullablePointer[GString] =>
//   fun g_string_down(string: NullablePointer[GString] tag): NullablePointer[GString] =>
//   fun g_string_up(string: NullablePointer[GString] tag): NullablePointer[GString] =>
//   fun g_io_channel_init(channel: NullablePointer[GIOChannel] tag): None =>
//   fun g_io_channel_ref(channel: NullablePointer[GIOChannel] tag): NullablePointer[GIOChannel] =>
//   fun g_io_channel_unref(channel: NullablePointer[GIOChannel] tag): None =>
//   fun g_io_channel_read(channel: NullablePointer[GIOChannel] tag, buf: Pointer[U8] tag, count: U64, bytesread: Pointer[U64] tag): I32 =>
//   fun g_io_channel_write(channel: NullablePointer[GIOChannel] tag, buf: Pointer[U8] tag, count: U64, byteswritten: Pointer[U64] tag): I32 =>
//   fun g_io_channel_seek(channel: NullablePointer[GIOChannel] tag, offset: I64, g_type: I32): I32 =>
//   fun g_io_channel_close(channel: NullablePointer[GIOChannel] tag): None =>
//   fun g_io_channel_shutdown(channel: NullablePointer[GIOChannel] tag, flush: I32, err: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_io_add_watch_full(channel: NullablePointer[GIOChannel] tag, priority: I32, condition: I32, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, notify: NullablePointer[FUNCTIONTYPE] tag): U32 =>
//     @g_io_add_watch_full(channel, priority, condition, func, userdata, notify)
//   fun g_io_create_watch(channel: NullablePointer[GIOChannel] tag, condition: I32): NullablePointer[GSource] =>
//   fun g_io_add_watch(channel: NullablePointer[GIOChannel] tag, condition: I32, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): U32 =>
//     @g_io_add_watch(channel, condition, func, userdata)
//   fun g_io_channel_set_buffer_size(channel: NullablePointer[GIOChannel] tag, size: U64): None =>
//   fun g_io_channel_get_buffer_size(channel: NullablePointer[GIOChannel] tag): U64 =>
//   fun g_io_channel_get_buffer_condition(channel: NullablePointer[GIOChannel] tag): I32 =>
//   fun g_io_channel_set_flags(channel: NullablePointer[GIOChannel] tag, flags: I32, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_io_channel_get_flags(channel: NullablePointer[GIOChannel] tag): I32 =>
//   fun g_io_channel_set_line_term(channel: NullablePointer[GIOChannel] tag, lineterm: Pointer[U8] tag, length: I32): None =>
//   fun g_io_channel_get_line_term(channel: NullablePointer[GIOChannel] tag, length: Pointer[I32] tag): Pointer[U8] =>
//   fun g_io_channel_set_buffered(channel: NullablePointer[GIOChannel] tag, buffered: I32): None =>
//   fun g_io_channel_get_buffered(channel: NullablePointer[GIOChannel] tag): I32 =>
//   fun g_io_channel_set_encoding(channel: NullablePointer[GIOChannel] tag, encoding: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_io_channel_get_encoding(channel: NullablePointer[GIOChannel] tag): Pointer[U8] =>
//   fun g_io_channel_set_close_on_unref(channel: NullablePointer[GIOChannel] tag, doclose: I32): None =>
//   fun g_io_channel_get_close_on_unref(channel: NullablePointer[GIOChannel] tag): I32 =>
//   fun g_io_channel_flush(channel: NullablePointer[GIOChannel] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_io_channel_read_line(channel: NullablePointer[GIOChannel] tag, strreturn: NullablePointer[Pointer[U8]] tag, length: Pointer[U64] tag, terminatorpos: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_io_channel_read_line_string(channel: NullablePointer[GIOChannel] tag, buffer: NullablePointer[GString] tag, terminatorpos: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_io_channel_read_to_end(channel: NullablePointer[GIOChannel] tag, strreturn: NullablePointer[Pointer[U8]] tag, length: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_io_channel_read_chars(channel: NullablePointer[GIOChannel] tag, buf: Pointer[U8] tag, count: U64, bytesread: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_io_channel_read_unichar(channel: NullablePointer[GIOChannel] tag, thechar: Pointer[U32] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_io_channel_write_chars(channel: NullablePointer[GIOChannel] tag, buf: Pointer[U8] tag, count: I64, byteswritten: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_io_channel_write_unichar(channel: NullablePointer[GIOChannel] tag, thechar: U32, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_io_channel_seek_position(channel: NullablePointer[GIOChannel] tag, offset: I64, g_type: I32, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_io_channel_new_file(filename: Pointer[U8] tag, mode: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GIOChannel] =>
//   fun g_io_channel_error_quark(): U32 =>
//   fun g_io_channel_error_from_errno(en: I32): I32 =>
//   fun g_io_channel_unix_new(fd: I32): NullablePointer[GIOChannel] =>
//   fun g_io_channel_unix_get_fd(channel: NullablePointer[GIOChannel] tag): I32 =>
//   fun g_key_file_error_quark(): U32 =>
//   fun g_key_file_new(): NullablePointer[GKeyFile] =>
//   fun g_key_file_ref(keyfile: NullablePointer[GKeyFile] tag): NullablePointer[GKeyFile] =>
//   fun g_key_file_unref(keyfile: NullablePointer[GKeyFile] tag): None =>
//   fun g_key_file_free(keyfile: NullablePointer[GKeyFile] tag): None =>
//   fun g_key_file_set_list_separator(keyfile: NullablePointer[GKeyFile] tag, separator: U8): None =>
//   fun g_key_file_load_from_file(keyfile: NullablePointer[GKeyFile] tag, file: Pointer[U8] tag, flags: I32, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_key_file_load_from_data(keyfile: NullablePointer[GKeyFile] tag, data: Pointer[U8] tag, length: U64, flags: I32, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_key_file_load_from_bytes(keyfile: NullablePointer[GKeyFile] tag, bytes: NullablePointer[GBytes] tag, flags: I32, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_key_file_load_from_dirs(keyfile: NullablePointer[GKeyFile] tag, file: Pointer[U8] tag, searchdirs: NullablePointer[Pointer[U8]] tag, fullpath: NullablePointer[Pointer[U8]] tag, flags: I32, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_key_file_load_from_data_dirs(keyfile: NullablePointer[GKeyFile] tag, file: Pointer[U8] tag, fullpath: NullablePointer[Pointer[U8]] tag, flags: I32, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_key_file_to_data(keyfile: NullablePointer[GKeyFile] tag, length: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_key_file_save_to_file(keyfile: NullablePointer[GKeyFile] tag, filename: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_key_file_get_start_group(keyfile: NullablePointer[GKeyFile] tag): Pointer[U8] =>
//   fun g_key_file_get_groups(keyfile: NullablePointer[GKeyFile] tag, length: Pointer[U64] tag): NullablePointer[Pointer[U8]] =>
//   fun g_key_file_get_keys(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, length: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[Pointer[U8]] =>
//   fun g_key_file_has_group(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag): I32 =>
//   fun g_key_file_has_key(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_key_file_get_value(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_key_file_set_value(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, value: Pointer[U8] tag): None =>
//   fun g_key_file_get_string(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_key_file_set_string(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, string: Pointer[U8] tag): None =>
//   fun g_key_file_get_locale_string(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, locale: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_key_file_get_locale_for_key(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, locale: Pointer[U8] tag): Pointer[U8] =>
//   fun g_key_file_set_locale_string(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, locale: Pointer[U8] tag, string: Pointer[U8] tag): None =>
//   fun g_key_file_get_boolean(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_key_file_set_boolean(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, value: I32): None =>
//   fun g_key_file_get_integer(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_key_file_set_integer(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, value: I32): None =>
//   fun g_key_file_get_int64(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_key_file_set_int64(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, value: I64): None =>
//   fun g_key_file_get_uint64(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): U64 =>
//   fun g_key_file_set_uint64(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, value: U64): None =>
//   fun g_key_file_get_double(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): F64 =>
//   fun g_key_file_set_double(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, value: F64): None =>
//   fun g_key_file_get_string_list(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, length: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[Pointer[U8]] =>
//   fun g_key_file_set_string_list(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, list: NullablePointer[Pointer[U8]] tag, length: U64): None =>
//   fun g_key_file_get_locale_string_list(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, locale: Pointer[U8] tag, length: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[Pointer[U8]] =>
//   fun g_key_file_set_locale_string_list(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, locale: Pointer[U8] tag, list: NullablePointer[Pointer[U8]] tag, length: U64): None =>
//   fun g_key_file_get_boolean_list(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, length: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[I32] =>
//   fun g_key_file_set_boolean_list(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, list: Pointer[I32] tag, length: U64): None =>
//   fun g_key_file_get_integer_list(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, length: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[I32] =>
//   fun g_key_file_set_double_list(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, list: Pointer[F64] tag, length: U64): None =>
//   fun g_key_file_get_double_list(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, length: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[F64] =>
//   fun g_key_file_set_integer_list(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, list: Pointer[I32] tag, length: U64): None =>
//   fun g_key_file_set_comment(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, comment: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_key_file_get_comment(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_key_file_remove_comment(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_key_file_remove_key(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, key: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_key_file_remove_group(keyfile: NullablePointer[GKeyFile] tag, groupname: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_mapped_file_new(filename: Pointer[U8] tag, writable: I32, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GMappedFile] =>
//   fun g_mapped_file_new_from_fd(fd: I32, writable: I32, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GMappedFile] =>
//   fun g_mapped_file_get_length(file: NullablePointer[GMappedFile] tag): U64 =>
//   fun g_mapped_file_get_contents(file: NullablePointer[GMappedFile] tag): Pointer[U8] =>
//   fun g_mapped_file_get_bytes(file: NullablePointer[GMappedFile] tag): NullablePointer[GBytes] =>
//   fun g_mapped_file_ref(file: NullablePointer[GMappedFile] tag): NullablePointer[GMappedFile] =>
//   fun g_mapped_file_unref(file: NullablePointer[GMappedFile] tag): None =>
//   fun g_mapped_file_free(file: NullablePointer[GMappedFile] tag): None =>
//   fun g_markup_error_quark(): U32 =>
//   fun g_markup_parse_context_new(parser: NullablePointer[GMarkupParser] tag, flags: I32, userdata: Pointer[None] tag, userdatadnotify: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[GMarkupParseContext] =>
//   fun g_markup_parse_context_ref(context: NullablePointer[GMarkupParseContext] tag): NullablePointer[GMarkupParseContext] =>
//   fun g_markup_parse_context_unref(context: NullablePointer[GMarkupParseContext] tag): None =>
//   fun g_markup_parse_context_free(context: NullablePointer[GMarkupParseContext] tag): None =>
//   fun g_markup_parse_context_parse(context: NullablePointer[GMarkupParseContext] tag, text: Pointer[U8] tag, textlen: I64, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_markup_parse_context_push(context: NullablePointer[GMarkupParseContext] tag, parser: NullablePointer[GMarkupParser] tag, userdata: Pointer[None] tag): None =>
//   fun g_markup_parse_context_pop(context: NullablePointer[GMarkupParseContext] tag): Pointer[None] =>
//   fun g_markup_parse_context_end_parse(context: NullablePointer[GMarkupParseContext] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_markup_parse_context_get_element(context: NullablePointer[GMarkupParseContext] tag): Pointer[U8] =>
//   fun g_markup_parse_context_get_element_stack(context: NullablePointer[GMarkupParseContext] tag): NullablePointer[GSList] =>
//   fun g_markup_parse_context_get_position(context: NullablePointer[GMarkupParseContext] tag, linenumber: Pointer[I32] tag, charnumber: Pointer[I32] tag): None =>
//   fun g_markup_parse_context_get_user_data(context: NullablePointer[GMarkupParseContext] tag): Pointer[None] =>
//   fun g_markup_escape_text(text: Pointer[U8] tag, length: I64): Pointer[U8] =>
// /*  fun g_markup_printf_escaped(format: Pointer[U8] tag, ...): Pointer[U8] =>
//   fun g_markup_vprintf_escaped(format: Pointer[U8] tag, args: NullablePointer[Valisttag] tag): Pointer[U8] =>
// /*  fun g_markup_collect_attributes(elementname: Pointer[U8] tag, attributenames: NullablePointer[Pointer[U8]] tag, attributevalues: NullablePointer[Pointer[U8]] tag, g_error: NullablePointer[NullablePointer[GError]] tag, firsttype: I32, firstattr: Pointer[U8] tag, ...): I32 =>
//   fun g_variant_type_string_is_valid(typestring: Pointer[U8] tag): I32 =>
//   fun g_variant_type_string_scan(string: Pointer[U8] tag, limit: Pointer[U8] tag, endptr: NullablePointer[Pointer[U8]] tag): I32 =>
//   fun g_variant_type_free(g_type: NullablePointer[GVariantType] tag): None =>
//   fun g_variant_type_copy(g_type: NullablePointer[GVariantType] tag): NullablePointer[GVariantType] =>
//   fun g_variant_type_new(typestring: Pointer[U8] tag): NullablePointer[GVariantType] =>
//   fun g_variant_type_get_string_length(g_type: NullablePointer[GVariantType] tag): U64 =>
//   fun g_variant_type_peek_string(g_type: NullablePointer[GVariantType] tag): Pointer[U8] =>
//   fun g_variant_type_dup_string(g_type: NullablePointer[GVariantType] tag): Pointer[U8] =>
//   fun g_variant_type_is_definite(g_type: NullablePointer[GVariantType] tag): I32 =>
//   fun g_variant_type_is_container(g_type: NullablePointer[GVariantType] tag): I32 =>
//   fun g_variant_type_is_basic(g_type: NullablePointer[GVariantType] tag): I32 =>
//   fun g_variant_type_is_maybe(g_type: NullablePointer[GVariantType] tag): I32 =>
//   fun g_variant_type_is_array(g_type: NullablePointer[GVariantType] tag): I32 =>
//   fun g_variant_type_is_tuple(g_type: NullablePointer[GVariantType] tag): I32 =>
//   fun g_variant_type_is_dict_entry(g_type: NullablePointer[GVariantType] tag): I32 =>
//   fun g_variant_type_is_variant(g_type: NullablePointer[GVariantType] tag): I32 =>
//   fun g_variant_type_hash(g_type: Pointer[None] tag): U32 =>
//   fun g_variant_type_equal(type1: Pointer[None] tag, type2: Pointer[None] tag): I32 =>
//   fun g_variant_type_is_subtype_of(g_type: NullablePointer[GVariantType] tag, supertype: NullablePointer[GVariantType] tag): I32 =>
//   fun g_variant_type_element(g_type: NullablePointer[GVariantType] tag): NullablePointer[GVariantType] =>
//   fun g_variant_type_first(g_type: NullablePointer[GVariantType] tag): NullablePointer[GVariantType] =>
//   fun g_variant_type_next(g_type: NullablePointer[GVariantType] tag): NullablePointer[GVariantType] =>
//   fun g_variant_type_n_items(g_type: NullablePointer[GVariantType] tag): U64 =>
//   fun g_variant_type_key(g_type: NullablePointer[GVariantType] tag): NullablePointer[GVariantType] =>
//   fun g_variant_type_value(g_type: NullablePointer[GVariantType] tag): NullablePointer[GVariantType] =>
//   fun g_variant_type_new_array(element: NullablePointer[GVariantType] tag): NullablePointer[GVariantType] =>
//   fun g_variant_type_new_maybe(element: NullablePointer[GVariantType] tag): NullablePointer[GVariantType] =>
//   fun g_variant_type_new_tuple(items: NullablePointer[NullablePointer[GVariantType]] tag, length: I32): NullablePointer[GVariantType] =>
//   fun g_variant_type_new_dict_entry(key: NullablePointer[GVariantType] tag, value: NullablePointer[GVariantType] tag): NullablePointer[GVariantType] =>
//   fun g_variant_type_checked_(parg0: Pointer[U8] tag): NullablePointer[GVariantType] =>
//   fun g_variant_type_string_get_depth_(typestring: Pointer[U8] tag): U64 =>
//   fun g_variant_unref(value: NullablePointer[GVariant] tag): None =>
//   fun g_variant_ref(value: NullablePointer[GVariant] tag): NullablePointer[GVariant] =>
//   fun g_variant_ref_sink(value: NullablePointer[GVariant] tag): NullablePointer[GVariant] =>
//   fun g_variant_is_floating(value: NullablePointer[GVariant] tag): I32 =>
//   fun g_variant_take_ref(value: NullablePointer[GVariant] tag): NullablePointer[GVariant] =>
//   fun g_variant_get_type(value: NullablePointer[GVariant] tag): NullablePointer[GVariantType] =>
//   fun g_variant_get_type_string(value: NullablePointer[GVariant] tag): Pointer[U8] =>
//   fun g_variant_is_of_type(value: NullablePointer[GVariant] tag, g_type: NullablePointer[GVariantType] tag): I32 =>
//   fun g_variant_is_container(value: NullablePointer[GVariant] tag): I32 =>
//   fun g_variant_classify(value: NullablePointer[GVariant] tag): I32 =>
//   fun g_variant_new_boolean(value: I32): NullablePointer[GVariant] =>
//   fun g_variant_new_byte(value: U8): NullablePointer[GVariant] =>
//   fun g_variant_new_int16(value: I16): NullablePointer[GVariant] =>
//   fun g_variant_new_uint16(value: U16): NullablePointer[GVariant] =>
//   fun g_variant_new_int32(value: I32): NullablePointer[GVariant] =>
//   fun g_variant_new_uint32(value: U32): NullablePointer[GVariant] =>
//   fun g_variant_new_int64(value: I64): NullablePointer[GVariant] =>
//   fun g_variant_new_uint64(value: U64): NullablePointer[GVariant] =>
//   fun g_variant_new_handle(value: I32): NullablePointer[GVariant] =>
//   fun g_variant_new_double(value: F64): NullablePointer[GVariant] =>
//   fun g_variant_new_string(string: Pointer[U8] tag): NullablePointer[GVariant] =>
//   fun g_variant_new_take_string(string: Pointer[U8] tag): NullablePointer[GVariant] =>
// /*  fun g_variant_new_printf(formatstring: Pointer[U8] tag, ...): NullablePointer[GVariant] =>
//   fun g_variant_new_object_path(objectpath: Pointer[U8] tag): NullablePointer[GVariant] =>
//   fun g_variant_is_object_path(string: Pointer[U8] tag): I32 =>
//   fun g_variant_new_signature(signature: Pointer[U8] tag): NullablePointer[GVariant] =>
//   fun g_variant_is_signature(string: Pointer[U8] tag): I32 =>
//   fun g_variant_new_variant(value: NullablePointer[GVariant] tag): NullablePointer[GVariant] =>
//   fun g_variant_new_strv(strv: NullablePointer[Pointer[U8]] tag, length: I64): NullablePointer[GVariant] =>
//   fun g_variant_new_objv(strv: NullablePointer[Pointer[U8]] tag, length: I64): NullablePointer[GVariant] =>
//   fun g_variant_new_bytestring(string: Pointer[U8] tag): NullablePointer[GVariant] =>
//   fun g_variant_new_bytestring_array(strv: NullablePointer[Pointer[U8]] tag, length: I64): NullablePointer[GVariant] =>
//   fun g_variant_new_fixed_array(elementtype: NullablePointer[GVariantType] tag, elements: Pointer[None] tag, nelements: U64, elementsize: U64): NullablePointer[GVariant] =>
//   fun g_variant_get_boolean(value: NullablePointer[GVariant] tag): I32 =>
//   fun g_variant_get_byte(value: NullablePointer[GVariant] tag): U8 =>
//   fun g_variant_get_int16(value: NullablePointer[GVariant] tag): I16 =>
//   fun g_variant_get_uint16(value: NullablePointer[GVariant] tag): U16 =>
//   fun g_variant_get_int32(value: NullablePointer[GVariant] tag): I32 =>
//   fun g_variant_get_uint32(value: NullablePointer[GVariant] tag): U32 =>
//   fun g_variant_get_int64(value: NullablePointer[GVariant] tag): I64 =>
//   fun g_variant_get_uint64(value: NullablePointer[GVariant] tag): U64 =>
//   fun g_variant_get_handle(value: NullablePointer[GVariant] tag): I32 =>
//   fun g_variant_get_double(value: NullablePointer[GVariant] tag): F64 =>
//   fun g_variant_get_variant(value: NullablePointer[GVariant] tag): NullablePointer[GVariant] =>
//   fun g_variant_get_string(value: NullablePointer[GVariant] tag, length: Pointer[U64] tag): Pointer[U8] =>
//   fun g_variant_dup_string(value: NullablePointer[GVariant] tag, length: Pointer[U64] tag): Pointer[U8] =>
//   fun g_variant_get_strv(value: NullablePointer[GVariant] tag, length: Pointer[U64] tag): NullablePointer[Pointer[U8]] =>
//   fun g_variant_dup_strv(value: NullablePointer[GVariant] tag, length: Pointer[U64] tag): NullablePointer[Pointer[U8]] =>
//   fun g_variant_get_objv(value: NullablePointer[GVariant] tag, length: Pointer[U64] tag): NullablePointer[Pointer[U8]] =>
//   fun g_variant_dup_objv(value: NullablePointer[GVariant] tag, length: Pointer[U64] tag): NullablePointer[Pointer[U8]] =>
//   fun g_variant_get_bytestring(value: NullablePointer[GVariant] tag): Pointer[U8] =>
//   fun g_variant_dup_bytestring(value: NullablePointer[GVariant] tag, length: Pointer[U64] tag): Pointer[U8] =>
//   fun g_variant_get_bytestring_array(value: NullablePointer[GVariant] tag, length: Pointer[U64] tag): NullablePointer[Pointer[U8]] =>
//   fun g_variant_dup_bytestring_array(value: NullablePointer[GVariant] tag, length: Pointer[U64] tag): NullablePointer[Pointer[U8]] =>
//   fun g_variant_new_maybe(childtype: NullablePointer[GVariantType] tag, child: NullablePointer[GVariant] tag): NullablePointer[GVariant] =>
//   fun g_variant_new_array(childtype: NullablePointer[GVariantType] tag, children: NullablePointer[NullablePointer[GVariant]] tag, nchildren: U64): NullablePointer[GVariant] =>
//   fun g_variant_new_tuple(children: NullablePointer[NullablePointer[GVariant]] tag, nchildren: U64): NullablePointer[GVariant] =>
//   fun g_variant_new_dict_entry(key: NullablePointer[GVariant] tag, value: NullablePointer[GVariant] tag): NullablePointer[GVariant] =>
//   fun g_variant_get_maybe(value: NullablePointer[GVariant] tag): NullablePointer[GVariant] =>
//   fun g_variant_n_children(value: NullablePointer[GVariant] tag): U64 =>
// /*  fun g_variant_get_child(value: NullablePointer[GVariant] tag, index: U64, formatstring: Pointer[U8] tag, ...): None =>
//   fun g_variant_get_child_value(value: NullablePointer[GVariant] tag, index: U64): NullablePointer[GVariant] =>
// /*  fun g_variant_lookup(dictionary: NullablePointer[GVariant] tag, key: Pointer[U8] tag, formatstring: Pointer[U8] tag, ...): I32 =>
//   fun g_variant_lookup_value(dictionary: NullablePointer[GVariant] tag, key: Pointer[U8] tag, expectedtype: NullablePointer[GVariantType] tag): NullablePointer[GVariant] =>
//   fun g_variant_get_fixed_array(value: NullablePointer[GVariant] tag, nelements: Pointer[U64] tag, elementsize: U64): Pointer[None] =>
//   fun g_variant_get_size(value: NullablePointer[GVariant] tag): U64 =>
//   fun g_variant_get_data(value: NullablePointer[GVariant] tag): Pointer[None] =>
//   fun g_variant_get_data_as_bytes(value: NullablePointer[GVariant] tag): NullablePointer[GBytes] =>
//   fun g_variant_store(value: NullablePointer[GVariant] tag, data: Pointer[None] tag): None =>
//   fun g_variant_print(value: NullablePointer[GVariant] tag, typeannotate: I32): Pointer[U8] =>
//   fun g_variant_print_string(value: NullablePointer[GVariant] tag, string: NullablePointer[GString] tag, typeannotate: I32): NullablePointer[GString] =>
//   fun g_variant_hash(value: Pointer[None] tag): U32 =>
//   fun g_variant_equal(one: Pointer[None] tag, two: Pointer[None] tag): I32 =>
//   fun g_variant_get_normal_form(value: NullablePointer[GVariant] tag): NullablePointer[GVariant] =>
//   fun g_variant_is_normal_form(value: NullablePointer[GVariant] tag): I32 =>
//   fun g_variant_byteswap(value: NullablePointer[GVariant] tag): NullablePointer[GVariant] =>
//   fun g_variant_new_from_bytes(g_type: NullablePointer[GVariantType] tag, bytes: NullablePointer[GBytes] tag, trusted: I32): NullablePointer[GVariant] =>
//   fun g_variant_new_from_data(g_type: NullablePointer[GVariantType] tag, data: Pointer[None] tag, size: U64, trusted: I32, notify: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): NullablePointer[GVariant] =>
//   fun g_variant_iter_new(value: NullablePointer[GVariant] tag): NullablePointer[GVariantIter] =>
//   fun g_variant_iter_init(iter: NullablePointer[GVariantIter] tag, value: NullablePointer[GVariant] tag): U64 =>
//   fun g_variant_iter_copy(iter: NullablePointer[GVariantIter] tag): NullablePointer[GVariantIter] =>
//   fun g_variant_iter_n_children(iter: NullablePointer[GVariantIter] tag): U64 =>
//   fun g_variant_iter_free(iter: NullablePointer[GVariantIter] tag): None =>
//   fun g_variant_iter_next_value(iter: NullablePointer[GVariantIter] tag): NullablePointer[GVariant] =>
// /*  fun g_variant_iter_next(iter: NullablePointer[GVariantIter] tag, formatstring: Pointer[U8] tag, ...): I32 =>
// /*  fun g_variant_iter_loop(iter: NullablePointer[GVariantIter] tag, formatstring: Pointer[U8] tag, ...): I32 =>
//   fun g_variant_parser_get_error_quark(): U32 =>
//   fun g_variant_parse_error_quark(): U32 =>
//   fun g_variant_builder_new(g_type: NullablePointer[GVariantType] tag): NullablePointer[GVariantBuilder] =>
//   fun g_variant_builder_unref(builder: NullablePointer[GVariantBuilder] tag): None =>
//   fun g_variant_builder_ref(builder: NullablePointer[GVariantBuilder] tag): NullablePointer[GVariantBuilder] =>
//   fun g_variant_builder_init(builder: NullablePointer[GVariantBuilder] tag, g_type: NullablePointer[GVariantType] tag): None =>
//   fun g_variant_builder_end(builder: NullablePointer[GVariantBuilder] tag): NullablePointer[GVariant] =>
//   fun g_variant_builder_clear(builder: NullablePointer[GVariantBuilder] tag): None =>
//   fun g_variant_builder_open(builder: NullablePointer[GVariantBuilder] tag, g_type: NullablePointer[GVariantType] tag): None =>
//   fun g_variant_builder_close(builder: NullablePointer[GVariantBuilder] tag): None =>
//   fun g_variant_builder_add_value(builder: NullablePointer[GVariantBuilder] tag, value: NullablePointer[GVariant] tag): None =>
// /*  fun g_variant_builder_add(builder: NullablePointer[GVariantBuilder] tag, formatstring: Pointer[U8] tag, ...): None =>
// /*  fun g_variant_builder_add_parsed(builder: NullablePointer[GVariantBuilder] tag, format: Pointer[U8] tag, ...): None =>
// /*  fun g_variant_new(formatstring: Pointer[U8] tag, ...): NullablePointer[GVariant] =>
// /*  fun g_variant_get(value: NullablePointer[GVariant] tag, formatstring: Pointer[U8] tag, ...): None =>
//   fun g_variant_new_va(formatstring: Pointer[U8] tag, endptr: NullablePointer[Pointer[U8]] tag, app: NullablePointer[Pointer[Valisttag]] tag): NullablePointer[GVariant] =>
//   fun g_variant_get_va(value: NullablePointer[GVariant] tag, formatstring: Pointer[U8] tag, endptr: NullablePointer[Pointer[U8]] tag, app: NullablePointer[Pointer[Valisttag]] tag): None =>
//   fun g_variant_check_format_string(value: NullablePointer[GVariant] tag, formatstring: Pointer[U8] tag, copyonly: I32): I32 =>
//   fun g_variant_parse(g_type: NullablePointer[GVariantType] tag, text: Pointer[U8] tag, limit: Pointer[U8] tag, endptr: NullablePointer[Pointer[U8]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GVariant] =>
// /*  fun g_variant_new_parsed(format: Pointer[U8] tag, ...): NullablePointer[GVariant] =>
//   fun g_variant_new_parsed_va(format: Pointer[U8] tag, app: NullablePointer[Pointer[Valisttag]] tag): NullablePointer[GVariant] =>
//   fun g_variant_parse_error_print_context(g_error: NullablePointer[GError] tag, sourcestr: Pointer[U8] tag): Pointer[U8] =>
//   fun g_variant_compare(one: Pointer[None] tag, two: Pointer[None] tag): I32 =>
//   fun g_variant_dict_new(fromasv: NullablePointer[GVariant] tag): NullablePointer[GVariantDict] =>
//   fun g_variant_dict_init(dict: NullablePointer[GVariantDict] tag, fromasv: NullablePointer[GVariant] tag): None =>
// /*  fun g_variant_dict_lookup(dict: NullablePointer[GVariantDict] tag, key: Pointer[U8] tag, formatstring: Pointer[U8] tag, ...): I32 =>
//   fun g_variant_dict_lookup_value(dict: NullablePointer[GVariantDict] tag, key: Pointer[U8] tag, expectedtype: NullablePointer[GVariantType] tag): NullablePointer[GVariant] =>
//   fun g_variant_dict_contains(dict: NullablePointer[GVariantDict] tag, key: Pointer[U8] tag): I32 =>
// /*  fun g_variant_dict_insert(dict: NullablePointer[GVariantDict] tag, key: Pointer[U8] tag, formatstring: Pointer[U8] tag, ...): None =>
//   fun g_variant_dict_insert_value(dict: NullablePointer[GVariantDict] tag, key: Pointer[U8] tag, value: NullablePointer[GVariant] tag): None =>
//   fun g_variant_dict_remove(dict: NullablePointer[GVariantDict] tag, key: Pointer[U8] tag): I32 =>
//   fun g_variant_dict_clear(dict: NullablePointer[GVariantDict] tag): None =>
//   fun g_variant_dict_end(dict: NullablePointer[GVariantDict] tag): NullablePointer[GVariant] =>
//   fun g_variant_dict_ref(dict: NullablePointer[GVariantDict] tag): NullablePointer[GVariantDict] =>
//   fun g_variant_dict_unref(dict: NullablePointer[GVariantDict] tag): None =>
//   fun g_printf_string_upper_bound(format: Pointer[U8] tag, args: NullablePointer[Valisttag] tag): U64 =>
//   fun g_log_set_handler(logdomain: Pointer[U8] tag, loglevels: I32, logfunc: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): U32 =>
//     @g_log_set_handler(logdomain, loglevels, logfunc, userdata)
//   fun g_log_set_handler_full(logdomain: Pointer[U8] tag, loglevels: I32, logfunc: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, destroy: NullablePointer[FUNCTIONTYPE] tag): U32 =>
//     @g_log_set_handler_full(logdomain, loglevels, logfunc, userdata, destroy)
//   fun g_log_remove_handler(logdomain: Pointer[U8] tag, handlerid: U32): None =>
//   fun g_log_default_handler(logdomain: Pointer[U8] tag, loglevel: I32, message: Pointer[U8] tag, unuseddata: Pointer[None] tag): None =>
//   fun g_log_set_default_handler(logfunc: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): NullablePointer[FUNCTIONTYPE] =>
//     @g_log_set_default_handler(logfunc, userdata)
// /*  fun g_log(logdomain: Pointer[U8] tag, loglevel: I32, format: Pointer[U8] tag, ...): None =>
//   fun g_logv(logdomain: Pointer[U8] tag, loglevel: I32, format: Pointer[U8] tag, args: NullablePointer[Valisttag] tag): None =>
//   fun g_log_set_fatal_mask(logdomain: Pointer[U8] tag, fatalmask: I32): I32 =>
//   fun g_log_set_always_fatal(fatalmask: I32): I32 =>
// /*  fun g_log_structured(logdomain: Pointer[U8] tag, loglevel: I32, ...): None =>
//   fun g_log_structured_array(loglevel: I32, fields: NullablePointer[GLogField] tag, nfields: U64): None =>
//   fun g_log_variant(logdomain: Pointer[U8] tag, loglevel: I32, fields: NullablePointer[GVariant] tag): None =>
//   Original Name: g_log_set_writer_func/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gmessages.h:214
//   fun g_log_set_writer_func(func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, userdatafree: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_log_set_writer_func(func, userdata, userdatafree)
//   fun g_log_writer_supports_color(outputfd: I32): I32 =>
//   fun g_log_writer_is_journald(outputfd: I32): I32 =>
//   fun g_log_writer_format_fields(loglevel: I32, fields: NullablePointer[GLogField] tag, nfields: U64, usecolor: I32): Pointer[U8] =>
//   fun g_log_writer_journald(loglevel: I32, fields: NullablePointer[GLogField] tag, nfields: U64, userdata: Pointer[None] tag): I32 =>
//   fun g_log_writer_standard_streams(loglevel: I32, fields: NullablePointer[GLogField] tag, nfields: U64, userdata: Pointer[None] tag): I32 =>
//   fun g_log_writer_default(loglevel: I32, fields: NullablePointer[GLogField] tag, nfields: U64, userdata: Pointer[None] tag): I32 =>
//   fun g_log_writer_default_set_use_stderr(usestderr: I32): None =>
//   fun g_log_writer_default_would_drop(loglevel: I32, logdomain: Pointer[U8] tag): I32 =>
//   fun _g_log_fallback_handler(logdomain: Pointer[U8] tag, loglevel: I32, message: Pointer[U8] tag, unuseddata: Pointer[None] tag): None =>
//   fun g_return_if_fail_warning(logdomain: Pointer[U8] tag, prettyfunction: Pointer[U8] tag, expression: Pointer[U8] tag): None =>
//     @g_return_if_fail_warning(logdomain, prettyfunction, expression)
//   fun g_warn_message(domain: Pointer[U8] tag, file: Pointer[U8] tag, line: I32, func: Pointer[U8] tag, warnexpr: Pointer[U8] tag): None =>
//     @g_warn_message(domain, file, line, func, warnexpr)
//   fun g_assert_warning(logdomain: Pointer[U8] tag, file: Pointer[U8] tag, line: I32, prettyfunction: Pointer[U8] tag, expression: Pointer[U8] tag): None =>
//     @g_assert_warning(logdomain, file, line, prettyfunction, expression)
// /*  fun g_log_structured_standard(logdomain: Pointer[U8] tag, loglevel: I32, file: Pointer[U8] tag, line: Pointer[U8] tag, func: Pointer[U8] tag, messageformat: Pointer[U8] tag, ...): None =>
//     @g_log_structured_standard(logdomain, loglevel, file, line, func, messageformat, ...)
// /*  fun g_print(format: Pointer[U8] tag, ...): None =>
//   fun g_set_print_handler(func: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[FUNCTIONTYPE] =>
//     @g_set_print_handler(func)
// /*  fun g_printerr(format: Pointer[U8] tag, ...): None =>
//   fun g_set_printerr_handler(func: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[FUNCTIONTYPE] =>
//     @g_set_printerr_handler(func)
//   fun g_option_error_quark(): U32 =>
//   fun g_option_context_new(parameterstring: Pointer[U8] tag): NullablePointer[GOptionContext] =>
//   fun g_option_context_set_summary(context: NullablePointer[GOptionContext] tag, summary: Pointer[U8] tag): None =>
//   fun g_option_context_get_summary(context: NullablePointer[GOptionContext] tag): Pointer[U8] =>
//   fun g_option_context_set_description(context: NullablePointer[GOptionContext] tag, description: Pointer[U8] tag): None =>
//   fun g_option_context_get_description(context: NullablePointer[GOptionContext] tag): Pointer[U8] =>
//   fun g_option_context_free(context: NullablePointer[GOptionContext] tag): None =>
//   fun g_option_context_set_help_enabled(context: NullablePointer[GOptionContext] tag, helpenabled: I32): None =>
//   fun g_option_context_get_help_enabled(context: NullablePointer[GOptionContext] tag): I32 =>
//   fun g_option_context_set_ignore_unknown_options(context: NullablePointer[GOptionContext] tag, ignoreunknown: I32): None =>
//   fun g_option_context_get_ignore_unknown_options(context: NullablePointer[GOptionContext] tag): I32 =>
//   fun g_option_context_set_strict_posix(context: NullablePointer[GOptionContext] tag, strictposix: I32): None =>
//   fun g_option_context_get_strict_posix(context: NullablePointer[GOptionContext] tag): I32 =>
//   fun g_option_context_add_main_entries(context: NullablePointer[GOptionContext] tag, entries: NullablePointer[GOptionEntry] tag, translationdomain: Pointer[U8] tag): None =>
//   fun g_option_context_parse(context: NullablePointer[GOptionContext] tag, argc: Pointer[I32] tag, argv: NullablePointer[NullablePointer[Pointer[U8]]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_option_context_parse_strv(context: NullablePointer[GOptionContext] tag, arguments: NullablePointer[NullablePointer[Pointer[U8]]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   Original Name: g_option_context_set_translate_func/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/goption.h:334
//   fun g_option_context_set_translate_func(context: NullablePointer[GOptionContext] tag, func: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag, destroynotify: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_option_context_set_translate_func(context, func, data, destroynotify)
//   fun g_option_context_set_translation_domain(context: NullablePointer[GOptionContext] tag, domain: Pointer[U8] tag): None =>
//   fun g_option_context_add_group(context: NullablePointer[GOptionContext] tag, group: NullablePointer[GOptionGroup] tag): None =>
//   fun g_option_context_set_main_group(context: NullablePointer[GOptionContext] tag, group: NullablePointer[GOptionGroup] tag): None =>
//   fun g_option_context_get_main_group(context: NullablePointer[GOptionContext] tag): NullablePointer[GOptionGroup] =>
//   fun g_option_context_get_help(context: NullablePointer[GOptionContext] tag, mainhelp: I32, group: NullablePointer[GOptionGroup] tag): Pointer[U8] =>
//   fun g_option_group_new(name: Pointer[U8] tag, description: Pointer[U8] tag, helpdescription: Pointer[U8] tag, userdata: Pointer[None] tag, destroy: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[GOptionGroup] =>
//   fun g_option_group_set_parse_hooks(group: NullablePointer[GOptionGroup] tag, preparsefunc: NullablePointer[FUNCTIONTYPE] tag, postparsefunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_option_group_set_parse_hooks(group, preparsefunc, postparsefunc)
//   fun g_option_group_set_error_hook(group: NullablePointer[GOptionGroup] tag, errorfunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_option_group_set_error_hook(group, errorfunc)
//   fun g_option_group_free(group: NullablePointer[GOptionGroup] tag): None =>
//   fun g_option_group_ref(group: NullablePointer[GOptionGroup] tag): NullablePointer[GOptionGroup] =>
//   fun g_option_group_unref(group: NullablePointer[GOptionGroup] tag): None =>
//   fun g_option_group_add_entries(group: NullablePointer[GOptionGroup] tag, entries: NullablePointer[GOptionEntry] tag): None =>
//   Original Name: g_option_group_set_translate_func/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/goption.h:378
//   fun g_option_group_set_translate_func(group: NullablePointer[GOptionGroup] tag, func: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag, destroynotify: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_option_group_set_translate_func(group, func, data, destroynotify)
//   fun g_option_group_set_translation_domain(group: NullablePointer[GOptionGroup] tag, domain: Pointer[U8] tag): None =>
//   fun g_pattern_spec_new(pattern: Pointer[U8] tag): NullablePointer[GPatternSpec] =>
//   fun g_pattern_spec_free(pspec: NullablePointer[GPatternSpec] tag): None =>
//   fun g_pattern_spec_equal(pspec1: NullablePointer[GPatternSpec] tag, pspec2: NullablePointer[GPatternSpec] tag): I32 =>
//   fun g_pattern_match(pspec: NullablePointer[GPatternSpec] tag, stringlength: U32, string: Pointer[U8] tag, stringreversed: Pointer[U8] tag): I32 =>
//   fun g_pattern_match_string(pspec: NullablePointer[GPatternSpec] tag, string: Pointer[U8] tag): I32 =>
//   fun g_pattern_match_simple(pattern: Pointer[U8] tag, string: Pointer[U8] tag): I32 =>
//   fun g_spaced_primes_closest(num: U32): U32 =>
//   fun g_qsort_with_data(pbase: Pointer[None] tag, totalelems: I32, size: U64, comparefunc: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//     @g_qsort_with_data(pbase, totalelems, size, comparefunc, userdata)
//   fun g_queue_new(): NullablePointer[GQueue] =>
//   fun g_queue_free(queue: NullablePointer[GQueue] tag): None =>
//   fun g_queue_free_full(queue: NullablePointer[GQueue] tag, freefunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_queue_free_full(queue, freefunc)
//   fun g_queue_init(queue: NullablePointer[GQueue] tag): None =>
//   fun g_queue_clear(queue: NullablePointer[GQueue] tag): None =>
//   fun g_queue_is_empty(queue: NullablePointer[GQueue] tag): I32 =>
//   fun g_queue_clear_full(queue: NullablePointer[GQueue] tag, freefunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_queue_clear_full(queue, freefunc)
//   fun g_queue_get_length(queue: NullablePointer[GQueue] tag): U32 =>
//   fun g_queue_reverse(queue: NullablePointer[GQueue] tag): None =>
//   fun g_queue_copy(queue: NullablePointer[GQueue] tag): NullablePointer[GQueue] =>
//   fun g_queue_foreach(queue: NullablePointer[GQueue] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//     @g_queue_foreach(queue, func, userdata)
//   fun g_queue_find(queue: NullablePointer[GQueue] tag, data: Pointer[None] tag): NullablePointer[GList] =>
//   fun g_queue_find_custom(queue: NullablePointer[GQueue] tag, data: Pointer[None] tag, func: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[GList] =>
//     @g_queue_find_custom(queue, data, func)
//   fun g_queue_sort(queue: NullablePointer[GQueue] tag, comparefunc: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//     @g_queue_sort(queue, comparefunc, userdata)
//   fun g_queue_push_head(queue: NullablePointer[GQueue] tag, data: Pointer[None] tag): None =>
//   fun g_queue_push_tail(queue: NullablePointer[GQueue] tag, data: Pointer[None] tag): None =>
//   fun g_queue_push_nth(queue: NullablePointer[GQueue] tag, data: Pointer[None] tag, n: I32): None =>
//   fun g_queue_pop_head(queue: NullablePointer[GQueue] tag): Pointer[None] =>
//   fun g_queue_pop_tail(queue: NullablePointer[GQueue] tag): Pointer[None] =>
//   fun g_queue_pop_nth(queue: NullablePointer[GQueue] tag, n: U32): Pointer[None] =>
//   fun g_queue_peek_head(queue: NullablePointer[GQueue] tag): Pointer[None] =>
//   fun g_queue_peek_tail(queue: NullablePointer[GQueue] tag): Pointer[None] =>
//   fun g_queue_peek_nth(queue: NullablePointer[GQueue] tag, n: U32): Pointer[None] =>
//   fun g_queue_index(queue: NullablePointer[GQueue] tag, data: Pointer[None] tag): I32 =>
//   fun g_queue_remove(queue: NullablePointer[GQueue] tag, data: Pointer[None] tag): I32 =>
//   fun g_queue_remove_all(queue: NullablePointer[GQueue] tag, data: Pointer[None] tag): U32 =>
//   fun g_queue_insert_before(queue: NullablePointer[GQueue] tag, sibling: NullablePointer[GList] tag, data: Pointer[None] tag): None =>
//   fun g_queue_insert_before_link(queue: NullablePointer[GQueue] tag, sibling: NullablePointer[GList] tag, link: NullablePointer[GList] tag): None =>
//   fun g_queue_insert_after(queue: NullablePointer[GQueue] tag, sibling: NullablePointer[GList] tag, data: Pointer[None] tag): None =>
//   fun g_queue_insert_after_link(queue: NullablePointer[GQueue] tag, sibling: NullablePointer[GList] tag, link: NullablePointer[GList] tag): None =>
//   fun g_queue_insert_sorted(queue: NullablePointer[GQueue] tag, data: Pointer[None] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//     @g_queue_insert_sorted(queue, data, func, userdata)
//   fun g_queue_push_head_link(queue: NullablePointer[GQueue] tag, link: NullablePointer[GList] tag): None =>
//   fun g_queue_push_tail_link(queue: NullablePointer[GQueue] tag, link: NullablePointer[GList] tag): None =>
//   fun g_queue_push_nth_link(queue: NullablePointer[GQueue] tag, n: I32, link: NullablePointer[GList] tag): None =>
//   fun g_queue_pop_head_link(queue: NullablePointer[GQueue] tag): NullablePointer[GList] =>
//   fun g_queue_pop_tail_link(queue: NullablePointer[GQueue] tag): NullablePointer[GList] =>
//   fun g_queue_pop_nth_link(queue: NullablePointer[GQueue] tag, n: U32): NullablePointer[GList] =>
//   fun g_queue_peek_head_link(queue: NullablePointer[GQueue] tag): NullablePointer[GList] =>
//   fun g_queue_peek_tail_link(queue: NullablePointer[GQueue] tag): NullablePointer[GList] =>
//   fun g_queue_peek_nth_link(queue: NullablePointer[GQueue] tag, n: U32): NullablePointer[GList] =>
//   fun g_queue_link_index(queue: NullablePointer[GQueue] tag, link: NullablePointer[GList] tag): I32 =>
//   fun g_queue_unlink(queue: NullablePointer[GQueue] tag, link: NullablePointer[GList] tag): None =>
//   fun g_queue_delete_link(queue: NullablePointer[GQueue] tag, link: NullablePointer[GList] tag): None =>
//   fun g_rand_new_with_seed(seed: U32): NullablePointer[GRand] =>
//   fun g_rand_new_with_seed_array(seed: Pointer[U32] tag, seedlength: U32): NullablePointer[GRand] =>
//   fun g_rand_new(): NullablePointer[GRand] =>
//   fun g_rand_free(rand: NullablePointer[GRand] tag): None =>
//   fun g_rand_copy(rand: NullablePointer[GRand] tag): NullablePointer[GRand] =>
//   fun g_rand_set_seed(rand: NullablePointer[GRand] tag, seed: U32): None =>
//   fun g_rand_set_seed_array(rand: NullablePointer[GRand] tag, seed: Pointer[U32] tag, seedlength: U32): None =>
//   fun g_rand_int(rand: NullablePointer[GRand] tag): U32 =>
//   fun g_rand_int_range(rand: NullablePointer[GRand] tag, begin: I32, g_end: I32): I32 =>
//   fun g_rand_double(rand: NullablePointer[GRand] tag): F64 =>
//   fun g_rand_double_range(rand: NullablePointer[GRand] tag, begin: F64, g_end: F64): F64 =>
//   fun g_random_set_seed(seed: U32): None =>
//   fun g_random_int(): U32 =>
//   fun g_random_int_range(begin: I32, g_end: I32): I32 =>
//   fun g_random_double(): F64 =>
//   fun g_random_double_range(begin: F64, g_end: F64): F64 =>
//   fun g_rc_box_alloc(blocksize: U64): Pointer[None] =>
//   fun g_rc_box_alloc0(blocksize: U64): Pointer[None] =>
//   fun g_rc_box_dup(blocksize: U64, memblock: Pointer[None] tag): Pointer[None] =>
//   fun g_rc_box_acquire(memblock: Pointer[None] tag): Pointer[None] =>
//   fun g_rc_box_release(memblock: Pointer[None] tag): None =>
//   fun g_rc_box_release_full(memblock: Pointer[None] tag, clearfunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_rc_box_release_full(memblock, clearfunc)
//   fun g_rc_box_get_size(memblock: Pointer[None] tag): U64 =>
//   fun g_atomic_rc_box_alloc(blocksize: U64): Pointer[None] =>
//   fun g_atomic_rc_box_alloc0(blocksize: U64): Pointer[None] =>
//   fun g_atomic_rc_box_dup(blocksize: U64, memblock: Pointer[None] tag): Pointer[None] =>
//   fun g_atomic_rc_box_acquire(memblock: Pointer[None] tag): Pointer[None] =>
//   fun g_atomic_rc_box_release(memblock: Pointer[None] tag): None =>
//   fun g_atomic_rc_box_release_full(memblock: Pointer[None] tag, clearfunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_atomic_rc_box_release_full(memblock, clearfunc)
//   fun g_atomic_rc_box_get_size(memblock: Pointer[None] tag): U64 =>
//   fun g_ref_count_init(rc: Pointer[I32] tag): None =>
//   fun g_ref_count_inc(rc: Pointer[I32] tag): None =>
//   fun g_ref_count_dec(rc: Pointer[I32] tag): I32 =>
//   fun g_ref_count_compare(rc: Pointer[I32] tag, g_val: I32): I32 =>
//   fun g_atomic_ref_count_init(arc: Pointer[I32] tag): None =>
//   fun g_atomic_ref_count_inc(arc: Pointer[I32] tag): None =>
//   fun g_atomic_ref_count_dec(arc: Pointer[I32] tag): I32 =>
//   fun g_atomic_ref_count_compare(arc: Pointer[I32] tag, g_val: I32): I32 =>
//   fun g_ref_string_new(str: Pointer[U8] tag): Pointer[U8] =>
//   fun g_ref_string_new_len(str: Pointer[U8] tag, len: I64): Pointer[U8] =>
//   fun g_ref_string_new_intern(str: Pointer[U8] tag): Pointer[U8] =>
//   fun g_ref_string_acquire(str: Pointer[U8] tag): Pointer[U8] =>
//   fun g_ref_string_release(str: Pointer[U8] tag): None =>
//   fun g_ref_string_length(str: Pointer[U8] tag): U64 =>
//   fun g_regex_error_quark(): U32 =>
//   fun g_regex_new(pattern: Pointer[U8] tag, compileoptions: I32, matchoptions: I32, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GRegex] =>
//   fun g_regex_ref(regex: NullablePointer[GRegex] tag): NullablePointer[GRegex] =>
//   fun g_regex_unref(regex: NullablePointer[GRegex] tag): None =>
//   fun g_regex_get_pattern(regex: NullablePointer[GRegex] tag): Pointer[U8] =>
//   fun g_regex_get_max_backref(regex: NullablePointer[GRegex] tag): I32 =>
//   fun g_regex_get_capture_count(regex: NullablePointer[GRegex] tag): I32 =>
//   fun g_regex_get_has_cr_or_lf(regex: NullablePointer[GRegex] tag): I32 =>
//   fun g_regex_get_max_lookbehind(regex: NullablePointer[GRegex] tag): I32 =>
//   fun g_regex_get_string_number(regex: NullablePointer[GRegex] tag, name: Pointer[U8] tag): I32 =>
//   fun g_regex_escape_string(string: Pointer[U8] tag, length: I32): Pointer[U8] =>
//   fun g_regex_escape_nul(string: Pointer[U8] tag, length: I32): Pointer[U8] =>
//   fun g_regex_get_compile_flags(regex: NullablePointer[GRegex] tag): I32 =>
//   fun g_regex_get_match_flags(regex: NullablePointer[GRegex] tag): I32 =>
//   fun g_regex_match_simple(pattern: Pointer[U8] tag, string: Pointer[U8] tag, compileoptions: I32, matchoptions: I32): I32 =>
//   fun g_regex_match(regex: NullablePointer[GRegex] tag, string: Pointer[U8] tag, matchoptions: I32, matchinfo: NullablePointer[NullablePointer[GMatchInfo]] tag): I32 =>
//   fun g_regex_match_full(regex: NullablePointer[GRegex] tag, string: Pointer[U8] tag, stringlen: I64, startposition: I32, matchoptions: I32, matchinfo: NullablePointer[NullablePointer[GMatchInfo]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_regex_match_all(regex: NullablePointer[GRegex] tag, string: Pointer[U8] tag, matchoptions: I32, matchinfo: NullablePointer[NullablePointer[GMatchInfo]] tag): I32 =>
//   fun g_regex_match_all_full(regex: NullablePointer[GRegex] tag, string: Pointer[U8] tag, stringlen: I64, startposition: I32, matchoptions: I32, matchinfo: NullablePointer[NullablePointer[GMatchInfo]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_regex_split_simple(pattern: Pointer[U8] tag, string: Pointer[U8] tag, compileoptions: I32, matchoptions: I32): NullablePointer[Pointer[U8]] =>
//   fun g_regex_split(regex: NullablePointer[GRegex] tag, string: Pointer[U8] tag, matchoptions: I32): NullablePointer[Pointer[U8]] =>
//   fun g_regex_split_full(regex: NullablePointer[GRegex] tag, string: Pointer[U8] tag, stringlen: I64, startposition: I32, matchoptions: I32, maxtokens: I32, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[Pointer[U8]] =>
//   fun g_regex_replace(regex: NullablePointer[GRegex] tag, string: Pointer[U8] tag, stringlen: I64, startposition: I32, replacement: Pointer[U8] tag, matchoptions: I32, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_regex_replace_literal(regex: NullablePointer[GRegex] tag, string: Pointer[U8] tag, stringlen: I64, startposition: I32, replacement: Pointer[U8] tag, matchoptions: I32, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_regex_replace_eval(regex: NullablePointer[GRegex] tag, string: Pointer[U8] tag, stringlen: I64, startposition: I32, matchoptions: I32, eval: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_regex_check_replacement(replacement: Pointer[U8] tag, hasreferences: Pointer[I32] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_match_info_get_regex(matchinfo: NullablePointer[GMatchInfo] tag): NullablePointer[GRegex] =>
//   fun g_match_info_get_string(matchinfo: NullablePointer[GMatchInfo] tag): Pointer[U8] =>
//   fun g_match_info_ref(matchinfo: NullablePointer[GMatchInfo] tag): NullablePointer[GMatchInfo] =>
//   fun g_match_info_unref(matchinfo: NullablePointer[GMatchInfo] tag): None =>
//   fun g_match_info_free(matchinfo: NullablePointer[GMatchInfo] tag): None =>
//   fun g_match_info_next(matchinfo: NullablePointer[GMatchInfo] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_match_info_matches(matchinfo: NullablePointer[GMatchInfo] tag): I32 =>
//   fun g_match_info_get_match_count(matchinfo: NullablePointer[GMatchInfo] tag): I32 =>
//   fun g_match_info_is_partial_match(matchinfo: NullablePointer[GMatchInfo] tag): I32 =>
//   fun g_match_info_expand_references(matchinfo: NullablePointer[GMatchInfo] tag, stringtoexpand: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_match_info_fetch(matchinfo: NullablePointer[GMatchInfo] tag, matchnum: I32): Pointer[U8] =>
//   fun g_match_info_fetch_pos(matchinfo: NullablePointer[GMatchInfo] tag, matchnum: I32, startpos: Pointer[I32] tag, endpos: Pointer[I32] tag): I32 =>
//   fun g_match_info_fetch_named(matchinfo: NullablePointer[GMatchInfo] tag, name: Pointer[U8] tag): Pointer[U8] =>
//   fun g_match_info_fetch_named_pos(matchinfo: NullablePointer[GMatchInfo] tag, name: Pointer[U8] tag, startpos: Pointer[I32] tag, endpos: Pointer[I32] tag): I32 =>
//   fun g_match_info_fetch_all(matchinfo: NullablePointer[GMatchInfo] tag): NullablePointer[Pointer[U8]] =>
//   fun g_scanner_new(configtempl: NullablePointer[GScannerConfig] tag): NullablePointer[GScanner] =>
//   fun g_scanner_destroy(scanner: NullablePointer[GScanner] tag): None =>
//   fun g_scanner_input_file(scanner: NullablePointer[GScanner] tag, inputfd: I32): None =>
//   fun g_scanner_sync_file_offset(scanner: NullablePointer[GScanner] tag): None =>
//   fun g_scanner_input_text(scanner: NullablePointer[GScanner] tag, text: Pointer[U8] tag, textlen: U32): None =>
//   fun g_scanner_get_next_token(scanner: NullablePointer[GScanner] tag): I32 =>
//   fun g_scanner_peek_next_token(scanner: NullablePointer[GScanner] tag): I32 =>
//   fun g_scanner_cur_token(scanner: NullablePointer[GScanner] tag): I32 =>
//   fun g_scanner_cur_value(scanner: NullablePointer[GScanner] tag): None =>
//   fun g_scanner_cur_line(scanner: NullablePointer[GScanner] tag): U32 =>
//   fun g_scanner_cur_position(scanner: NullablePointer[GScanner] tag): U32 =>
//   fun g_scanner_eof(scanner: NullablePointer[GScanner] tag): I32 =>
//   fun g_scanner_set_scope(scanner: NullablePointer[GScanner] tag, scopeid: U32): U32 =>
//   fun g_scanner_scope_add_symbol(scanner: NullablePointer[GScanner] tag, scopeid: U32, symbol: Pointer[U8] tag, value: Pointer[None] tag): None =>
//   fun g_scanner_scope_remove_symbol(scanner: NullablePointer[GScanner] tag, scopeid: U32, symbol: Pointer[U8] tag): None =>
//   fun g_scanner_scope_lookup_symbol(scanner: NullablePointer[GScanner] tag, scopeid: U32, symbol: Pointer[U8] tag): Pointer[None] =>
//   fun g_scanner_scope_foreach_symbol(scanner: NullablePointer[GScanner] tag, scopeid: U32, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//     @g_scanner_scope_foreach_symbol(scanner, scopeid, func, userdata)
//   fun g_scanner_lookup_symbol(scanner: NullablePointer[GScanner] tag, symbol: Pointer[U8] tag): Pointer[None] =>
//   fun g_scanner_unexp_token(scanner: NullablePointer[GScanner] tag, expectedtoken: I32, identifierspec: Pointer[U8] tag, symbolspec: Pointer[U8] tag, symbolname: Pointer[U8] tag, message: Pointer[U8] tag, iserror: I32): None =>
// /*  fun g_scanner_error(scanner: NullablePointer[GScanner] tag, format: Pointer[U8] tag, ...): None =>
// /*  fun g_scanner_warn(scanner: NullablePointer[GScanner] tag, format: Pointer[U8] tag, ...): None =>
//   fun g_sequence_new(datadestroy: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[GSequence] =>
//   fun g_sequence_free(seq: NullablePointer[GSequence] tag): None =>
//   fun g_sequence_get_length(seq: NullablePointer[GSequence] tag): I32 =>
//   fun g_sequence_foreach(seq: NullablePointer[GSequence] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//     @g_sequence_foreach(seq, func, userdata)
//   fun g_sequence_foreach_range(begin: NullablePointer[GSequenceNode] tag, g_end: NullablePointer[GSequenceNode] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//     @g_sequence_foreach_range(begin, g_end, func, userdata)
//   fun g_sequence_sort(seq: NullablePointer[GSequence] tag, cmpfunc: NullablePointer[FUNCTIONTYPE] tag, cmpdata: Pointer[None] tag): None =>
//     @g_sequence_sort(seq, cmpfunc, cmpdata)
//   fun g_sequence_sort_iter(seq: NullablePointer[GSequence] tag, cmpfunc: NullablePointer[FUNCTIONTYPE] tag, cmpdata: Pointer[None] tag): None =>
//     @g_sequence_sort_iter(seq, cmpfunc, cmpdata)
//   fun g_sequence_is_empty(seq: NullablePointer[GSequence] tag): I32 =>
//   fun g_sequence_get_begin_iter(seq: NullablePointer[GSequence] tag): NullablePointer[GSequenceNode] =>
//   fun g_sequence_get_end_iter(seq: NullablePointer[GSequence] tag): NullablePointer[GSequenceNode] =>
//   fun g_sequence_get_iter_at_pos(seq: NullablePointer[GSequence] tag, pos: I32): NullablePointer[GSequenceNode] =>
//   fun g_sequence_append(seq: NullablePointer[GSequence] tag, data: Pointer[None] tag): NullablePointer[GSequenceNode] =>
//   fun g_sequence_prepend(seq: NullablePointer[GSequence] tag, data: Pointer[None] tag): NullablePointer[GSequenceNode] =>
//   fun g_sequence_insert_before(iter: NullablePointer[GSequenceNode] tag, data: Pointer[None] tag): NullablePointer[GSequenceNode] =>
//   fun g_sequence_move(src: NullablePointer[GSequenceNode] tag, dest: NullablePointer[GSequenceNode] tag): None =>
//   fun g_sequence_swap(a: NullablePointer[GSequenceNode] tag, b: NullablePointer[GSequenceNode] tag): None =>
//   fun g_sequence_insert_sorted(seq: NullablePointer[GSequence] tag, data: Pointer[None] tag, cmpfunc: NullablePointer[FUNCTIONTYPE] tag, cmpdata: Pointer[None] tag): NullablePointer[GSequenceNode] =>
//     @g_sequence_insert_sorted(seq, data, cmpfunc, cmpdata)
//   fun g_sequence_insert_sorted_iter(seq: NullablePointer[GSequence] tag, data: Pointer[None] tag, itercmp: NullablePointer[FUNCTIONTYPE] tag, cmpdata: Pointer[None] tag): NullablePointer[GSequenceNode] =>
//   fun g_sequence_sort_changed(iter: NullablePointer[GSequenceNode] tag, cmpfunc: NullablePointer[FUNCTIONTYPE] tag, cmpdata: Pointer[None] tag): None =>
//     @g_sequence_sort_changed(iter, cmpfunc, cmpdata)
//   fun g_sequence_sort_changed_iter(iter: NullablePointer[GSequenceNode] tag, itercmp: NullablePointer[FUNCTIONTYPE] tag, cmpdata: Pointer[None] tag): None =>
//   fun g_sequence_remove(iter: NullablePointer[GSequenceNode] tag): None =>
//   fun g_sequence_remove_range(begin: NullablePointer[GSequenceNode] tag, g_end: NullablePointer[GSequenceNode] tag): None =>
//   fun g_sequence_move_range(dest: NullablePointer[GSequenceNode] tag, begin: NullablePointer[GSequenceNode] tag, g_end: NullablePointer[GSequenceNode] tag): None =>
//   fun g_sequence_search(seq: NullablePointer[GSequence] tag, data: Pointer[None] tag, cmpfunc: NullablePointer[FUNCTIONTYPE] tag, cmpdata: Pointer[None] tag): NullablePointer[GSequenceNode] =>
//     @g_sequence_search(seq, data, cmpfunc, cmpdata)
//   fun g_sequence_search_iter(seq: NullablePointer[GSequence] tag, data: Pointer[None] tag, itercmp: NullablePointer[FUNCTIONTYPE] tag, cmpdata: Pointer[None] tag): NullablePointer[GSequenceNode] =>
//   fun g_sequence_lookup(seq: NullablePointer[GSequence] tag, data: Pointer[None] tag, cmpfunc: NullablePointer[FUNCTIONTYPE] tag, cmpdata: Pointer[None] tag): NullablePointer[GSequenceNode] =>
//     @g_sequence_lookup(seq, data, cmpfunc, cmpdata)
//   fun g_sequence_lookup_iter(seq: NullablePointer[GSequence] tag, data: Pointer[None] tag, itercmp: NullablePointer[FUNCTIONTYPE] tag, cmpdata: Pointer[None] tag): NullablePointer[GSequenceNode] =>
//   fun g_sequence_get(iter: NullablePointer[GSequenceNode] tag): Pointer[None] =>
//   fun g_sequence_set(iter: NullablePointer[GSequenceNode] tag, data: Pointer[None] tag): None =>
//   fun g_sequence_iter_is_begin(iter: NullablePointer[GSequenceNode] tag): I32 =>
//   fun g_sequence_iter_is_end(iter: NullablePointer[GSequenceNode] tag): I32 =>
//   fun g_sequence_iter_next(iter: NullablePointer[GSequenceNode] tag): NullablePointer[GSequenceNode] =>
//   fun g_sequence_iter_prev(iter: NullablePointer[GSequenceNode] tag): NullablePointer[GSequenceNode] =>
//   fun g_sequence_iter_get_position(iter: NullablePointer[GSequenceNode] tag): I32 =>
//   fun g_sequence_iter_move(iter: NullablePointer[GSequenceNode] tag, delta: I32): NullablePointer[GSequenceNode] =>
//   fun g_sequence_iter_get_sequence(iter: NullablePointer[GSequenceNode] tag): NullablePointer[GSequence] =>
//   fun g_sequence_iter_compare(a: NullablePointer[GSequenceNode] tag, b: NullablePointer[GSequenceNode] tag): I32 =>
//   fun g_sequence_range_get_midpoint(begin: NullablePointer[GSequenceNode] tag, g_end: NullablePointer[GSequenceNode] tag): NullablePointer[GSequenceNode] =>
//   fun g_shell_error_quark(): U32 =>
//   fun g_shell_quote(unquotedstring: Pointer[U8] tag): Pointer[U8] =>
//   fun g_shell_unquote(quotedstring: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_shell_parse_argv(commandline: Pointer[U8] tag, argcp: Pointer[I32] tag, argvp: NullablePointer[NullablePointer[Pointer[U8]]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_slice_alloc(blocksize: U64): Pointer[None] =>
//   fun g_slice_alloc0(blocksize: U64): Pointer[None] =>
//   fun g_slice_copy(blocksize: U64, memblock: Pointer[None] tag): Pointer[None] =>
//   fun g_slice_free1(blocksize: U64, memblock: Pointer[None] tag): None =>
//   fun g_slice_free_chain_with_offset(blocksize: U64, memchain: Pointer[None] tag, nextoffset: U64): None =>
//   fun g_slice_set_config(ckey: I32, value: I64): None =>
//   fun g_slice_get_config(ckey: I32): I64 =>
//   fun g_slice_get_config_state(ckey: I32, address: I64, nvalues: Pointer[U32] tag): Pointer[I64] =>
//   fun g_spawn_error_quark(): U32 =>
//   fun g_spawn_exit_error_quark(): U32 =>
//   fun g_spawn_async(workingdirectory: Pointer[U8] tag, argv: NullablePointer[Pointer[U8]] tag, envp: NullablePointer[Pointer[U8]] tag, flags: I32, childsetup: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, childpid: Pointer[I32] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_spawn_async_with_pipes(workingdirectory: Pointer[U8] tag, argv: NullablePointer[Pointer[U8]] tag, envp: NullablePointer[Pointer[U8]] tag, flags: I32, childsetup: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, childpid: Pointer[I32] tag, standardinput: Pointer[I32] tag, standardoutput: Pointer[I32] tag, standarderror: Pointer[I32] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_spawn_async_with_pipes_and_fds(workingdirectory: Pointer[U8] tag, argv: NullablePointer[Pointer[U8]] tag, envp: NullablePointer[Pointer[U8]] tag, flags: I32, childsetup: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, stdinfd: I32, stdoutfd: I32, stderrfd: I32, sourcefds: Pointer[I32] tag, targetfds: Pointer[I32] tag, nfds: U64, childpidout: Pointer[I32] tag, stdinpipeout: Pointer[I32] tag, stdoutpipeout: Pointer[I32] tag, stderrpipeout: Pointer[I32] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_spawn_async_with_fds(workingdirectory: Pointer[U8] tag, argv: NullablePointer[Pointer[U8]] tag, envp: NullablePointer[Pointer[U8]] tag, flags: I32, childsetup: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, childpid: Pointer[I32] tag, stdinfd: I32, stdoutfd: I32, stderrfd: I32, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_spawn_sync(workingdirectory: Pointer[U8] tag, argv: NullablePointer[Pointer[U8]] tag, envp: NullablePointer[Pointer[U8]] tag, flags: I32, childsetup: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, standardoutput: NullablePointer[Pointer[U8]] tag, standarderror: NullablePointer[Pointer[U8]] tag, exitstatus: Pointer[I32] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_spawn_command_line_sync(commandline: Pointer[U8] tag, standardoutput: NullablePointer[Pointer[U8]] tag, standarderror: NullablePointer[Pointer[U8]] tag, exitstatus: Pointer[I32] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_spawn_command_line_async(commandline: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_spawn_check_exit_status(exitstatus: I32, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_spawn_close_pid(pid: I32): None =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:90
//   Original Name: g_ascii_tolower/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:90
//   fun g_ascii_tolower(c: U8): U8 =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:92
//   Original Name: g_ascii_toupper/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:92
//   fun g_ascii_toupper(c: U8): U8 =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:95
//   Original Name: g_ascii_digit_value/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:95
//   fun g_ascii_digit_value(c: U8): I32 =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:97
//   Original Name: g_ascii_xdigit_value/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:97
//   fun g_ascii_xdigit_value(c: U8): I32 =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:104
//   Original Name: g_strdelimit/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:104
//   fun g_strdelimit(string: Pointer[U8] tag, delimiters: Pointer[U8] tag, newdelimiter: U8): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:108
//   Original Name: g_strcanon/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:108
//   fun g_strcanon(string: Pointer[U8] tag, validchars: Pointer[U8] tag, substitutor: U8): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:112
//   Original Name: g_strerror/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:112
//   fun g_strerror(errnum: I32): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:114
//   Original Name: g_strsignal/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:114
//   fun g_strsignal(signum: I32): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:116
//   Original Name: g_strreverse/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:116
//   fun g_strreverse(string: Pointer[U8] tag): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:118
//   Original Name: g_strlcpy/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:118
//   fun g_strlcpy(dest: Pointer[U8] tag, src: Pointer[U8] tag, destsize: U64): U64 =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:122
//   Original Name: g_strlcat/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:122
//   fun g_strlcat(dest: Pointer[U8] tag, src: Pointer[U8] tag, destsize: U64): U64 =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:126
//   Original Name: g_strstr_len/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:126
//   fun g_strstr_len(haystack: Pointer[U8] tag, haystacklen: I64, needle: Pointer[U8] tag): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:130
//   Original Name: g_strrstr/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:130
//   fun g_strrstr(haystack: Pointer[U8] tag, needle: Pointer[U8] tag): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:133
//   Original Name: g_strrstr_len/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:133
//   fun g_strrstr_len(haystack: Pointer[U8] tag, haystacklen: I64, needle: Pointer[U8] tag): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:138
//   Original Name: g_str_has_suffix/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:138
//   fun g_str_has_suffix(str: Pointer[U8] tag, suffix: Pointer[U8] tag): I32 =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:141
//   Original Name: g_str_has_prefix/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:141
//   fun g_str_has_prefix(str: Pointer[U8] tag, prefix: Pointer[U8] tag): I32 =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:147
//   Original Name: g_strtod/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:147
//   fun g_strtod(nptr: Pointer[U8] tag, endptr: NullablePointer[Pointer[U8]] tag): F64 =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:150
//   Original Name: g_ascii_strtod/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:150
//   fun g_ascii_strtod(nptr: Pointer[U8] tag, endptr: NullablePointer[Pointer[U8]] tag): F64 =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:153
//   Original Name: g_ascii_strtoull/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:153
//   fun g_ascii_strtoull(nptr: Pointer[U8] tag, endptr: NullablePointer[Pointer[U8]] tag, base: U32): U64 =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:157
//   Original Name: g_ascii_strtoll/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:157
//   fun g_ascii_strtoll(nptr: Pointer[U8] tag, endptr: NullablePointer[Pointer[U8]] tag, base: U32): I64 =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:165
//   Original Name: g_ascii_dtostr/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:165
//   fun g_ascii_dtostr(buffer: Pointer[U8] tag, buflen: I32, d: F64): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:169
//   Original Name: g_ascii_formatd/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:169
//   fun g_ascii_formatd(buffer: Pointer[U8] tag, buflen: I32, format: Pointer[U8] tag, d: F64): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:176
//   Original Name: g_strchug/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:176
//   fun g_strchug(string: Pointer[U8] tag): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:179
//   Original Name: g_strchomp/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:179
//   fun g_strchomp(string: Pointer[U8] tag): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:184
//   Original Name: g_ascii_strcasecmp/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:184
//   fun g_ascii_strcasecmp(s1: Pointer[U8] tag, s2: Pointer[U8] tag): I32 =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:187
//   Original Name: g_ascii_strncasecmp/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:187
//   fun g_ascii_strncasecmp(s1: Pointer[U8] tag, s2: Pointer[U8] tag, n: U64): I32 =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:191
//   Original Name: g_ascii_strdown/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:191
//   fun g_ascii_strdown(str: Pointer[U8] tag, len: I64): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:194
//   Original Name: g_ascii_strup/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:194
//   fun g_ascii_strup(str: Pointer[U8] tag, len: I64): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:198
//   Original Name: g_str_is_ascii/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:198
//   fun g_str_is_ascii(str: Pointer[U8] tag): I32 =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:201
//   Original Name: g_strcasecmp/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:201
//   fun g_strcasecmp(s1: Pointer[U8] tag, s2: Pointer[U8] tag): I32 =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:204
//   Original Name: g_strncasecmp/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:204
//   fun g_strncasecmp(s1: Pointer[U8] tag, s2: Pointer[U8] tag, n: U32): I32 =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:208
//   Original Name: g_strdown/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:208
//   fun g_strdown(string: Pointer[U8] tag): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:210
//   Original Name: g_strup/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:210
//   fun g_strup(string: Pointer[U8] tag): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:217
//   Original Name: g_strdup/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:217
//   fun g_strdup(str: Pointer[U8] tag): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:219
//   Original Name: g_strdup_printf/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:219
// /*  fun g_strdup_printf(format: Pointer[U8] tag, ...): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:222
//   Original Name: g_strdup_vprintf/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:222
//   fun g_strdup_vprintf(format: Pointer[U8] tag, args: NullablePointer[Valisttag] tag): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:225
//   Original Name: g_strndup/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:225
//   fun g_strndup(str: Pointer[U8] tag, n: U64): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:228
//   Original Name: g_strnfill/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:228
//   fun g_strnfill(length: U64, fillchar: U8): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:231
//   Original Name: g_strconcat/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:231
// /*  fun g_strconcat(string1: Pointer[U8] tag, ...): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:234
//   Original Name: g_strjoin/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:234
// /*  fun g_strjoin(separator: Pointer[U8] tag, ...): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:242
//   Original Name: g_strcompress/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:242
//   fun g_strcompress(source: Pointer[U8] tag): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:253
//   Original Name: g_strescape/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:253
//   fun g_strescape(source: Pointer[U8] tag, exceptions: Pointer[U8] tag): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:257
//   Original Name: g_memdup/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:257
//   fun g_memdup(mem: Pointer[None] tag, bytesize: U32): Pointer[None] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:261
//   Original Name: g_memdup2/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:261
//   fun g_memdup2(mem: Pointer[None] tag, bytesize: U64): Pointer[None] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:275
//   Original Name: g_strsplit/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:275
//   fun g_strsplit(string: Pointer[U8] tag, delimiter: Pointer[U8] tag, maxtokens: I32): NullablePointer[Pointer[U8]] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:279
//   Original Name: g_strsplit_set/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:279
//   fun g_strsplit_set(string: Pointer[U8] tag, delimiters: Pointer[U8] tag, maxtokens: I32): NullablePointer[Pointer[U8]] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:283
//   Original Name: g_strjoinv/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:283
//   fun g_strjoinv(separator: Pointer[U8] tag, strarray: NullablePointer[Pointer[U8]] tag): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:286
//   Original Name: g_strfreev/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:286
//   fun g_strfreev(strarray: NullablePointer[Pointer[U8]] tag): None =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:288
//   Original Name: g_strdupv/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:288
//   fun g_strdupv(strarray: NullablePointer[Pointer[U8]] tag): NullablePointer[Pointer[U8]] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:290
//   Original Name: g_strv_length/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:290
//   fun g_strv_length(strarray: NullablePointer[Pointer[U8]] tag): U32 =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:293
//   Original Name: g_stpcpy/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:293
//   fun g_stpcpy(dest: Pointer[U8] tag, src: Pointer[U8] tag): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:297
//   Original Name: g_str_to_ascii/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:297
//   fun g_str_to_ascii(str: Pointer[U8] tag, fromlocale: Pointer[U8] tag): Pointer[U8] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:301
//   Original Name: g_str_tokenize_and_fold/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:301
//   fun g_str_tokenize_and_fold(string: Pointer[U8] tag, translitlocale: Pointer[U8] tag, asciialternates: NullablePointer[NullablePointer[Pointer[U8]]] tag): NullablePointer[Pointer[U8]] =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:306
//   Original Name: g_str_match_string/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:306
//   fun g_str_match_string(searchterm: Pointer[U8] tag, potentialhit: Pointer[U8] tag, acceptalternates: I32): I32 =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:311
//   Original Name: g_strv_contains/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:311
//   fun g_strv_contains(strv: NullablePointer[Pointer[U8]] tag, str: Pointer[U8] tag): I32 =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:315
//   Original Name: g_strv_equal/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:315
//   fun g_strv_equal(strv1: NullablePointer[Pointer[U8]] tag, strv2: NullablePointer[Pointer[U8]] tag): I32 =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:346
//   Original Name: g_number_parser_error_quark/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:346
//   fun g_number_parser_error_quark(): U32 =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:349
//   Original Name: g_ascii_string_to_signed/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:349
//   fun g_ascii_string_to_signed(str: Pointer[U8] tag, base: U32, min: I64, max: I64, outnum: Pointer[I64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   Source: /nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:357
//   Original Name: g_ascii_string_to_unsigned/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gstrfuncs.h:357
//   fun g_ascii_string_to_unsigned(str: Pointer[U8] tag, base: U32, min: U64, max: U64, outnum: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_string_chunk_new(size: U64): NullablePointer[GStringChunk] =>
//   fun g_string_chunk_free(chunk: NullablePointer[GStringChunk] tag): None =>
//   fun g_string_chunk_clear(chunk: NullablePointer[GStringChunk] tag): None =>
//   fun g_string_chunk_insert(chunk: NullablePointer[GStringChunk] tag, string: Pointer[U8] tag): Pointer[U8] =>
//   fun g_string_chunk_insert_len(chunk: NullablePointer[GStringChunk] tag, string: Pointer[U8] tag, len: I64): Pointer[U8] =>
//   fun g_string_chunk_insert_const(chunk: NullablePointer[GStringChunk] tag, string: Pointer[U8] tag): Pointer[U8] =>
//   fun g_strv_builder_new(): NullablePointer[GStrvBuilder] =>
//   fun g_strv_builder_unref(builder: NullablePointer[GStrvBuilder] tag): None =>
//   fun g_strv_builder_ref(builder: NullablePointer[GStrvBuilder] tag): NullablePointer[GStrvBuilder] =>
//   fun g_strv_builder_add(builder: NullablePointer[GStrvBuilder] tag, value: Pointer[U8] tag): None =>
//   fun g_strv_builder_end(builder: NullablePointer[GStrvBuilder] tag): NullablePointer[Pointer[U8]] =>
//   fun g_strcmp0(str1: Pointer[U8] tag, str2: Pointer[U8] tag): I32 =>
// /*  fun g_test_minimized_result(minimizedquantity: F64, format: Pointer[U8] tag, ...): None =>
// /*  fun g_test_maximized_result(maximizedquantity: F64, format: Pointer[U8] tag, ...): None =>
// /*  fun g_test_init(argc: Pointer[I32] tag, argv: NullablePointer[NullablePointer[Pointer[U8]]] tag, ...): None =>
//   fun g_test_subprocess(): I32 =>
//   fun g_test_run(): I32 =>
//   Original Name: g_test_add_func/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gtestutils.h:327
//   fun g_test_add_func(testpath: Pointer[U8] tag, testfunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_test_add_func(testpath, testfunc)
//   Original Name: g_test_add_data_func/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gtestutils.h:331
//   fun g_test_add_data_func(testpath: Pointer[U8] tag, testdata: Pointer[None] tag, testfunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_test_add_data_func(testpath, testdata, testfunc)
//   Original Name: g_test_add_data_func_full/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gtestutils.h:336
//   fun g_test_add_data_func_full(testpath: Pointer[U8] tag, testdata: Pointer[None] tag, testfunc: NullablePointer[FUNCTIONTYPE] tag, datafreefunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_test_add_data_func_full(testpath, testdata, testfunc, datafreefunc)
//   fun g_test_get_path(): Pointer[U8] =>
//   fun g_test_fail(): None =>
//   fun g_test_incomplete(msg: Pointer[U8] tag): None =>
//   fun g_test_skip(msg: Pointer[U8] tag): None =>
//   fun g_test_failed(): I32 =>
//   fun g_test_set_nonfatal_assertions(): None =>
// /*  fun g_test_message(format: Pointer[U8] tag, ...): None =>
//   fun g_test_bug_base(uripattern: Pointer[U8] tag): None =>
//   fun g_test_bug(bugurisnippet: Pointer[U8] tag): None =>
//   fun g_test_summary(summary: Pointer[U8] tag): None =>
//   fun g_test_timer_start(): None =>
//   fun g_test_timer_elapsed(): F64 =>
//   fun g_test_timer_last(): F64 =>
//   fun g_test_queue_free(gfreepointer: Pointer[None] tag): None =>
//   fun g_test_queue_destroy(destroyfunc: NullablePointer[FUNCTIONTYPE] tag, destroydata: Pointer[None] tag): None =>
//     @g_test_queue_destroy(destroyfunc, destroydata)
//   fun g_test_trap_fork(usectimeout: U64, testtrapflags: I32): I32 =>
//   fun g_test_trap_subprocess(testpath: Pointer[U8] tag, usectimeout: U64, testflags: I32): None =>
//   fun g_test_trap_has_passed(): I32 =>
//   fun g_test_trap_reached_timeout(): I32 =>
//   fun g_test_rand_int(): I32 =>
//   fun g_test_rand_int_range(begin: I32, g_end: I32): I32 =>
//   fun g_test_rand_double(): F64 =>
//   fun g_test_rand_double_range(rangestart: F64, rangeend: F64): F64 =>
//   fun g_test_create_case(testname: Pointer[U8] tag, datasize: U64, testdata: Pointer[None] tag, datasetup: NullablePointer[FUNCTIONTYPE] tag, datatest: NullablePointer[FUNCTIONTYPE] tag, datateardown: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[GTestCase] =>
//   fun g_test_create_suite(suitename: Pointer[U8] tag): NullablePointer[GTestSuite] =>
//   fun g_test_get_root(): NullablePointer[GTestSuite] =>
//   fun g_test_suite_add(suite: NullablePointer[GTestSuite] tag, testcase: NullablePointer[GTestCase] tag): None =>
//   fun g_test_suite_add_suite(suite: NullablePointer[GTestSuite] tag, nestedsuite: NullablePointer[GTestSuite] tag): None =>
//   fun g_test_run_suite(suite: NullablePointer[GTestSuite] tag): I32 =>
//   fun g_test_trap_assertions(domain: Pointer[U8] tag, file: Pointer[U8] tag, line: I32, func: Pointer[U8] tag, assertionflags: U64, pattern: Pointer[U8] tag): None =>
//     @g_test_trap_assertions(domain, file, line, func, assertionflags, pattern)
//   fun g_assertion_message(domain: Pointer[U8] tag, file: Pointer[U8] tag, line: I32, func: Pointer[U8] tag, message: Pointer[U8] tag): None =>
//     @g_assertion_message(domain, file, line, func, message)
//   fun g_assertion_message_expr(domain: Pointer[U8] tag, file: Pointer[U8] tag, line: I32, func: Pointer[U8] tag, expr: Pointer[U8] tag): None =>
//     @g_assertion_message_expr(domain, file, line, func, expr)
//   fun g_assertion_message_cmpstr(domain: Pointer[U8] tag, file: Pointer[U8] tag, line: I32, func: Pointer[U8] tag, expr: Pointer[U8] tag, arg1: Pointer[U8] tag, cmp: Pointer[U8] tag, arg2: Pointer[U8] tag): None =>
//     @g_assertion_message_cmpstr(domain, file, line, func, expr, arg1, cmp, arg2)
//   fun g_assertion_message_cmpstrv(domain: Pointer[U8] tag, file: Pointer[U8] tag, line: I32, func: Pointer[U8] tag, expr: Pointer[U8] tag, arg1: NullablePointer[Pointer[U8]] tag, arg2: NullablePointer[Pointer[U8]] tag, firstwrongidx: U64): None =>
//     @g_assertion_message_cmpstrv(domain, file, line, func, expr, arg1, arg2, firstwrongidx)
//   fun g_assertion_message_cmpnum(domain: Pointer[U8] tag, file: Pointer[U8] tag, line: I32, func: Pointer[U8] tag, expr: Pointer[U8] tag, arg1: F128, cmp: Pointer[U8] tag, arg2: F128, numtype: U8): None =>
//     @g_assertion_message_cmpnum(domain, file, line, func, expr, arg1, cmp, arg2, numtype)
//   fun g_assertion_message_error(domain: Pointer[U8] tag, file: Pointer[U8] tag, line: I32, func: Pointer[U8] tag, expr: Pointer[U8] tag, g_error: NullablePointer[GError] tag, errordomain: U32, errorcode: I32): None =>
//     @g_assertion_message_error(domain, file, line, func, expr, g_error, errordomain, errorcode)
//   fun g_test_add_vtable(testpath: Pointer[U8] tag, datasize: U64, testdata: Pointer[None] tag, datasetup: NullablePointer[FUNCTIONTYPE] tag, datatest: NullablePointer[FUNCTIONTYPE] tag, datateardown: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_test_log_type_name(logtype: I32): Pointer[U8] =>
//   fun g_test_log_buffer_new(): Pointer[None] =>
//   fun g_test_log_buffer_free(tbuffer: Pointer[None]): None =>
//   fun g_test_log_buffer_push(tbuffer: Pointer[None], nbytes: U32, bytes: Pointer[U8] tag): None =>
//   fun g_test_log_buffer_pop(tbuffer: Pointer[None]): Pointer[None] =>
//   fun g_test_log_msg_free(tmsg: Pointer[None]): None =>
//   fun g_test_log_set_fatal_handler(logfunc: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//     @g_test_log_set_fatal_handler(logfunc, userdata)
//   fun g_test_expect_message(logdomain: Pointer[U8] tag, loglevel: I32, pattern: Pointer[U8] tag): None =>
//   fun g_test_assert_expected_messages_internal(domain: Pointer[U8] tag, file: Pointer[U8] tag, line: I32, func: Pointer[U8] tag): None =>
//     @g_test_assert_expected_messages_internal(domain, file, line, func)
// /*  fun g_test_build_filename(filetype: I32, firstpath: Pointer[U8] tag, ...): Pointer[U8] =>
//   fun g_test_get_dir(filetype: I32): Pointer[U8] =>
// /*  fun g_test_get_filename(filetype: I32, firstpath: Pointer[U8] tag, ...): Pointer[U8] =>
//   fun g_thread_pool_new(func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, maxthreads: I32, exclusive: I32, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GThreadPool] =>
//     @g_thread_pool_new(func, userdata, maxthreads, exclusive, g_error)
//   fun g_thread_pool_free(pool: NullablePointer[GThreadPool] tag, immediate: I32, wait: I32): None =>
//   fun g_thread_pool_push(pool: NullablePointer[GThreadPool] tag, data: Pointer[None] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_thread_pool_unprocessed(pool: NullablePointer[GThreadPool] tag): U32 =>
//   Original Name: g_thread_pool_set_sort_function/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/glib/gthreadpool.h:65
//   fun g_thread_pool_set_sort_function(pool: NullablePointer[GThreadPool] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//     @g_thread_pool_set_sort_function(pool, func, userdata)
//   fun g_thread_pool_move_to_front(pool: NullablePointer[GThreadPool] tag, data: Pointer[None] tag): I32 =>
//   fun g_thread_pool_set_max_threads(pool: NullablePointer[GThreadPool] tag, maxthreads: I32, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_thread_pool_get_max_threads(pool: NullablePointer[GThreadPool] tag): I32 =>
//   fun g_thread_pool_get_num_threads(pool: NullablePointer[GThreadPool] tag): U32 =>
//   fun g_thread_pool_set_max_unused_threads(maxthreads: I32): None =>
//   fun g_thread_pool_get_max_unused_threads(): I32 =>
//   fun g_thread_pool_get_num_unused_threads(): U32 =>
//   fun g_thread_pool_stop_unused_threads(): None =>
//   fun g_thread_pool_set_max_idle_time(interval: U32): None =>
//   fun g_thread_pool_get_max_idle_time(): U32 =>
//   fun g_timer_new(): NullablePointer[GTimer] =>
//   fun g_timer_destroy(timer: NullablePointer[GTimer] tag): None =>
//   fun g_timer_start(timer: NullablePointer[GTimer] tag): None =>
//   fun g_timer_stop(timer: NullablePointer[GTimer] tag): None =>
//   fun g_timer_reset(timer: NullablePointer[GTimer] tag): None =>
//   fun g_timer_continue(timer: NullablePointer[GTimer] tag): None =>
//   fun g_timer_elapsed(timer: NullablePointer[GTimer] tag, microseconds: Pointer[U64] tag): F64 =>
//   fun g_timer_is_active(timer: NullablePointer[GTimer] tag): I32 =>
//   fun g_usleep(microseconds: U64): None =>
//   fun g_time_val_add(time: NullablePointer[GTimeVal] tag, microseconds: I64): None =>
//   fun g_time_val_from_iso8601(isodate: Pointer[U8] tag, time: NullablePointer[GTimeVal] tag): I32 =>
//   fun g_time_val_to_iso8601(time: NullablePointer[GTimeVal] tag): Pointer[U8] =>
//   fun g_trash_stack_push(stackp: NullablePointer[NullablePointer[GTrashStack]] tag, datap: Pointer[None] tag): None =>
//   fun g_trash_stack_pop(stackp: NullablePointer[NullablePointer[GTrashStack]] tag): Pointer[None] =>
//   fun g_trash_stack_peek(stackp: NullablePointer[NullablePointer[GTrashStack]] tag): Pointer[None] =>
//   fun g_trash_stack_height(stackp: NullablePointer[NullablePointer[GTrashStack]] tag): U32 =>
//   fun g_tree_new(keycomparefunc: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[GTree] =>
//     @g_tree_new(keycomparefunc)
//   fun g_tree_new_with_data(keycomparefunc: NullablePointer[FUNCTIONTYPE] tag, keycomparedata: Pointer[None] tag): NullablePointer[GTree] =>
//     @g_tree_new_with_data(keycomparefunc, keycomparedata)
//   fun g_tree_new_full(keycomparefunc: NullablePointer[FUNCTIONTYPE] tag, keycomparedata: Pointer[None] tag, keydestroyfunc: NullablePointer[FUNCTIONTYPE] tag, valuedestroyfunc: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[GTree] =>
//     @g_tree_new_full(keycomparefunc, keycomparedata, keydestroyfunc, valuedestroyfunc)
//   fun g_tree_node_first(tree: NullablePointer[GTree] tag): NullablePointer[GTreeNode] =>
//   fun g_tree_node_last(tree: NullablePointer[GTree] tag): NullablePointer[GTreeNode] =>
//   fun g_tree_node_previous(node: NullablePointer[GTreeNode] tag): NullablePointer[GTreeNode] =>
//   fun g_tree_node_next(node: NullablePointer[GTreeNode] tag): NullablePointer[GTreeNode] =>
//   fun g_tree_ref(tree: NullablePointer[GTree] tag): NullablePointer[GTree] =>
//   fun g_tree_unref(tree: NullablePointer[GTree] tag): None =>
//   fun g_tree_destroy(tree: NullablePointer[GTree] tag): None =>
//   fun g_tree_insert_node(tree: NullablePointer[GTree] tag, key: Pointer[None] tag, value: Pointer[None] tag): NullablePointer[GTreeNode] =>
//   fun g_tree_insert(tree: NullablePointer[GTree] tag, key: Pointer[None] tag, value: Pointer[None] tag): None =>
//   fun g_tree_replace_node(tree: NullablePointer[GTree] tag, key: Pointer[None] tag, value: Pointer[None] tag): NullablePointer[GTreeNode] =>
//   fun g_tree_replace(tree: NullablePointer[GTree] tag, key: Pointer[None] tag, value: Pointer[None] tag): None =>
//   fun g_tree_remove(tree: NullablePointer[GTree] tag, key: Pointer[None] tag): I32 =>
//   fun g_tree_steal(tree: NullablePointer[GTree] tag, key: Pointer[None] tag): I32 =>
//   fun g_tree_node_key(node: NullablePointer[GTreeNode] tag): Pointer[None] =>
//   fun g_tree_node_value(node: NullablePointer[GTreeNode] tag): Pointer[None] =>
//   fun g_tree_lookup_node(tree: NullablePointer[GTree] tag, key: Pointer[None] tag): NullablePointer[GTreeNode] =>
//   fun g_tree_lookup(tree: NullablePointer[GTree] tag, key: Pointer[None] tag): Pointer[None] =>
//   fun g_tree_lookup_extended(tree: NullablePointer[GTree] tag, lookupkey: Pointer[None] tag, origkey: NullablePointer[Pointer[None]] tag, value: NullablePointer[Pointer[None]] tag): I32 =>
//   fun g_tree_foreach(tree: NullablePointer[GTree] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//     @g_tree_foreach(tree, func, userdata)
//   fun g_tree_foreach_node(tree: NullablePointer[GTree] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//     @g_tree_foreach_node(tree, func, userdata)
//   fun g_tree_traverse(tree: NullablePointer[GTree] tag, traversefunc: NullablePointer[FUNCTIONTYPE] tag, traversetype: I32, userdata: Pointer[None] tag): None =>
//     @g_tree_traverse(tree, traversefunc, traversetype, userdata)
//   fun g_tree_search_node(tree: NullablePointer[GTree] tag, searchfunc: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): NullablePointer[GTreeNode] =>
//     @g_tree_search_node(tree, searchfunc, userdata)
//   fun g_tree_search(tree: NullablePointer[GTree] tag, searchfunc: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): Pointer[None] =>
//     @g_tree_search(tree, searchfunc, userdata)
//   fun g_tree_lower_bound(tree: NullablePointer[GTree] tag, key: Pointer[None] tag): NullablePointer[GTreeNode] =>
//   fun g_tree_upper_bound(tree: NullablePointer[GTree] tag, key: Pointer[None] tag): NullablePointer[GTreeNode] =>
//   fun g_tree_height(tree: NullablePointer[GTree] tag): I32 =>
//   fun g_tree_nnodes(tree: NullablePointer[GTree] tag): I32 =>
//   fun g_uri_ref(uri: NullablePointer[GUri] tag): NullablePointer[GUri] =>
//   fun g_uri_unref(uri: NullablePointer[GUri] tag): None =>
//   fun g_uri_split(uriref: Pointer[U8] tag, flags: I32, scheme: NullablePointer[Pointer[U8]] tag, userinfo: NullablePointer[Pointer[U8]] tag, host: NullablePointer[Pointer[U8]] tag, port: Pointer[I32] tag, path: NullablePointer[Pointer[U8]] tag, query: NullablePointer[Pointer[U8]] tag, fragment: NullablePointer[Pointer[U8]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_uri_split_with_user(uriref: Pointer[U8] tag, flags: I32, scheme: NullablePointer[Pointer[U8]] tag, user: NullablePointer[Pointer[U8]] tag, password: NullablePointer[Pointer[U8]] tag, authparams: NullablePointer[Pointer[U8]] tag, host: NullablePointer[Pointer[U8]] tag, port: Pointer[I32] tag, path: NullablePointer[Pointer[U8]] tag, query: NullablePointer[Pointer[U8]] tag, fragment: NullablePointer[Pointer[U8]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_uri_split_network(uristring: Pointer[U8] tag, flags: I32, scheme: NullablePointer[Pointer[U8]] tag, host: NullablePointer[Pointer[U8]] tag, port: Pointer[I32] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_uri_is_valid(uristring: Pointer[U8] tag, flags: I32, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_uri_join(flags: I32, scheme: Pointer[U8] tag, userinfo: Pointer[U8] tag, host: Pointer[U8] tag, port: I32, path: Pointer[U8] tag, query: Pointer[U8] tag, fragment: Pointer[U8] tag): Pointer[U8] =>
//   fun g_uri_join_with_user(flags: I32, scheme: Pointer[U8] tag, user: Pointer[U8] tag, password: Pointer[U8] tag, authparams: Pointer[U8] tag, host: Pointer[U8] tag, port: I32, path: Pointer[U8] tag, query: Pointer[U8] tag, fragment: Pointer[U8] tag): Pointer[U8] =>
//   fun g_uri_parse(uristring: Pointer[U8] tag, flags: I32, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GUri] =>
//   fun g_uri_parse_relative(baseuri: NullablePointer[GUri] tag, uriref: Pointer[U8] tag, flags: I32, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GUri] =>
//   fun g_uri_resolve_relative(baseuristring: Pointer[U8] tag, uriref: Pointer[U8] tag, flags: I32, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_uri_build(flags: I32, scheme: Pointer[U8] tag, userinfo: Pointer[U8] tag, host: Pointer[U8] tag, port: I32, path: Pointer[U8] tag, query: Pointer[U8] tag, fragment: Pointer[U8] tag): NullablePointer[GUri] =>
//   fun g_uri_build_with_user(flags: I32, scheme: Pointer[U8] tag, user: Pointer[U8] tag, password: Pointer[U8] tag, authparams: Pointer[U8] tag, host: Pointer[U8] tag, port: I32, path: Pointer[U8] tag, query: Pointer[U8] tag, fragment: Pointer[U8] tag): NullablePointer[GUri] =>
//   fun g_uri_to_string(uri: NullablePointer[GUri] tag): Pointer[U8] =>
//   fun g_uri_to_string_partial(uri: NullablePointer[GUri] tag, flags: I32): Pointer[U8] =>
//   fun g_uri_get_scheme(uri: NullablePointer[GUri] tag): Pointer[U8] =>
//   fun g_uri_get_userinfo(uri: NullablePointer[GUri] tag): Pointer[U8] =>
//   fun g_uri_get_user(uri: NullablePointer[GUri] tag): Pointer[U8] =>
//   fun g_uri_get_password(uri: NullablePointer[GUri] tag): Pointer[U8] =>
//   fun g_uri_get_auth_params(uri: NullablePointer[GUri] tag): Pointer[U8] =>
//   fun g_uri_get_host(uri: NullablePointer[GUri] tag): Pointer[U8] =>
//   fun g_uri_get_port(uri: NullablePointer[GUri] tag): I32 =>
//   fun g_uri_get_path(uri: NullablePointer[GUri] tag): Pointer[U8] =>
//   fun g_uri_get_query(uri: NullablePointer[GUri] tag): Pointer[U8] =>
//   fun g_uri_get_fragment(uri: NullablePointer[GUri] tag): Pointer[U8] =>
//   fun g_uri_get_flags(uri: NullablePointer[GUri] tag): I32 =>
//   fun g_uri_parse_params(params: Pointer[U8] tag, length: I64, separators: Pointer[U8] tag, flags: I32, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GHashTable] =>
//   fun g_uri_params_iter_init(iter: NullablePointer[GUriParamsIter] tag, params: Pointer[U8] tag, length: I64, separators: Pointer[U8] tag, flags: I32): None =>
//   fun g_uri_params_iter_next(iter: NullablePointer[GUriParamsIter] tag, attribute: NullablePointer[Pointer[U8]] tag, value: NullablePointer[Pointer[U8]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_uri_error_quark(): U32 =>
//   fun g_uri_unescape_string(escapedstring: Pointer[U8] tag, illegalcharacters: Pointer[U8] tag): Pointer[U8] =>
//   fun g_uri_unescape_segment(escapedstring: Pointer[U8] tag, escapedstringend: Pointer[U8] tag, illegalcharacters: Pointer[U8] tag): Pointer[U8] =>
//   fun g_uri_parse_scheme(uri: Pointer[U8] tag): Pointer[U8] =>
//   fun g_uri_peek_scheme(uri: Pointer[U8] tag): Pointer[U8] =>
//   fun g_uri_escape_string(unescaped: Pointer[U8] tag, reservedcharsallowed: Pointer[U8] tag, allowutf8: I32): Pointer[U8] =>
//   fun g_uri_unescape_bytes(escapedstring: Pointer[U8] tag, length: I64, illegalcharacters: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GBytes] =>
//   fun g_uri_escape_bytes(unescaped: Pointer[U8] tag, length: U64, reservedcharsallowed: Pointer[U8] tag): Pointer[U8] =>
//   fun g_uuid_string_is_valid(str: Pointer[U8] tag): I32 =>
//   fun g_uuid_string_random(): Pointer[U8] =>
//   fun glib_check_version(requiredmajor: U32, requiredminor: U32, requiredmicro: U32): Pointer[U8] =>
//   fun g_autoptr_cleanup_generic_gfree(p: Pointer[None] tag): None =>
//   fun g_autoptr_cleanup_gstring_free(string: NullablePointer[GString] tag): None =>
//   fun glib_autoptr_clear_GAsyncQueue(ptr: NullablePointer[GAsyncQueue] tag): None =>
//   fun glib_autoptr_cleanup_GAsyncQueue(ptr: NullablePointer[NullablePointer[GAsyncQueue]] tag): None =>
//   fun glib_listautoptr_cleanup_GAsyncQueue(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GAsyncQueue(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GAsyncQueue(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GBookmarkFile(ptr: NullablePointer[GBookmarkFile] tag): None =>
//   fun glib_autoptr_cleanup_GBookmarkFile(ptr: NullablePointer[NullablePointer[GBookmarkFile]] tag): None =>
//   fun glib_listautoptr_cleanup_GBookmarkFile(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GBookmarkFile(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GBookmarkFile(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GBytes(ptr: NullablePointer[GBytes] tag): None =>
//   fun glib_autoptr_cleanup_GBytes(ptr: NullablePointer[NullablePointer[GBytes]] tag): None =>
//   fun glib_listautoptr_cleanup_GBytes(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GBytes(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GBytes(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GChecksum(ptr: NullablePointer[GChecksum] tag): None =>
//   fun glib_autoptr_cleanup_GChecksum(ptr: NullablePointer[NullablePointer[GChecksum]] tag): None =>
//   fun glib_listautoptr_cleanup_GChecksum(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GChecksum(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GChecksum(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GDateTime(ptr: NullablePointer[GDateTime] tag): None =>
//   fun glib_autoptr_cleanup_GDateTime(ptr: NullablePointer[NullablePointer[GDateTime]] tag): None =>
//   fun glib_listautoptr_cleanup_GDateTime(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GDateTime(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GDateTime(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GDate(ptr: NullablePointer[GDate] tag): None =>
//   fun glib_autoptr_cleanup_GDate(ptr: NullablePointer[NullablePointer[GDate]] tag): None =>
//   fun glib_listautoptr_cleanup_GDate(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GDate(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GDate(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GDir(ptr: NullablePointer[GDir] tag): None =>
//   fun glib_autoptr_cleanup_GDir(ptr: NullablePointer[NullablePointer[GDir]] tag): None =>
//   fun glib_listautoptr_cleanup_GDir(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GDir(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GDir(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GError(ptr: NullablePointer[GError] tag): None =>
//   fun glib_autoptr_cleanup_GError(ptr: NullablePointer[NullablePointer[GError]] tag): None =>
//   fun glib_listautoptr_cleanup_GError(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GError(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GError(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GHashTable(ptr: NullablePointer[GHashTable] tag): None =>
//   fun glib_autoptr_cleanup_GHashTable(ptr: NullablePointer[NullablePointer[GHashTable]] tag): None =>
//   fun glib_listautoptr_cleanup_GHashTable(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GHashTable(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GHashTable(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GHmac(ptr: NullablePointer[GHmac] tag): None =>
//   fun glib_autoptr_cleanup_GHmac(ptr: NullablePointer[NullablePointer[GHmac]] tag): None =>
//   fun glib_listautoptr_cleanup_GHmac(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GHmac(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GHmac(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GIOChannel(ptr: NullablePointer[GIOChannel] tag): None =>
//   fun glib_autoptr_cleanup_GIOChannel(ptr: NullablePointer[NullablePointer[GIOChannel]] tag): None =>
//   fun glib_listautoptr_cleanup_GIOChannel(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GIOChannel(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GIOChannel(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GKeyFile(ptr: NullablePointer[GKeyFile] tag): None =>
//   fun glib_autoptr_cleanup_GKeyFile(ptr: NullablePointer[NullablePointer[GKeyFile]] tag): None =>
//   fun glib_listautoptr_cleanup_GKeyFile(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GKeyFile(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GKeyFile(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GList(ptr: NullablePointer[GList] tag): None =>
//   fun glib_autoptr_cleanup_GList(ptr: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_listautoptr_cleanup_GList(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GList(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GList(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GArray(ptr: NullablePointer[GArray] tag): None =>
//   fun glib_autoptr_cleanup_GArray(ptr: NullablePointer[NullablePointer[GArray]] tag): None =>
//   fun glib_listautoptr_cleanup_GArray(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GArray(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GArray(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GPtrArray(ptr: NullablePointer[GPtrArray] tag): None =>
//   fun glib_autoptr_cleanup_GPtrArray(ptr: NullablePointer[NullablePointer[GPtrArray]] tag): None =>
//   fun glib_listautoptr_cleanup_GPtrArray(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GPtrArray(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GPtrArray(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GByteArray(ptr: NullablePointer[GByteArray] tag): None =>
//   fun glib_autoptr_cleanup_GByteArray(ptr: NullablePointer[NullablePointer[GByteArray]] tag): None =>
//   fun glib_listautoptr_cleanup_GByteArray(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GByteArray(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GByteArray(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GMainContext(ptr: NullablePointer[GMainContext] tag): None =>
//   fun glib_autoptr_cleanup_GMainContext(ptr: NullablePointer[NullablePointer[GMainContext]] tag): None =>
//   fun glib_listautoptr_cleanup_GMainContext(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GMainContext(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GMainContext(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GMainContextPusher(ptr: Pointer[None] tag): None =>
//   fun glib_autoptr_cleanup_GMainContextPusher(ptr: NullablePointer[Pointer[None]] tag): None =>
//   fun glib_listautoptr_cleanup_GMainContextPusher(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GMainContextPusher(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GMainContextPusher(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GMainLoop(ptr: NullablePointer[GMainLoop] tag): None =>
//   fun glib_autoptr_cleanup_GMainLoop(ptr: NullablePointer[NullablePointer[GMainLoop]] tag): None =>
//   fun glib_listautoptr_cleanup_GMainLoop(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GMainLoop(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GMainLoop(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSource(ptr: NullablePointer[GSource] tag): None =>
//   fun glib_autoptr_cleanup_GSource(ptr: NullablePointer[NullablePointer[GSource]] tag): None =>
//   fun glib_listautoptr_cleanup_GSource(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSource(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSource(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GMappedFile(ptr: NullablePointer[GMappedFile] tag): None =>
//   fun glib_autoptr_cleanup_GMappedFile(ptr: NullablePointer[NullablePointer[GMappedFile]] tag): None =>
//   fun glib_listautoptr_cleanup_GMappedFile(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GMappedFile(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GMappedFile(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GMarkupParseContext(ptr: NullablePointer[GMarkupParseContext] tag): None =>
//   fun glib_autoptr_cleanup_GMarkupParseContext(ptr: NullablePointer[NullablePointer[GMarkupParseContext]] tag): None =>
//   fun glib_listautoptr_cleanup_GMarkupParseContext(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GMarkupParseContext(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GMarkupParseContext(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GNode(ptr: NullablePointer[GNode] tag): None =>
//   fun glib_autoptr_cleanup_GNode(ptr: NullablePointer[NullablePointer[GNode]] tag): None =>
//   fun glib_listautoptr_cleanup_GNode(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GNode(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GNode(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GOptionContext(ptr: NullablePointer[GOptionContext] tag): None =>
//   fun glib_autoptr_cleanup_GOptionContext(ptr: NullablePointer[NullablePointer[GOptionContext]] tag): None =>
//   fun glib_listautoptr_cleanup_GOptionContext(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GOptionContext(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GOptionContext(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GOptionGroup(ptr: NullablePointer[GOptionGroup] tag): None =>
//   fun glib_autoptr_cleanup_GOptionGroup(ptr: NullablePointer[NullablePointer[GOptionGroup]] tag): None =>
//   fun glib_listautoptr_cleanup_GOptionGroup(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GOptionGroup(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GOptionGroup(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GPatternSpec(ptr: NullablePointer[GPatternSpec] tag): None =>
//   fun glib_autoptr_cleanup_GPatternSpec(ptr: NullablePointer[NullablePointer[GPatternSpec]] tag): None =>
//   fun glib_listautoptr_cleanup_GPatternSpec(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GPatternSpec(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GPatternSpec(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GQueue(ptr: NullablePointer[GQueue] tag): None =>
//   fun glib_autoptr_cleanup_GQueue(ptr: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_listautoptr_cleanup_GQueue(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GQueue(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GQueue(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_auto_cleanup_GQueue(ptr: NullablePointer[GQueue] tag): None =>
//   fun glib_autoptr_clear_GRand(ptr: NullablePointer[GRand] tag): None =>
//   fun glib_autoptr_cleanup_GRand(ptr: NullablePointer[NullablePointer[GRand]] tag): None =>
//   fun glib_listautoptr_cleanup_GRand(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GRand(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GRand(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GRegex(ptr: NullablePointer[GRegex] tag): None =>
//   fun glib_autoptr_cleanup_GRegex(ptr: NullablePointer[NullablePointer[GRegex]] tag): None =>
//   fun glib_listautoptr_cleanup_GRegex(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GRegex(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GRegex(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GMatchInfo(ptr: NullablePointer[GMatchInfo] tag): None =>
//   fun glib_autoptr_cleanup_GMatchInfo(ptr: NullablePointer[NullablePointer[GMatchInfo]] tag): None =>
//   fun glib_listautoptr_cleanup_GMatchInfo(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GMatchInfo(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GMatchInfo(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GScanner(ptr: NullablePointer[GScanner] tag): None =>
//   fun glib_autoptr_cleanup_GScanner(ptr: NullablePointer[NullablePointer[GScanner]] tag): None =>
//   fun glib_listautoptr_cleanup_GScanner(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GScanner(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GScanner(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSequence(ptr: NullablePointer[GSequence] tag): None =>
//   fun glib_autoptr_cleanup_GSequence(ptr: NullablePointer[NullablePointer[GSequence]] tag): None =>
//   fun glib_listautoptr_cleanup_GSequence(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSequence(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSequence(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSList(ptr: NullablePointer[GSList] tag): None =>
//   fun glib_autoptr_cleanup_GSList(ptr: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_listautoptr_cleanup_GSList(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSList(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSList(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GString(ptr: NullablePointer[GString] tag): None =>
//   fun glib_autoptr_cleanup_GString(ptr: NullablePointer[NullablePointer[GString]] tag): None =>
//   fun glib_listautoptr_cleanup_GString(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GString(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GString(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GStringChunk(ptr: NullablePointer[GStringChunk] tag): None =>
//   fun glib_autoptr_cleanup_GStringChunk(ptr: NullablePointer[NullablePointer[GStringChunk]] tag): None =>
//   fun glib_listautoptr_cleanup_GStringChunk(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GStringChunk(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GStringChunk(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GStrvBuilder(ptr: NullablePointer[GStrvBuilder] tag): None =>
//   fun glib_autoptr_cleanup_GStrvBuilder(ptr: NullablePointer[NullablePointer[GStrvBuilder]] tag): None =>
//   fun glib_listautoptr_cleanup_GStrvBuilder(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GStrvBuilder(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GStrvBuilder(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GThread(ptr: NullablePointer[GThread] tag): None =>
//   fun glib_autoptr_cleanup_GThread(ptr: NullablePointer[NullablePointer[GThread]] tag): None =>
//   fun glib_listautoptr_cleanup_GThread(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GThread(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GThread(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_auto_cleanup_GMutex(ptr: Pointer[None] tag): None =>
//   fun glib_autoptr_clear_GMutexLocker(ptr: Pointer[None] tag): None =>
//   fun glib_autoptr_cleanup_GMutexLocker(ptr: NullablePointer[Pointer[None]] tag): None =>
//   fun glib_listautoptr_cleanup_GMutexLocker(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GMutexLocker(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GMutexLocker(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GRecMutexLocker(ptr: Pointer[None] tag): None =>
//   fun glib_autoptr_cleanup_GRecMutexLocker(ptr: NullablePointer[Pointer[None]] tag): None =>
//   fun glib_listautoptr_cleanup_GRecMutexLocker(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GRecMutexLocker(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GRecMutexLocker(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GRWLockWriterLocker(ptr: Pointer[None] tag): None =>
//   fun glib_autoptr_cleanup_GRWLockWriterLocker(ptr: NullablePointer[Pointer[None]] tag): None =>
//   fun glib_listautoptr_cleanup_GRWLockWriterLocker(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GRWLockWriterLocker(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GRWLockWriterLocker(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GRWLockReaderLocker(ptr: Pointer[None] tag): None =>
//   fun glib_autoptr_cleanup_GRWLockReaderLocker(ptr: NullablePointer[Pointer[None]] tag): None =>
//   fun glib_listautoptr_cleanup_GRWLockReaderLocker(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GRWLockReaderLocker(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GRWLockReaderLocker(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_auto_cleanup_GCond(ptr: NullablePointer[GCond] tag): None =>
//   fun glib_autoptr_clear_GTimer(ptr: NullablePointer[GTimer] tag): None =>
//   fun glib_autoptr_cleanup_GTimer(ptr: NullablePointer[NullablePointer[GTimer]] tag): None =>
//   fun glib_listautoptr_cleanup_GTimer(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GTimer(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GTimer(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GTimeZone(ptr: NullablePointer[GTimeZone] tag): None =>
//   fun glib_autoptr_cleanup_GTimeZone(ptr: NullablePointer[NullablePointer[GTimeZone]] tag): None =>
//   fun glib_listautoptr_cleanup_GTimeZone(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GTimeZone(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GTimeZone(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GTree(ptr: NullablePointer[GTree] tag): None =>
//   fun glib_autoptr_cleanup_GTree(ptr: NullablePointer[NullablePointer[GTree]] tag): None =>
//   fun glib_listautoptr_cleanup_GTree(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GTree(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GTree(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GVariant(ptr: NullablePointer[GVariant] tag): None =>
//   fun glib_autoptr_cleanup_GVariant(ptr: NullablePointer[NullablePointer[GVariant]] tag): None =>
//   fun glib_listautoptr_cleanup_GVariant(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GVariant(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GVariant(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GVariantBuilder(ptr: NullablePointer[GVariantBuilder] tag): None =>
//   fun glib_autoptr_cleanup_GVariantBuilder(ptr: NullablePointer[NullablePointer[GVariantBuilder]] tag): None =>
//   fun glib_listautoptr_cleanup_GVariantBuilder(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GVariantBuilder(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GVariantBuilder(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_auto_cleanup_GVariantBuilder(ptr: NullablePointer[GVariantBuilder] tag): None =>
//   fun glib_autoptr_clear_GVariantIter(ptr: NullablePointer[GVariantIter] tag): None =>
//   fun glib_autoptr_cleanup_GVariantIter(ptr: NullablePointer[NullablePointer[GVariantIter]] tag): None =>
//   fun glib_listautoptr_cleanup_GVariantIter(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GVariantIter(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GVariantIter(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GVariantDict(ptr: NullablePointer[GVariantDict] tag): None =>
//   fun glib_autoptr_cleanup_GVariantDict(ptr: NullablePointer[NullablePointer[GVariantDict]] tag): None =>
//   fun glib_listautoptr_cleanup_GVariantDict(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GVariantDict(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GVariantDict(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_auto_cleanup_GVariantDict(ptr: NullablePointer[GVariantDict] tag): None =>
//   fun glib_autoptr_clear_GVariantType(ptr: NullablePointer[GVariantType] tag): None =>
//   fun glib_autoptr_cleanup_GVariantType(ptr: NullablePointer[NullablePointer[GVariantType]] tag): None =>
//   fun glib_listautoptr_cleanup_GVariantType(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GVariantType(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GVariantType(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_auto_cleanup_GStrv(ptr: NullablePointer[NullablePointer[Pointer[U8]]] tag): None =>
//   fun glib_autoptr_clear_GRefString(ptr: Pointer[U8] tag): None =>
//   fun glib_autoptr_cleanup_GRefString(ptr: NullablePointer[Pointer[U8]] tag): None =>
//   fun glib_listautoptr_cleanup_GRefString(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GRefString(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GRefString(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GUri(ptr: NullablePointer[GUri] tag): None =>
//   fun glib_autoptr_cleanup_GUri(ptr: NullablePointer[NullablePointer[GUri]] tag): None =>
//   fun glib_listautoptr_cleanup_GUri(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GUri(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GUri(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun g_type_init(): None =>
//   fun g_type_init_with_debug_flags(debugflags: I32): None =>
//   fun g_type_name(g_type: U64): Pointer[U8] =>
//   fun g_type_qname(g_type: U64): U32 =>
//   fun g_type_from_name(name: Pointer[U8] tag): U64 =>
//   fun g_type_parent(g_type: U64): U64 =>
//   fun g_type_depth(g_type: U64): U32 =>
//   fun g_type_next_base(leaftype: U64, roottype: U64): U64 =>
//   fun g_type_is_a(g_type: U64, isatype: U64): I32 =>
//   fun g_type_class_ref(g_type: U64): Pointer[None] =>
//   fun g_type_class_peek(g_type: U64): Pointer[None] =>
//   fun g_type_class_peek_static(g_type: U64): Pointer[None] =>
//   fun g_type_class_unref(gclass: Pointer[None] tag): None =>
//   fun g_type_class_peek_parent(gclass: Pointer[None] tag): Pointer[None] =>
//   fun g_type_interface_peek(instanceclass: Pointer[None] tag, ifacetype: U64): Pointer[None] =>
//   fun g_type_interface_peek_parent(giface: Pointer[None] tag): Pointer[None] =>
//   fun g_type_default_interface_ref(gtype: U64): Pointer[None] =>
//   fun g_type_default_interface_peek(gtype: U64): Pointer[None] =>
//   fun g_type_default_interface_unref(giface: Pointer[None] tag): None =>
//   fun g_type_children(g_type: U64, nchildren: Pointer[U32] tag): Pointer[U64] =>
//   fun g_type_interfaces(g_type: U64, ninterfaces: Pointer[U32] tag): Pointer[U64] =>
//   fun g_type_set_qdata(g_type: U64, quark: U32, data: Pointer[None] tag): None =>
//   fun g_type_get_qdata(g_type: U64, quark: U32): Pointer[None] =>
//   fun g_type_query(g_type: U64, query: NullablePointer[GTypeQuery] tag): None =>
//   fun g_type_get_instance_count(g_type: U64): I32 =>
//   fun g_type_register_static(parenttype: U64, typename: Pointer[U8] tag, info: NullablePointer[GTypeInfo] tag, flags: I32): U64 =>
//   fun g_type_register_static_simple(parenttype: U64, typename: Pointer[U8] tag, classsize: U32, classinit: NullablePointer[FUNCTIONTYPE] tag, instancesize: U32, instanceinit: NullablePointer[FUNCTIONTYPE] tag, flags: I32): U64 =>
//   fun g_type_register_dynamic(parenttype: U64, typename: Pointer[U8] tag, plugin: NullablePointer[GTypePlugin] tag, flags: I32): U64 =>
//   Original Name: g_type_register_fundamental/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/gobject/gtype.h:1284
//   fun g_type_register_fundamental(typeid: U64, typename: Pointer[U8] tag, info: NullablePointer[GTypeInfo] tag, finfo: NullablePointer[GTypeFundamentalInfo] tag, flags: I32): U64 =>
//     @g_type_register_fundamental(typeid, typename, info, finfo, flags)
//   fun g_type_add_interface_static(instancetype: U64, interfacetype: U64, info: NullablePointer[GInterfaceInfo] tag): None =>
//   fun g_type_add_interface_dynamic(instancetype: U64, interfacetype: U64, plugin: NullablePointer[GTypePlugin] tag): None =>
//   fun g_type_interface_add_prerequisite(interfacetype: U64, prerequisitetype: U64): None =>
//   fun g_type_interface_prerequisites(interfacetype: U64, nprerequisites: Pointer[U32] tag): Pointer[U64] =>
//   fun g_type_interface_instantiatable_prerequisite(interfacetype: U64): U64 =>
//   fun g_type_class_add_private(gclass: Pointer[None] tag, privatesize: U64): None =>
//   fun g_type_add_instance_private(classtype: U64, privatesize: U64): I32 =>
//   fun g_type_instance_get_private(instance: NullablePointer[GTypeInstance] tag, privatetype: U64): Pointer[None] =>
//   fun g_type_class_adjust_private_offset(gclass: Pointer[None] tag, privatesizeoroffset: Pointer[I32] tag): None =>
//   fun g_type_add_class_private(classtype: U64, privatesize: U64): None =>
//   fun g_type_class_get_private(klass: NullablePointer[GTypeClass] tag, privatetype: U64): Pointer[None] =>
//   fun g_type_class_get_instance_private_offset(gclass: Pointer[None] tag): I32 =>
//   fun g_type_ensure(g_type: U64): None =>
//   fun g_type_get_type_registration_serial(): U32 =>
//   fun g_type_get_plugin(g_type: U64): NullablePointer[GTypePlugin] =>
//   fun g_type_interface_get_plugin(instancetype: U64, interfacetype: U64): NullablePointer[GTypePlugin] =>
//   Original Name: g_type_fundamental_next/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/gobject/gtype.h:2232
//   fun g_type_fundamental_next(): U64 =>
//     @g_type_fundamental_next()
//   Original Name: g_type_fundamental/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/gobject/gtype.h:2234
//   fun g_type_fundamental(typeid: U64): U64 =>
//     @g_type_fundamental(typeid)
//   fun g_type_create_instance(g_type: U64): NullablePointer[GTypeInstance] =>
//   fun g_type_free_instance(instance: NullablePointer[GTypeInstance] tag): None =>
//   Original Name: g_type_add_class_cache_func/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/gobject/gtype.h:2241
//   fun g_type_add_class_cache_func(cachedata: Pointer[None] tag, cachefunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_type_add_class_cache_func(cachedata, cachefunc)
//   Original Name: g_type_remove_class_cache_func/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/gobject/gtype.h:2244
//   fun g_type_remove_class_cache_func(cachedata: Pointer[None] tag, cachefunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_type_remove_class_cache_func(cachedata, cachefunc)
//   fun g_type_class_unref_uncached(gclass: Pointer[None] tag): None =>
//   fun g_type_add_interface_check(checkdata: Pointer[None] tag, checkfunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_type_add_interface_check(checkdata, checkfunc)
//   fun g_type_remove_interface_check(checkdata: Pointer[None] tag, checkfunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_type_remove_interface_check(checkdata, checkfunc)
//   fun g_type_value_table_peek(g_type: U64): NullablePointer[GTypeValueTable] =>
//   fun g_type_check_instance(instance: NullablePointer[GTypeInstance] tag): I32 =>
//   fun g_type_check_instance_cast(instance: NullablePointer[GTypeInstance] tag, ifacetype: U64): NullablePointer[GTypeInstance] =>
//   fun g_type_check_instance_is_a(instance: NullablePointer[GTypeInstance] tag, ifacetype: U64): I32 =>
//   Original Name: g_type_check_instance_is_fundamentally_a/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/gobject/gtype.h:2270
//   fun g_type_check_instance_is_fundamentally_a(instance: NullablePointer[GTypeInstance] tag, fundamentaltype: U64): I32 =>
//     @g_type_check_instance_is_fundamentally_a(instance, fundamentaltype)
//   fun g_type_check_class_cast(gclass: NullablePointer[GTypeClass] tag, isatype: U64): NullablePointer[GTypeClass] =>
//   fun g_type_check_class_is_a(gclass: NullablePointer[GTypeClass] tag, isatype: U64): I32 =>
//   fun g_type_check_is_value_type(g_type: U64): I32 =>
//   fun g_type_check_value(value: NullablePointer[GValue] tag): I32 =>
//   fun g_type_check_value_holds(value: NullablePointer[GValue] tag, g_type: U64): I32 =>
//   fun g_type_test_flags(g_type: U64, flags: U32): I32 =>
//   fun g_type_name_from_instance(instance: NullablePointer[GTypeInstance] tag): Pointer[U8] =>
//   fun g_type_name_from_class(gclass: NullablePointer[GTypeClass] tag): Pointer[U8] =>
//   fun g_value_init(value: NullablePointer[GValue] tag, gtype: U64): NullablePointer[GValue] =>
//   fun g_value_copy(srcvalue: NullablePointer[GValue] tag, destvalue: NullablePointer[GValue] tag): None =>
//   fun g_value_reset(value: NullablePointer[GValue] tag): NullablePointer[GValue] =>
//   fun g_value_unset(value: NullablePointer[GValue] tag): None =>
//   fun g_value_set_instance(value: NullablePointer[GValue] tag, instance: Pointer[None] tag): None =>
//   fun g_value_init_from_instance(value: NullablePointer[GValue] tag, instance: Pointer[None] tag): None =>
//   fun g_value_fits_pointer(value: NullablePointer[GValue] tag): I32 =>
//   fun g_value_peek_pointer(value: NullablePointer[GValue] tag): Pointer[None] =>
//   fun g_value_type_compatible(srctype: U64, desttype: U64): I32 =>
//   fun g_value_type_transformable(srctype: U64, desttype: U64): I32 =>
//   fun g_value_transform(srcvalue: NullablePointer[GValue] tag, destvalue: NullablePointer[GValue] tag): I32 =>
//   Original Name: g_value_register_transform_func/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/gobject/gvalue.h:165
//   fun g_value_register_transform_func(srctype: U64, desttype: U64, transformfunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_value_register_transform_func(srctype, desttype, transformfunc)
//   fun g_param_spec_ref(pspec: NullablePointer[GParamSpec] tag): NullablePointer[GParamSpec] =>
//   fun g_param_spec_unref(pspec: NullablePointer[GParamSpec] tag): None =>
//   fun g_param_spec_sink(pspec: NullablePointer[GParamSpec] tag): None =>
//   fun g_param_spec_ref_sink(pspec: NullablePointer[GParamSpec] tag): NullablePointer[GParamSpec] =>
//   fun g_param_spec_get_qdata(pspec: NullablePointer[GParamSpec] tag, quark: U32): Pointer[None] =>
//   fun g_param_spec_set_qdata(pspec: NullablePointer[GParamSpec] tag, quark: U32, data: Pointer[None] tag): None =>
//   fun g_param_spec_set_qdata_full(pspec: NullablePointer[GParamSpec] tag, quark: U32, data: Pointer[None] tag, destroy: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_param_spec_steal_qdata(pspec: NullablePointer[GParamSpec] tag, quark: U32): Pointer[None] =>
//   fun g_param_spec_get_redirect_target(pspec: NullablePointer[GParamSpec] tag): NullablePointer[GParamSpec] =>
//   fun g_param_value_set_default(pspec: NullablePointer[GParamSpec] tag, value: NullablePointer[GValue] tag): None =>
//   fun g_param_value_defaults(pspec: NullablePointer[GParamSpec] tag, value: NullablePointer[GValue] tag): I32 =>
//   fun g_param_value_validate(pspec: NullablePointer[GParamSpec] tag, value: NullablePointer[GValue] tag): I32 =>
//   fun g_param_value_convert(pspec: NullablePointer[GParamSpec] tag, srcvalue: NullablePointer[GValue] tag, destvalue: NullablePointer[GValue] tag, strictvalidation: I32): I32 =>
//   fun g_param_values_cmp(pspec: NullablePointer[GParamSpec] tag, value1: NullablePointer[GValue] tag, value2: NullablePointer[GValue] tag): I32 =>
//   fun g_param_spec_get_name(pspec: NullablePointer[GParamSpec] tag): Pointer[U8] =>
//   fun g_param_spec_get_nick(pspec: NullablePointer[GParamSpec] tag): Pointer[U8] =>
//   fun g_param_spec_get_blurb(pspec: NullablePointer[GParamSpec] tag): Pointer[U8] =>
//   fun g_value_set_param(value: NullablePointer[GValue] tag, param: NullablePointer[GParamSpec] tag): None =>
//   fun g_value_get_param(value: NullablePointer[GValue] tag): NullablePointer[GParamSpec] =>
//   fun g_value_dup_param(value: NullablePointer[GValue] tag): NullablePointer[GParamSpec] =>
//   fun g_value_take_param(value: NullablePointer[GValue] tag, param: NullablePointer[GParamSpec] tag): None =>
//   fun g_value_set_param_take_ownership(value: NullablePointer[GValue] tag, param: NullablePointer[GParamSpec] tag): None =>
//   fun g_param_spec_get_default_value(pspec: NullablePointer[GParamSpec] tag): NullablePointer[GValue] =>
//   fun g_param_spec_get_name_quark(pspec: NullablePointer[GParamSpec] tag): U32 =>
//   fun g_param_type_register_static(name: Pointer[U8] tag, pspecinfo: NullablePointer[GParamSpecTypeInfo] tag): U64 =>
//   fun g_param_spec_is_valid_name(name: Pointer[U8] tag): I32 =>
//   fun _g_param_type_register_static_constant(name: Pointer[U8] tag, pspecinfo: NullablePointer[GParamSpecTypeInfo] tag, opttype: U64): U64 =>
//   fun g_param_spec_internal(paramtype: U64, name: Pointer[U8] tag, nick: Pointer[U8] tag, blurb: Pointer[U8] tag, flags: I32): Pointer[None] =>
//   fun g_param_spec_pool_new(typeprefixing: I32): NullablePointer[GParamSpecPool] =>
//   fun g_param_spec_pool_insert(pool: NullablePointer[GParamSpecPool] tag, pspec: NullablePointer[GParamSpec] tag, ownertype: U64): None =>
//   fun g_param_spec_pool_remove(pool: NullablePointer[GParamSpecPool] tag, pspec: NullablePointer[GParamSpec] tag): None =>
//   fun g_param_spec_pool_lookup(pool: NullablePointer[GParamSpecPool] tag, paramname: Pointer[U8] tag, ownertype: U64, walkancestors: I32): NullablePointer[GParamSpec] =>
//   fun g_param_spec_pool_list_owned(pool: NullablePointer[GParamSpecPool] tag, ownertype: U64): NullablePointer[GList] =>
//   fun g_param_spec_pool_list(pool: NullablePointer[GParamSpecPool] tag, ownertype: U64, npspecsp: Pointer[U32] tag): NullablePointer[NullablePointer[GParamSpec]] =>
//   fun g_cclosure_new(callbackfunc: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, destroydata: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[GClosure] =>
//     @g_cclosure_new(callbackfunc, userdata, destroydata)
//   fun g_cclosure_new_swap(callbackfunc: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, destroydata: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[GClosure] =>
//     @g_cclosure_new_swap(callbackfunc, userdata, destroydata)
//   fun g_signal_type_cclosure_new(itype: U64, structoffset: U32): NullablePointer[GClosure] =>
//   fun g_closure_ref(closure: NullablePointer[GClosure] tag): NullablePointer[GClosure] =>
//   fun g_closure_sink(closure: NullablePointer[GClosure] tag): None =>
//   fun g_closure_unref(closure: NullablePointer[GClosure] tag): None =>
//   fun g_closure_new_simple(sizeofclosure: U32, data: Pointer[None] tag): NullablePointer[GClosure] =>
//   fun g_closure_add_finalize_notifier(closure: NullablePointer[GClosure] tag, notifydata: Pointer[None] tag, notifyfunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_closure_add_finalize_notifier(closure, notifydata, notifyfunc)
//   fun g_closure_remove_finalize_notifier(closure: NullablePointer[GClosure] tag, notifydata: Pointer[None] tag, notifyfunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_closure_remove_finalize_notifier(closure, notifydata, notifyfunc)
//   fun g_closure_add_invalidate_notifier(closure: NullablePointer[GClosure] tag, notifydata: Pointer[None] tag, notifyfunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_closure_add_invalidate_notifier(closure, notifydata, notifyfunc)
//   fun g_closure_remove_invalidate_notifier(closure: NullablePointer[GClosure] tag, notifydata: Pointer[None] tag, notifyfunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_closure_remove_invalidate_notifier(closure, notifydata, notifyfunc)
//   fun g_closure_add_marshal_guards(closure: NullablePointer[GClosure] tag, premarshaldata: Pointer[None] tag, premarshalnotify: NullablePointer[FUNCTIONTYPE] tag, postmarshaldata: Pointer[None] tag, postmarshalnotify: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_closure_set_marshal(closure: NullablePointer[GClosure] tag, marshal: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_closure_set_meta_marshal(closure: NullablePointer[GClosure] tag, marshaldata: Pointer[None] tag, metamarshal: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_closure_invalidate(closure: NullablePointer[GClosure] tag): None =>
//   fun g_closure_invoke(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, nparamvalues: U32, paramvalues: NullablePointer[GValue] tag, invocationhint: Pointer[None] tag): None =>
//   fun g_cclosure_marshal_generic(closure: NullablePointer[GClosure] tag, returngvalue: NullablePointer[GValue] tag, nparamvalues: U32, paramvalues: NullablePointer[GValue] tag, invocationhint: Pointer[None] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_cclosure_marshal_generic_va(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, instance: Pointer[None] tag, argslist: NullablePointer[Valisttag] tag, marshaldata: Pointer[None] tag, nparams: I32, paramtypes: Pointer[U64] tag): None =>
//   fun g_cclosure_marshal_VOID__VOID(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, nparamvalues: U32, paramvalues: NullablePointer[GValue] tag, invocationhint: Pointer[None] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_cclosure_marshal_VOID__VOIDv(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, instance: Pointer[None] tag, args: NullablePointer[Valisttag] tag, marshaldata: Pointer[None] tag, nparams: I32, paramtypes: Pointer[U64] tag): None =>
//   fun g_cclosure_marshal_VOID__BOOLEAN(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, nparamvalues: U32, paramvalues: NullablePointer[GValue] tag, invocationhint: Pointer[None] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_cclosure_marshal_VOID__BOOLEANv(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, instance: Pointer[None] tag, args: NullablePointer[Valisttag] tag, marshaldata: Pointer[None] tag, nparams: I32, paramtypes: Pointer[U64] tag): None =>
//   fun g_cclosure_marshal_VOID__CHAR(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, nparamvalues: U32, paramvalues: NullablePointer[GValue] tag, invocationhint: Pointer[None] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_cclosure_marshal_VOID__CHARv(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, instance: Pointer[None] tag, args: NullablePointer[Valisttag] tag, marshaldata: Pointer[None] tag, nparams: I32, paramtypes: Pointer[U64] tag): None =>
//   fun g_cclosure_marshal_VOID__UCHAR(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, nparamvalues: U32, paramvalues: NullablePointer[GValue] tag, invocationhint: Pointer[None] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_cclosure_marshal_VOID__UCHARv(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, instance: Pointer[None] tag, args: NullablePointer[Valisttag] tag, marshaldata: Pointer[None] tag, nparams: I32, paramtypes: Pointer[U64] tag): None =>
//   fun g_cclosure_marshal_VOID__INT(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, nparamvalues: U32, paramvalues: NullablePointer[GValue] tag, invocationhint: Pointer[None] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_cclosure_marshal_VOID__INTv(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, instance: Pointer[None] tag, args: NullablePointer[Valisttag] tag, marshaldata: Pointer[None] tag, nparams: I32, paramtypes: Pointer[U64] tag): None =>
//   fun g_cclosure_marshal_VOID__UINT(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, nparamvalues: U32, paramvalues: NullablePointer[GValue] tag, invocationhint: Pointer[None] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_cclosure_marshal_VOID__UINTv(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, instance: Pointer[None] tag, args: NullablePointer[Valisttag] tag, marshaldata: Pointer[None] tag, nparams: I32, paramtypes: Pointer[U64] tag): None =>
//   fun g_cclosure_marshal_VOID__LONG(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, nparamvalues: U32, paramvalues: NullablePointer[GValue] tag, invocationhint: Pointer[None] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_cclosure_marshal_VOID__LONGv(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, instance: Pointer[None] tag, args: NullablePointer[Valisttag] tag, marshaldata: Pointer[None] tag, nparams: I32, paramtypes: Pointer[U64] tag): None =>
//   fun g_cclosure_marshal_VOID__ULONG(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, nparamvalues: U32, paramvalues: NullablePointer[GValue] tag, invocationhint: Pointer[None] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_cclosure_marshal_VOID__ULONGv(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, instance: Pointer[None] tag, args: NullablePointer[Valisttag] tag, marshaldata: Pointer[None] tag, nparams: I32, paramtypes: Pointer[U64] tag): None =>
//   fun g_cclosure_marshal_VOID__ENUM(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, nparamvalues: U32, paramvalues: NullablePointer[GValue] tag, invocationhint: Pointer[None] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_cclosure_marshal_VOID__ENUMv(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, instance: Pointer[None] tag, args: NullablePointer[Valisttag] tag, marshaldata: Pointer[None] tag, nparams: I32, paramtypes: Pointer[U64] tag): None =>
//   fun g_cclosure_marshal_VOID__FLAGS(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, nparamvalues: U32, paramvalues: NullablePointer[GValue] tag, invocationhint: Pointer[None] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_cclosure_marshal_VOID__FLAGSv(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, instance: Pointer[None] tag, args: NullablePointer[Valisttag] tag, marshaldata: Pointer[None] tag, nparams: I32, paramtypes: Pointer[U64] tag): None =>
//   fun g_cclosure_marshal_VOID__FLOAT(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, nparamvalues: U32, paramvalues: NullablePointer[GValue] tag, invocationhint: Pointer[None] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_cclosure_marshal_VOID__FLOATv(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, instance: Pointer[None] tag, args: NullablePointer[Valisttag] tag, marshaldata: Pointer[None] tag, nparams: I32, paramtypes: Pointer[U64] tag): None =>
//   fun g_cclosure_marshal_VOID__DOUBLE(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, nparamvalues: U32, paramvalues: NullablePointer[GValue] tag, invocationhint: Pointer[None] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_cclosure_marshal_VOID__DOUBLEv(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, instance: Pointer[None] tag, args: NullablePointer[Valisttag] tag, marshaldata: Pointer[None] tag, nparams: I32, paramtypes: Pointer[U64] tag): None =>
//   fun g_cclosure_marshal_VOID__STRING(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, nparamvalues: U32, paramvalues: NullablePointer[GValue] tag, invocationhint: Pointer[None] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_cclosure_marshal_VOID__STRINGv(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, instance: Pointer[None] tag, args: NullablePointer[Valisttag] tag, marshaldata: Pointer[None] tag, nparams: I32, paramtypes: Pointer[U64] tag): None =>
//   fun g_cclosure_marshal_VOID__PARAM(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, nparamvalues: U32, paramvalues: NullablePointer[GValue] tag, invocationhint: Pointer[None] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_cclosure_marshal_VOID__PARAMv(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, instance: Pointer[None] tag, args: NullablePointer[Valisttag] tag, marshaldata: Pointer[None] tag, nparams: I32, paramtypes: Pointer[U64] tag): None =>
//   fun g_cclosure_marshal_VOID__BOXED(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, nparamvalues: U32, paramvalues: NullablePointer[GValue] tag, invocationhint: Pointer[None] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_cclosure_marshal_VOID__BOXEDv(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, instance: Pointer[None] tag, args: NullablePointer[Valisttag] tag, marshaldata: Pointer[None] tag, nparams: I32, paramtypes: Pointer[U64] tag): None =>
//   fun g_cclosure_marshal_VOID__POINTER(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, nparamvalues: U32, paramvalues: NullablePointer[GValue] tag, invocationhint: Pointer[None] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_cclosure_marshal_VOID__POINTERv(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, instance: Pointer[None] tag, args: NullablePointer[Valisttag] tag, marshaldata: Pointer[None] tag, nparams: I32, paramtypes: Pointer[U64] tag): None =>
//   fun g_cclosure_marshal_VOID__OBJECT(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, nparamvalues: U32, paramvalues: NullablePointer[GValue] tag, invocationhint: Pointer[None] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_cclosure_marshal_VOID__OBJECTv(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, instance: Pointer[None] tag, args: NullablePointer[Valisttag] tag, marshaldata: Pointer[None] tag, nparams: I32, paramtypes: Pointer[U64] tag): None =>
//   fun g_cclosure_marshal_VOID__VARIANT(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, nparamvalues: U32, paramvalues: NullablePointer[GValue] tag, invocationhint: Pointer[None] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_cclosure_marshal_VOID__VARIANTv(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, instance: Pointer[None] tag, args: NullablePointer[Valisttag] tag, marshaldata: Pointer[None] tag, nparams: I32, paramtypes: Pointer[U64] tag): None =>
//   fun g_cclosure_marshal_VOID__UINT_POINTER(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, nparamvalues: U32, paramvalues: NullablePointer[GValue] tag, invocationhint: Pointer[None] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_cclosure_marshal_VOID__UINT_POINTERv(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, instance: Pointer[None] tag, args: NullablePointer[Valisttag] tag, marshaldata: Pointer[None] tag, nparams: I32, paramtypes: Pointer[U64] tag): None =>
//   fun g_cclosure_marshal_BOOLEAN__FLAGS(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, nparamvalues: U32, paramvalues: NullablePointer[GValue] tag, invocationhint: Pointer[None] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_cclosure_marshal_BOOLEAN__FLAGSv(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, instance: Pointer[None] tag, args: NullablePointer[Valisttag] tag, marshaldata: Pointer[None] tag, nparams: I32, paramtypes: Pointer[U64] tag): None =>
//   fun g_cclosure_marshal_STRING__OBJECT_POINTER(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, nparamvalues: U32, paramvalues: NullablePointer[GValue] tag, invocationhint: Pointer[None] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_cclosure_marshal_STRING__OBJECT_POINTERv(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, instance: Pointer[None] tag, args: NullablePointer[Valisttag] tag, marshaldata: Pointer[None] tag, nparams: I32, paramtypes: Pointer[U64] tag): None =>
//   fun g_cclosure_marshal_BOOLEAN__BOXED_BOXED(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, nparamvalues: U32, paramvalues: NullablePointer[GValue] tag, invocationhint: Pointer[None] tag, marshaldata: Pointer[None] tag): None =>
//   fun g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv(closure: NullablePointer[GClosure] tag, returnvalue: NullablePointer[GValue] tag, instance: Pointer[None] tag, args: NullablePointer[Valisttag] tag, marshaldata: Pointer[None] tag, nparams: I32, paramtypes: Pointer[U64] tag): None =>
//   fun g_signal_newv(signalname: Pointer[U8] tag, itype: U64, signalflags: I32, classclosure: NullablePointer[GClosure] tag, accumulator: NullablePointer[FUNCTIONTYPE] tag, accudata: Pointer[None] tag, cmarshaller: NullablePointer[FUNCTIONTYPE] tag, returntype: U64, nparams: U32, paramtypes: Pointer[U64] tag): U32 =>
//   fun g_signal_new_valist(signalname: Pointer[U8] tag, itype: U64, signalflags: I32, classclosure: NullablePointer[GClosure] tag, accumulator: NullablePointer[FUNCTIONTYPE] tag, accudata: Pointer[None] tag, cmarshaller: NullablePointer[FUNCTIONTYPE] tag, returntype: U64, nparams: U32, args: NullablePointer[Valisttag] tag): U32 =>
// /*  fun g_signal_new(signalname: Pointer[U8] tag, itype: U64, signalflags: I32, classoffset: U32, accumulator: NullablePointer[FUNCTIONTYPE] tag, accudata: Pointer[None] tag, cmarshaller: NullablePointer[FUNCTIONTYPE] tag, returntype: U64, nparams: U32, ...): U32 =>
// /*  fun g_signal_new_class_handler(signalname: Pointer[U8] tag, itype: U64, signalflags: I32, classhandler: NullablePointer[FUNCTIONTYPE] tag, accumulator: NullablePointer[FUNCTIONTYPE] tag, accudata: Pointer[None] tag, cmarshaller: NullablePointer[FUNCTIONTYPE] tag, returntype: U64, nparams: U32, ...): U32 =>
//   fun g_signal_set_va_marshaller(signalid: U32, instancetype: U64, vamarshaller: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_signal_emitv(instanceandparams: NullablePointer[GValue] tag, signalid: U32, detail: U32, returnvalue: NullablePointer[GValue] tag): None =>
//   fun g_signal_emit_valist(instance: Pointer[None] tag, signalid: U32, detail: U32, varargs: NullablePointer[Valisttag] tag): None =>
// /*  fun g_signal_emit(instance: Pointer[None] tag, signalid: U32, detail: U32, ...): None =>
// /*  fun g_signal_emit_by_name(instance: Pointer[None] tag, detailedsignal: Pointer[U8] tag, ...): None =>
//   fun g_signal_lookup(name: Pointer[U8] tag, itype: U64): U32 =>
//   fun g_signal_name(signalid: U32): Pointer[U8] =>
//   fun g_signal_query(signalid: U32, query: NullablePointer[GSignalQuery] tag): None =>
//   fun g_signal_list_ids(itype: U64, nids: Pointer[U32] tag): Pointer[U32] =>
//   fun g_signal_is_valid_name(name: Pointer[U8] tag): I32 =>
//   fun g_signal_parse_name(detailedsignal: Pointer[U8] tag, itype: U64, signalidp: Pointer[U32] tag, detailp: Pointer[U32] tag, forcedetailquark: I32): I32 =>
//   fun g_signal_get_invocation_hint(instance: Pointer[None] tag): NullablePointer[GSignalInvocationHint] =>
//   fun g_signal_stop_emission(instance: Pointer[None] tag, signalid: U32, detail: U32): None =>
//   fun g_signal_stop_emission_by_name(instance: Pointer[None] tag, detailedsignal: Pointer[U8] tag): None =>
//   fun g_signal_add_emission_hook(signalid: U32, detail: U32, hookfunc: NullablePointer[FUNCTIONTYPE] tag, hookdata: Pointer[None] tag, datadestroy: NullablePointer[FUNCTIONTYPE] tag): U64 =>
//     @g_signal_add_emission_hook(signalid, detail, hookfunc, hookdata, datadestroy)
//   fun g_signal_remove_emission_hook(signalid: U32, hookid: U64): None =>
//   fun g_signal_has_handler_pending(instance: Pointer[None] tag, signalid: U32, detail: U32, maybeblocked: I32): I32 =>
//   fun g_signal_connect_closure_by_id(instance: Pointer[None] tag, signalid: U32, detail: U32, closure: NullablePointer[GClosure] tag, after: I32): U64 =>
//   fun g_signal_connect_closure(instance: Pointer[None] tag, detailedsignal: Pointer[U8] tag, closure: NullablePointer[GClosure] tag, after: I32): U64 =>
//   fun g_signal_connect_data(instance: Pointer[None] tag, detailedsignal: Pointer[U8] tag, chandler: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag, destroydata: NullablePointer[FUNCTIONTYPE] tag, connectflags: I32): U64 =>
//   fun g_signal_handler_block(instance: Pointer[None] tag, handlerid: U64): None =>
//   fun g_signal_handler_unblock(instance: Pointer[None] tag, handlerid: U64): None =>
//   fun g_signal_handler_disconnect(instance: Pointer[None] tag, handlerid: U64): None =>
//   fun g_signal_handler_is_connected(instance: Pointer[None] tag, handlerid: U64): I32 =>
//   fun g_signal_handler_find(instance: Pointer[None] tag, mask: I32, signalid: U32, detail: U32, closure: NullablePointer[GClosure] tag, func: Pointer[None] tag, data: Pointer[None] tag): U64 =>
//     @g_signal_handler_find(instance, mask, signalid, detail, closure, func, data)
//   fun g_signal_handlers_block_matched(instance: Pointer[None] tag, mask: I32, signalid: U32, detail: U32, closure: NullablePointer[GClosure] tag, func: Pointer[None] tag, data: Pointer[None] tag): U32 =>
//     @g_signal_handlers_block_matched(instance, mask, signalid, detail, closure, func, data)
//   fun g_signal_handlers_unblock_matched(instance: Pointer[None] tag, mask: I32, signalid: U32, detail: U32, closure: NullablePointer[GClosure] tag, func: Pointer[None] tag, data: Pointer[None] tag): U32 =>
//     @g_signal_handlers_unblock_matched(instance, mask, signalid, detail, closure, func, data)
//   fun g_signal_handlers_disconnect_matched(instance: Pointer[None] tag, mask: I32, signalid: U32, detail: U32, closure: NullablePointer[GClosure] tag, func: Pointer[None] tag, data: Pointer[None] tag): U32 =>
//     @g_signal_handlers_disconnect_matched(instance, mask, signalid, detail, closure, func, data)
//   fun g_clear_signal_handler(handleridptr: Pointer[U64] tag, instance: Pointer[None] tag): None =>
//   fun g_signal_override_class_closure(signalid: U32, instancetype: U64, classclosure: NullablePointer[GClosure] tag): None =>
//   fun g_signal_override_class_handler(signalname: Pointer[U8] tag, instancetype: U64, classhandler: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_signal_chain_from_overridden(instanceandparams: NullablePointer[GValue] tag, returnvalue: NullablePointer[GValue] tag): None =>
// /*  fun g_signal_chain_from_overridden_handler(instance: Pointer[None] tag, ...): None =>
//   fun g_signal_accumulator_true_handled(ihint: NullablePointer[GSignalInvocationHint] tag, returnaccu: NullablePointer[GValue] tag, handlerreturn: NullablePointer[GValue] tag, dummy: Pointer[None] tag): I32 =>
//   fun g_signal_accumulator_first_wins(ihint: NullablePointer[GSignalInvocationHint] tag, returnaccu: NullablePointer[GValue] tag, handlerreturn: NullablePointer[GValue] tag, dummy: Pointer[None] tag): I32 =>
//   fun g_signal_handlers_destroy(instance: Pointer[None] tag): None =>
//   fun _g_signals_destroy(itype: U64): None =>
//   fun g_date_get_type(): U64 =>
//   fun g_strv_get_type(): U64 =>
//   fun g_gstring_get_type(): U64 =>
//   fun g_hash_table_get_type(): U64 =>
//   fun g_array_get_type(): U64 =>
//   fun g_byte_array_get_type(): U64 =>
//   fun g_ptr_array_get_type(): U64 =>
//   fun g_bytes_get_type(): U64 =>
//   fun g_variant_type_get_gtype(): U64 =>
//   fun g_regex_get_type(): U64 =>
//   fun g_match_info_get_type(): U64 =>
//   fun g_error_get_type(): U64 =>
//   fun g_date_time_get_type(): U64 =>
//   fun g_time_zone_get_type(): U64 =>
//   fun g_io_channel_get_type(): U64 =>
//   fun g_io_condition_get_type(): U64 =>
//   fun g_variant_builder_get_type(): U64 =>
//   fun g_variant_dict_get_type(): U64 =>
//   fun g_key_file_get_type(): U64 =>
//   fun g_main_loop_get_type(): U64 =>
//   fun g_main_context_get_type(): U64 =>
//   fun g_source_get_type(): U64 =>
//   fun g_pollfd_get_type(): U64 =>
//   fun g_thread_get_type(): U64 =>
//   fun g_checksum_get_type(): U64 =>
//   fun g_markup_parse_context_get_type(): U64 =>
//   fun g_mapped_file_get_type(): U64 =>
//   fun g_option_group_get_type(): U64 =>
//   fun g_uri_get_type(): U64 =>
//   fun g_tree_get_type(): U64 =>
//   fun g_variant_get_gtype(): U64 =>
//   fun g_boxed_copy(boxedtype: U64, srcboxed: Pointer[None] tag): Pointer[None] =>
//   fun g_boxed_free(boxedtype: U64, boxed: Pointer[None] tag): None =>
//   fun g_value_set_boxed(value: NullablePointer[GValue] tag, vboxed: Pointer[None] tag): None =>
//   fun g_value_set_static_boxed(value: NullablePointer[GValue] tag, vboxed: Pointer[None] tag): None =>
//   fun g_value_take_boxed(value: NullablePointer[GValue] tag, vboxed: Pointer[None] tag): None =>
//   fun g_value_set_boxed_take_ownership(value: NullablePointer[GValue] tag, vboxed: Pointer[None] tag): None =>
//   fun g_value_get_boxed(value: NullablePointer[GValue] tag): Pointer[None] =>
//   fun g_value_dup_boxed(value: NullablePointer[GValue] tag): Pointer[None] =>
//   fun g_boxed_type_register_static(name: Pointer[U8] tag, boxedcopy: NullablePointer[FUNCTIONTYPE] tag, boxedfree: NullablePointer[FUNCTIONTYPE] tag): U64 =>
//   fun g_closure_get_type(): U64 =>
//   fun g_value_get_type(): U64 =>
//   fun g_initially_unowned_get_type(): U64 =>
//   fun g_object_class_install_property(oclass: NullablePointer[GObjectClass] tag, propertyid: U32, pspec: NullablePointer[GParamSpec] tag): None =>
//   fun g_object_class_find_property(oclass: NullablePointer[GObjectClass] tag, propertyname: Pointer[U8] tag): NullablePointer[GParamSpec] =>
//   fun g_object_class_list_properties(oclass: NullablePointer[GObjectClass] tag, nproperties: Pointer[U32] tag): NullablePointer[NullablePointer[GParamSpec]] =>
//   fun g_object_class_override_property(oclass: NullablePointer[GObjectClass] tag, propertyid: U32, name: Pointer[U8] tag): None =>
//   fun g_object_class_install_properties(oclass: NullablePointer[GObjectClass] tag, npspecs: U32, pspecs: NullablePointer[NullablePointer[GParamSpec]] tag): None =>
//   fun g_object_interface_install_property(giface: Pointer[None] tag, pspec: NullablePointer[GParamSpec] tag): None =>
//   fun g_object_interface_find_property(giface: Pointer[None] tag, propertyname: Pointer[U8] tag): NullablePointer[GParamSpec] =>
//   fun g_object_interface_list_properties(giface: Pointer[None] tag, npropertiesp: Pointer[U32] tag): NullablePointer[NullablePointer[GParamSpec]] =>
//   fun g_object_get_type(): U64 =>
// /*  fun g_object_new(objecttype: U64, firstpropertyname: Pointer[U8] tag, ...): Pointer[None] =>
//   fun g_object_new_with_properties(objecttype: U64, nproperties: U32, names: NullablePointer[Pointer[U8]] tag, values: NullablePointer[GValue] tag): NullablePointer[GObject] =>
//   fun g_object_newv(objecttype: U64, nparameters: U32, parameters: NullablePointer[GParameter] tag): Pointer[None] =>
//   fun g_object_new_valist(objecttype: U64, firstpropertyname: Pointer[U8] tag, varargs: NullablePointer[Valisttag] tag): NullablePointer[GObject] =>
// /*  fun g_object_set(g_object: Pointer[None] tag, firstpropertyname: Pointer[U8] tag, ...): None =>
// /*  fun g_object_get(g_object: Pointer[None] tag, firstpropertyname: Pointer[U8] tag, ...): None =>
// /*  fun g_object_connect(g_object: Pointer[None] tag, signalspec: Pointer[U8] tag, ...): Pointer[None] =>
// /*  fun g_object_disconnect(g_object: Pointer[None] tag, signalspec: Pointer[U8] tag, ...): None =>
//   fun g_object_setv(g_object: NullablePointer[GObject] tag, nproperties: U32, names: NullablePointer[Pointer[U8]] tag, values: NullablePointer[GValue] tag): None =>
//   fun g_object_set_valist(g_object: NullablePointer[GObject] tag, firstpropertyname: Pointer[U8] tag, varargs: NullablePointer[Valisttag] tag): None =>
//   fun g_object_getv(g_object: NullablePointer[GObject] tag, nproperties: U32, names: NullablePointer[Pointer[U8]] tag, values: NullablePointer[GValue] tag): None =>
//   fun g_object_get_valist(g_object: NullablePointer[GObject] tag, firstpropertyname: Pointer[U8] tag, varargs: NullablePointer[Valisttag] tag): None =>
//   fun g_object_set_property(g_object: NullablePointer[GObject] tag, propertyname: Pointer[U8] tag, value: NullablePointer[GValue] tag): None =>
//   fun g_object_get_property(g_object: NullablePointer[GObject] tag, propertyname: Pointer[U8] tag, value: NullablePointer[GValue] tag): None =>
//   fun g_object_freeze_notify(g_object: NullablePointer[GObject] tag): None =>
//   fun g_object_notify(g_object: NullablePointer[GObject] tag, propertyname: Pointer[U8] tag): None =>
//   fun g_object_notify_by_pspec(g_object: NullablePointer[GObject] tag, pspec: NullablePointer[GParamSpec] tag): None =>
//   fun g_object_thaw_notify(g_object: NullablePointer[GObject] tag): None =>
//   fun g_object_is_floating(g_object: Pointer[None] tag): I32 =>
//   fun g_object_ref_sink(g_object: Pointer[None] tag): Pointer[None] =>
//   fun g_object_ref(g_object: Pointer[None] tag): Pointer[None] =>
//   fun g_object_unref(g_object: Pointer[None] tag): None =>
//   fun g_object_weak_ref(g_object: NullablePointer[GObject] tag, notify: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag): None =>
//   fun g_object_weak_unref(g_object: NullablePointer[GObject] tag, notify: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag): None =>
//   fun g_object_add_weak_pointer(g_object: NullablePointer[GObject] tag, weakpointerlocation: NullablePointer[Pointer[None]] tag): None =>
//   fun g_object_remove_weak_pointer(g_object: NullablePointer[GObject] tag, weakpointerlocation: NullablePointer[Pointer[None]] tag): None =>
//   fun g_object_add_toggle_ref(g_object: NullablePointer[GObject] tag, notify: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag): None =>
//   fun g_object_remove_toggle_ref(g_object: NullablePointer[GObject] tag, notify: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag): None =>
//   fun g_object_get_qdata(g_object: NullablePointer[GObject] tag, quark: U32): Pointer[None] =>
//   fun g_object_set_qdata(g_object: NullablePointer[GObject] tag, quark: U32, data: Pointer[None] tag): None =>
//   fun g_object_set_qdata_full(g_object: NullablePointer[GObject] tag, quark: U32, data: Pointer[None] tag, destroy: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_object_steal_qdata(g_object: NullablePointer[GObject] tag, quark: U32): Pointer[None] =>
//   fun g_object_dup_qdata(g_object: NullablePointer[GObject] tag, quark: U32, dupfunc: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): Pointer[None] =>
//     @g_object_dup_qdata(g_object, quark, dupfunc, userdata)
//   fun g_object_replace_qdata(g_object: NullablePointer[GObject] tag, quark: U32, oldval: Pointer[None] tag, newval: Pointer[None] tag, destroy: NullablePointer[FUNCTIONTYPE] tag, olddestroy: NullablePointer[NullablePointer[FUNCTIONTYPE]] tag): I32 =>
//   fun g_object_get_data(g_object: NullablePointer[GObject] tag, key: Pointer[U8] tag): Pointer[None] =>
//   fun g_object_set_data(g_object: NullablePointer[GObject] tag, key: Pointer[U8] tag, data: Pointer[None] tag): None =>
//   fun g_object_set_data_full(g_object: NullablePointer[GObject] tag, key: Pointer[U8] tag, data: Pointer[None] tag, destroy: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_object_steal_data(g_object: NullablePointer[GObject] tag, key: Pointer[U8] tag): Pointer[None] =>
//   fun g_object_dup_data(g_object: NullablePointer[GObject] tag, key: Pointer[U8] tag, dupfunc: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): Pointer[None] =>
//     @g_object_dup_data(g_object, key, dupfunc, userdata)
//   fun g_object_replace_data(g_object: NullablePointer[GObject] tag, key: Pointer[U8] tag, oldval: Pointer[None] tag, newval: Pointer[None] tag, destroy: NullablePointer[FUNCTIONTYPE] tag, olddestroy: NullablePointer[NullablePointer[FUNCTIONTYPE]] tag): I32 =>
//   fun g_object_watch_closure(g_object: NullablePointer[GObject] tag, closure: NullablePointer[GClosure] tag): None =>
//   fun g_cclosure_new_object(callbackfunc: NullablePointer[FUNCTIONTYPE] tag, g_object: NullablePointer[GObject] tag): NullablePointer[GClosure] =>
//     @g_cclosure_new_object(callbackfunc, g_object)
//   fun g_cclosure_new_object_swap(callbackfunc: NullablePointer[FUNCTIONTYPE] tag, g_object: NullablePointer[GObject] tag): NullablePointer[GClosure] =>
//     @g_cclosure_new_object_swap(callbackfunc, g_object)
//   fun g_closure_new_object(sizeofclosure: U32, g_object: NullablePointer[GObject] tag): NullablePointer[GClosure] =>
//   fun g_value_set_object(value: NullablePointer[GValue] tag, vobject: Pointer[None] tag): None =>
//   fun g_value_get_object(value: NullablePointer[GValue] tag): Pointer[None] =>
//   fun g_value_dup_object(value: NullablePointer[GValue] tag): Pointer[None] =>
//   fun g_signal_connect_object(instance: Pointer[None] tag, detailedsignal: Pointer[U8] tag, chandler: NullablePointer[FUNCTIONTYPE] tag, gobject: Pointer[None] tag, connectflags: I32): U64 =>
//   fun g_object_force_floating(g_object: NullablePointer[GObject] tag): None =>
//   fun g_object_run_dispose(g_object: NullablePointer[GObject] tag): None =>
//   fun g_value_take_object(value: NullablePointer[GValue] tag, vobject: Pointer[None] tag): None =>
//   fun g_value_set_object_take_ownership(value: NullablePointer[GValue] tag, vobject: Pointer[None] tag): None =>
//   fun g_object_compat_control(what: U64, data: Pointer[None] tag): U64 =>
//   fun g_clear_object(objectptr: NullablePointer[NullablePointer[GObject]] tag): None =>
//   fun g_set_object(objectptr: NullablePointer[NullablePointer[GObject]] tag, newobject: NullablePointer[GObject] tag): I32 =>
//   fun g_assert_finalize_object(g_object: NullablePointer[GObject] tag): None =>
//   fun g_clear_weak_pointer(weakpointerlocation: NullablePointer[Pointer[None]] tag): None =>
//   fun g_set_weak_pointer(weakpointerlocation: NullablePointer[Pointer[None]] tag, newobject: NullablePointer[GObject] tag): I32 =>
//   fun g_weak_ref_init(weakref: Pointer[None], g_object: Pointer[None] tag): None =>
//   fun g_weak_ref_clear(weakref: Pointer[None]): None =>
//   fun g_weak_ref_get(weakref: Pointer[None]): Pointer[None] =>
//   fun g_weak_ref_set(weakref: Pointer[None], g_object: Pointer[None] tag): None =>
//   fun g_binding_flags_get_type(): U64 =>
//   fun g_binding_get_type(): U64 =>
//   fun g_binding_get_flags(binding: NullablePointer[GBinding] tag): I32 =>
//   fun g_binding_get_source(binding: NullablePointer[GBinding] tag): NullablePointer[GObject] =>
//   fun g_binding_dup_source(binding: NullablePointer[GBinding] tag): NullablePointer[GObject] =>
//   fun g_binding_get_target(binding: NullablePointer[GBinding] tag): NullablePointer[GObject] =>
//   fun g_binding_dup_target(binding: NullablePointer[GBinding] tag): NullablePointer[GObject] =>
//   fun g_binding_get_source_property(binding: NullablePointer[GBinding] tag): Pointer[U8] =>
//   fun g_binding_get_target_property(binding: NullablePointer[GBinding] tag): Pointer[U8] =>
//   fun g_binding_unbind(binding: NullablePointer[GBinding] tag): None =>
//   fun g_object_bind_property(source: Pointer[None] tag, sourceproperty: Pointer[U8] tag, target: Pointer[None] tag, targetproperty: Pointer[U8] tag, flags: I32): NullablePointer[GBinding] =>
//   fun g_object_bind_property_full(source: Pointer[None] tag, sourceproperty: Pointer[U8] tag, target: Pointer[None] tag, targetproperty: Pointer[U8] tag, flags: I32, transformto: NullablePointer[FUNCTIONTYPE] tag, transformfrom: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, notify: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[GBinding] =>
//   fun g_object_bind_property_with_closures(source: Pointer[None] tag, sourceproperty: Pointer[U8] tag, target: Pointer[None] tag, targetproperty: Pointer[U8] tag, flags: I32, transformto: NullablePointer[GClosure] tag, transformfrom: NullablePointer[GClosure] tag): NullablePointer[GBinding] =>
//   fun g_enum_get_value(enumclass: NullablePointer[GEnumClass] tag, value: I32): NullablePointer[GEnumValue] =>
//   fun g_enum_get_value_by_name(enumclass: NullablePointer[GEnumClass] tag, name: Pointer[U8] tag): NullablePointer[GEnumValue] =>
//   fun g_enum_get_value_by_nick(enumclass: NullablePointer[GEnumClass] tag, nick: Pointer[U8] tag): NullablePointer[GEnumValue] =>
//   fun g_flags_get_first_value(flagsclass: NullablePointer[GFlagsClass] tag, value: U32): NullablePointer[GFlagsValue] =>
//   fun g_flags_get_value_by_name(flagsclass: NullablePointer[GFlagsClass] tag, name: Pointer[U8] tag): NullablePointer[GFlagsValue] =>
//   fun g_flags_get_value_by_nick(flagsclass: NullablePointer[GFlagsClass] tag, nick: Pointer[U8] tag): NullablePointer[GFlagsValue] =>
//   fun g_enum_to_string(genumtype: U64, value: I32): Pointer[U8] =>
//   fun g_flags_to_string(flagstype: U64, value: U32): Pointer[U8] =>
//   fun g_value_set_enum(value: NullablePointer[GValue] tag, venum: I32): None =>
//   fun g_value_get_enum(value: NullablePointer[GValue] tag): I32 =>
//   fun g_value_set_flags(value: NullablePointer[GValue] tag, vflags: U32): None =>
//   fun g_value_get_flags(value: NullablePointer[GValue] tag): U32 =>
//   fun g_enum_register_static(name: Pointer[U8] tag, conststaticvalues: NullablePointer[GEnumValue] tag): U64 =>
//   fun g_flags_register_static(name: Pointer[U8] tag, conststaticvalues: NullablePointer[GFlagsValue] tag): U64 =>
//   fun g_enum_complete_type_info(genumtype: U64, info: NullablePointer[GTypeInfo] tag, constvalues: NullablePointer[GEnumValue] tag): None =>
//   fun g_flags_complete_type_info(gflagstype: U64, info: NullablePointer[GTypeInfo] tag, constvalues: NullablePointer[GFlagsValue] tag): None =>
//   fun g_unicode_type_get_type(): U64 =>
//   fun g_unicode_break_type_get_type(): U64 =>
//   fun g_unicode_script_get_type(): U64 =>
//   fun g_normalize_mode_get_type(): U64 =>
//   fun g_param_spec_char(name: Pointer[U8] tag, nick: Pointer[U8] tag, blurb: Pointer[U8] tag, minimum: I8, maximum: I8, defaultvalue: I8, flags: I32): NullablePointer[GParamSpec] =>
//   fun g_param_spec_uchar(name: Pointer[U8] tag, nick: Pointer[U8] tag, blurb: Pointer[U8] tag, minimum: U8, maximum: U8, defaultvalue: U8, flags: I32): NullablePointer[GParamSpec] =>
//   fun g_param_spec_boolean(name: Pointer[U8] tag, nick: Pointer[U8] tag, blurb: Pointer[U8] tag, defaultvalue: I32, flags: I32): NullablePointer[GParamSpec] =>
//   fun g_param_spec_int(name: Pointer[U8] tag, nick: Pointer[U8] tag, blurb: Pointer[U8] tag, minimum: I32, maximum: I32, defaultvalue: I32, flags: I32): NullablePointer[GParamSpec] =>
//   fun g_param_spec_uint(name: Pointer[U8] tag, nick: Pointer[U8] tag, blurb: Pointer[U8] tag, minimum: U32, maximum: U32, defaultvalue: U32, flags: I32): NullablePointer[GParamSpec] =>
//   fun g_param_spec_long(name: Pointer[U8] tag, nick: Pointer[U8] tag, blurb: Pointer[U8] tag, minimum: I64, maximum: I64, defaultvalue: I64, flags: I32): NullablePointer[GParamSpec] =>
//   fun g_param_spec_ulong(name: Pointer[U8] tag, nick: Pointer[U8] tag, blurb: Pointer[U8] tag, minimum: U64, maximum: U64, defaultvalue: U64, flags: I32): NullablePointer[GParamSpec] =>
//   fun g_param_spec_int64(name: Pointer[U8] tag, nick: Pointer[U8] tag, blurb: Pointer[U8] tag, minimum: I64, maximum: I64, defaultvalue: I64, flags: I32): NullablePointer[GParamSpec] =>
//   fun g_param_spec_uint64(name: Pointer[U8] tag, nick: Pointer[U8] tag, blurb: Pointer[U8] tag, minimum: U64, maximum: U64, defaultvalue: U64, flags: I32): NullablePointer[GParamSpec] =>
//   fun g_param_spec_unichar(name: Pointer[U8] tag, nick: Pointer[U8] tag, blurb: Pointer[U8] tag, defaultvalue: U32, flags: I32): NullablePointer[GParamSpec] =>
//   fun g_param_spec_enum(name: Pointer[U8] tag, nick: Pointer[U8] tag, blurb: Pointer[U8] tag, enumtype: U64, defaultvalue: I32, flags: I32): NullablePointer[GParamSpec] =>
//   fun g_param_spec_flags(name: Pointer[U8] tag, nick: Pointer[U8] tag, blurb: Pointer[U8] tag, flagstype: U64, defaultvalue: U32, flags: I32): NullablePointer[GParamSpec] =>
//   fun g_param_spec_float(name: Pointer[U8] tag, nick: Pointer[U8] tag, blurb: Pointer[U8] tag, minimum: F32, maximum: F32, defaultvalue: F32, flags: I32): NullablePointer[GParamSpec] =>
//   fun g_param_spec_double(name: Pointer[U8] tag, nick: Pointer[U8] tag, blurb: Pointer[U8] tag, minimum: F64, maximum: F64, defaultvalue: F64, flags: I32): NullablePointer[GParamSpec] =>
//   fun g_param_spec_string(name: Pointer[U8] tag, nick: Pointer[U8] tag, blurb: Pointer[U8] tag, defaultvalue: Pointer[U8] tag, flags: I32): NullablePointer[GParamSpec] =>
//   fun g_param_spec_param(name: Pointer[U8] tag, nick: Pointer[U8] tag, blurb: Pointer[U8] tag, paramtype: U64, flags: I32): NullablePointer[GParamSpec] =>
//   fun g_param_spec_boxed(name: Pointer[U8] tag, nick: Pointer[U8] tag, blurb: Pointer[U8] tag, boxedtype: U64, flags: I32): NullablePointer[GParamSpec] =>
//   fun g_param_spec_pointer(name: Pointer[U8] tag, nick: Pointer[U8] tag, blurb: Pointer[U8] tag, flags: I32): NullablePointer[GParamSpec] =>
//   fun g_param_spec_value_array(name: Pointer[U8] tag, nick: Pointer[U8] tag, blurb: Pointer[U8] tag, elementspec: NullablePointer[GParamSpec] tag, flags: I32): NullablePointer[GParamSpec] =>
//   fun g_param_spec_object(name: Pointer[U8] tag, nick: Pointer[U8] tag, blurb: Pointer[U8] tag, objecttype: U64, flags: I32): NullablePointer[GParamSpec] =>
//   fun g_param_spec_override(name: Pointer[U8] tag, overridden: NullablePointer[GParamSpec] tag): NullablePointer[GParamSpec] =>
//   fun g_param_spec_gtype(name: Pointer[U8] tag, nick: Pointer[U8] tag, blurb: Pointer[U8] tag, isatype: U64, flags: I32): NullablePointer[GParamSpec] =>
//   fun g_param_spec_variant(name: Pointer[U8] tag, nick: Pointer[U8] tag, blurb: Pointer[U8] tag, g_type: NullablePointer[GVariantType] tag, defaultvalue: NullablePointer[GVariant] tag, flags: I32): NullablePointer[GParamSpec] =>
//   fun g_source_set_closure(source: NullablePointer[GSource] tag, closure: NullablePointer[GClosure] tag): None =>
//   fun g_source_set_dummy_callback(source: NullablePointer[GSource] tag): None =>
//   fun glib_autoptr_clear_GTypeModule(ptr: NullablePointer[GTypeModule] tag): None =>
//   fun glib_autoptr_cleanup_GTypeModule(ptr: NullablePointer[NullablePointer[GTypeModule]] tag): None =>
//   fun glib_listautoptr_cleanup_GTypeModule(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GTypeModule(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GTypeModule(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun g_type_module_get_type(): U64 =>
//   fun g_type_module_use(module: NullablePointer[GTypeModule] tag): I32 =>
//   fun g_type_module_unuse(module: NullablePointer[GTypeModule] tag): None =>
//   fun g_type_module_set_name(module: NullablePointer[GTypeModule] tag, name: Pointer[U8] tag): None =>
//   fun g_type_module_register_type(module: NullablePointer[GTypeModule] tag, parenttype: U64, typename: Pointer[U8] tag, typeinfo: NullablePointer[GTypeInfo] tag, flags: I32): U64 =>
//   fun g_type_module_add_interface(module: NullablePointer[GTypeModule] tag, instancetype: U64, interfacetype: U64, interfaceinfo: NullablePointer[GInterfaceInfo] tag): None =>
//   fun g_type_module_register_enum(module: NullablePointer[GTypeModule] tag, name: Pointer[U8] tag, conststaticvalues: NullablePointer[GEnumValue] tag): U64 =>
//   fun g_type_module_register_flags(module: NullablePointer[GTypeModule] tag, name: Pointer[U8] tag, conststaticvalues: NullablePointer[GFlagsValue] tag): U64 =>
//   fun g_type_plugin_get_type(): U64 =>
//   fun g_type_plugin_use(plugin: NullablePointer[GTypePlugin] tag): None =>
//   fun g_type_plugin_unuse(plugin: NullablePointer[GTypePlugin] tag): None =>
//   fun g_type_plugin_complete_type_info(plugin: NullablePointer[GTypePlugin] tag, gtype: U64, info: NullablePointer[GTypeInfo] tag, valuetable: NullablePointer[GTypeValueTable] tag): None =>
//   fun g_type_plugin_complete_interface_info(plugin: NullablePointer[GTypePlugin] tag, instancetype: U64, interfacetype: U64, info: NullablePointer[GInterfaceInfo] tag): None =>
//   fun g_value_array_get_type(): U64 =>
//   fun g_value_array_get_nth(valuearray: NullablePointer[GValueArray] tag, index: U32): NullablePointer[GValue] =>
//   fun g_value_array_new(nprealloced: U32): NullablePointer[GValueArray] =>
//   fun g_value_array_free(valuearray: NullablePointer[GValueArray] tag): None =>
//   fun g_value_array_copy(valuearray: NullablePointer[GValueArray] tag): NullablePointer[GValueArray] =>
//   fun g_value_array_prepend(valuearray: NullablePointer[GValueArray] tag, value: NullablePointer[GValue] tag): NullablePointer[GValueArray] =>
//   fun g_value_array_append(valuearray: NullablePointer[GValueArray] tag, value: NullablePointer[GValue] tag): NullablePointer[GValueArray] =>
//   fun g_value_array_insert(valuearray: NullablePointer[GValueArray] tag, index: U32, value: NullablePointer[GValue] tag): NullablePointer[GValueArray] =>
//   fun g_value_array_remove(valuearray: NullablePointer[GValueArray] tag, index: U32): NullablePointer[GValueArray] =>
//   fun g_value_array_sort(valuearray: NullablePointer[GValueArray] tag, comparefunc: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[GValueArray] =>
//     @g_value_array_sort(valuearray, comparefunc)
//   fun g_value_array_sort_with_data(valuearray: NullablePointer[GValueArray] tag, comparefunc: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): NullablePointer[GValueArray] =>
//     @g_value_array_sort_with_data(valuearray, comparefunc, userdata)
//   fun g_value_set_char(value: NullablePointer[GValue] tag, vchar: U8): None =>
//   fun g_value_get_char(value: NullablePointer[GValue] tag): U8 =>
//   fun g_value_set_schar(value: NullablePointer[GValue] tag, vchar: I8): None =>
//   fun g_value_get_schar(value: NullablePointer[GValue] tag): I8 =>
//   fun g_value_set_uchar(value: NullablePointer[GValue] tag, vuchar: U8): None =>
//   fun g_value_get_uchar(value: NullablePointer[GValue] tag): U8 =>
//   fun g_value_set_boolean(value: NullablePointer[GValue] tag, vboolean: I32): None =>
//   fun g_value_get_boolean(value: NullablePointer[GValue] tag): I32 =>
//   fun g_value_set_int(value: NullablePointer[GValue] tag, vint: I32): None =>
//   fun g_value_get_int(value: NullablePointer[GValue] tag): I32 =>
//   fun g_value_set_uint(value: NullablePointer[GValue] tag, vuint: U32): None =>
//   fun g_value_get_uint(value: NullablePointer[GValue] tag): U32 =>
//   fun g_value_set_long(value: NullablePointer[GValue] tag, vlong: I64): None =>
//   fun g_value_get_long(value: NullablePointer[GValue] tag): I64 =>
//   fun g_value_set_ulong(value: NullablePointer[GValue] tag, vulong: U64): None =>
//   fun g_value_get_ulong(value: NullablePointer[GValue] tag): U64 =>
//   fun g_value_set_int64(value: NullablePointer[GValue] tag, vint64: I64): None =>
//   fun g_value_get_int64(value: NullablePointer[GValue] tag): I64 =>
//   fun g_value_set_uint64(value: NullablePointer[GValue] tag, vuint64: U64): None =>
//   fun g_value_get_uint64(value: NullablePointer[GValue] tag): U64 =>
//   fun g_value_set_float(value: NullablePointer[GValue] tag, vfloat: F32): None =>
//   fun g_value_get_float(value: NullablePointer[GValue] tag): F32 =>
//   fun g_value_set_double(value: NullablePointer[GValue] tag, vdouble: F64): None =>
//   fun g_value_get_double(value: NullablePointer[GValue] tag): F64 =>
//   fun g_value_set_string(value: NullablePointer[GValue] tag, vstring: Pointer[U8] tag): None =>
//   fun g_value_set_static_string(value: NullablePointer[GValue] tag, vstring: Pointer[U8] tag): None =>
//   fun g_value_set_interned_string(value: NullablePointer[GValue] tag, vstring: Pointer[U8] tag): None =>
//   fun g_value_get_string(value: NullablePointer[GValue] tag): Pointer[U8] =>
//   fun g_value_dup_string(value: NullablePointer[GValue] tag): Pointer[U8] =>
//   fun g_value_set_pointer(value: NullablePointer[GValue] tag, vpointer: Pointer[None] tag): None =>
//   fun g_value_get_pointer(value: NullablePointer[GValue] tag): Pointer[None] =>
//   fun g_gtype_get_type(): U64 =>
//   fun g_value_set_gtype(value: NullablePointer[GValue] tag, vgtype: U64): None =>
//   fun g_value_get_gtype(value: NullablePointer[GValue] tag): U64 =>
//   fun g_value_set_variant(value: NullablePointer[GValue] tag, variant: NullablePointer[GVariant] tag): None =>
//   fun g_value_take_variant(value: NullablePointer[GValue] tag, variant: NullablePointer[GVariant] tag): None =>
//   fun g_value_get_variant(value: NullablePointer[GValue] tag): NullablePointer[GVariant] =>
//   fun g_value_dup_variant(value: NullablePointer[GValue] tag): NullablePointer[GVariant] =>
//   fun g_pointer_type_register_static(name: Pointer[U8] tag): U64 =>
//   fun g_strdup_value_contents(value: NullablePointer[GValue] tag): Pointer[U8] =>
//   fun g_value_take_string(value: NullablePointer[GValue] tag, vstring: Pointer[U8] tag): None =>
//   fun g_value_set_string_take_ownership(value: NullablePointer[GValue] tag, vstring: Pointer[U8] tag): None =>
//   fun glib_autoptr_clear_GClosure(ptr: NullablePointer[GClosure] tag): None =>
//   fun glib_autoptr_cleanup_GClosure(ptr: NullablePointer[NullablePointer[GClosure]] tag): None =>
//   fun glib_listautoptr_cleanup_GClosure(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GClosure(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GClosure(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GEnumClass(ptr: NullablePointer[GEnumClass] tag): None =>
//   fun glib_autoptr_cleanup_GEnumClass(ptr: NullablePointer[NullablePointer[GEnumClass]] tag): None =>
//   fun glib_listautoptr_cleanup_GEnumClass(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GEnumClass(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GEnumClass(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GFlagsClass(ptr: NullablePointer[GFlagsClass] tag): None =>
//   fun glib_autoptr_cleanup_GFlagsClass(ptr: NullablePointer[NullablePointer[GFlagsClass]] tag): None =>
//   fun glib_listautoptr_cleanup_GFlagsClass(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GFlagsClass(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GFlagsClass(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GObject(ptr: NullablePointer[GObject] tag): None =>
//   fun glib_autoptr_cleanup_GObject(ptr: NullablePointer[NullablePointer[GObject]] tag): None =>
//   fun glib_listautoptr_cleanup_GObject(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GObject(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GObject(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GInitiallyUnowned(ptr: NullablePointer[GObject] tag): None =>
//   fun glib_autoptr_cleanup_GInitiallyUnowned(ptr: NullablePointer[NullablePointer[GObject]] tag): None =>
//   fun glib_listautoptr_cleanup_GInitiallyUnowned(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GInitiallyUnowned(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GInitiallyUnowned(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GParamSpec(ptr: NullablePointer[GParamSpec] tag): None =>
//   fun glib_autoptr_cleanup_GParamSpec(ptr: NullablePointer[NullablePointer[GParamSpec]] tag): None =>
//   fun glib_listautoptr_cleanup_GParamSpec(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GParamSpec(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GParamSpec(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GTypeClass(ptr: NullablePointer[GTypeClass] tag): None =>
//   fun glib_autoptr_cleanup_GTypeClass(ptr: NullablePointer[NullablePointer[GTypeClass]] tag): None =>
//   fun glib_listautoptr_cleanup_GTypeClass(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GTypeClass(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GTypeClass(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_auto_cleanup_GValue(ptr: NullablePointer[GValue] tag): None =>
//   fun g_app_info_get_type(): U64 =>
//   fun g_app_info_create_from_commandline(commandline: Pointer[U8] tag, applicationname: Pointer[U8] tag, flags: I32, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GAppInfo] =>
//   fun g_app_info_dup(appinfo: NullablePointer[GAppInfo] tag): NullablePointer[GAppInfo] =>
//   fun g_app_info_equal(appinfo1: NullablePointer[GAppInfo] tag, appinfo2: NullablePointer[GAppInfo] tag): I32 =>
//   fun g_app_info_get_id(appinfo: NullablePointer[GAppInfo] tag): Pointer[U8] =>
//   fun g_app_info_get_name(appinfo: NullablePointer[GAppInfo] tag): Pointer[U8] =>
//   fun g_app_info_get_display_name(appinfo: NullablePointer[GAppInfo] tag): Pointer[U8] =>
//   fun g_app_info_get_description(appinfo: NullablePointer[GAppInfo] tag): Pointer[U8] =>
//   fun g_app_info_get_executable(appinfo: NullablePointer[GAppInfo] tag): Pointer[U8] =>
//   fun g_app_info_get_commandline(appinfo: NullablePointer[GAppInfo] tag): Pointer[U8] =>
//   fun g_app_info_get_icon(appinfo: NullablePointer[GAppInfo] tag): NullablePointer[GIcon] =>
//   fun g_app_info_launch(appinfo: NullablePointer[GAppInfo] tag, files: NullablePointer[GList] tag, context: NullablePointer[GAppLaunchContext] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_app_info_supports_uris(appinfo: NullablePointer[GAppInfo] tag): I32 =>
//   fun g_app_info_supports_files(appinfo: NullablePointer[GAppInfo] tag): I32 =>
//   fun g_app_info_launch_uris(appinfo: NullablePointer[GAppInfo] tag, uris: NullablePointer[GList] tag, context: NullablePointer[GAppLaunchContext] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_app_info_launch_uris_async(appinfo: NullablePointer[GAppInfo] tag, uris: NullablePointer[GList] tag, context: NullablePointer[GAppLaunchContext] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_app_info_launch_uris_finish(appinfo: NullablePointer[GAppInfo] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_app_info_should_show(appinfo: NullablePointer[GAppInfo] tag): I32 =>
//   fun g_app_info_set_as_default_for_type(appinfo: NullablePointer[GAppInfo] tag, contenttype: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_app_info_set_as_default_for_extension(appinfo: NullablePointer[GAppInfo] tag, extension: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_app_info_add_supports_type(appinfo: NullablePointer[GAppInfo] tag, contenttype: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_app_info_can_remove_supports_type(appinfo: NullablePointer[GAppInfo] tag): I32 =>
//   fun g_app_info_remove_supports_type(appinfo: NullablePointer[GAppInfo] tag, contenttype: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_app_info_get_supported_types(appinfo: NullablePointer[GAppInfo] tag): NullablePointer[Pointer[U8]] =>
//   fun g_app_info_can_delete(appinfo: NullablePointer[GAppInfo] tag): I32 =>
//   fun g_app_info_delete(appinfo: NullablePointer[GAppInfo] tag): I32 =>
//   fun g_app_info_set_as_last_used_for_type(appinfo: NullablePointer[GAppInfo] tag, contenttype: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_app_info_get_all(): NullablePointer[GList] =>
//   fun g_app_info_get_all_for_type(contenttype: Pointer[U8] tag): NullablePointer[GList] =>
//   fun g_app_info_get_recommended_for_type(contenttype: Pointer[U8] tag): NullablePointer[GList] =>
//   fun g_app_info_get_fallback_for_type(contenttype: Pointer[U8] tag): NullablePointer[GList] =>
//   fun g_app_info_reset_type_associations(contenttype: Pointer[U8] tag): None =>
//   fun g_app_info_get_default_for_type(contenttype: Pointer[U8] tag, mustsupporturis: I32): NullablePointer[GAppInfo] =>
//   fun g_app_info_get_default_for_uri_scheme(urischeme: Pointer[U8] tag): NullablePointer[GAppInfo] =>
//   fun g_app_info_launch_default_for_uri(uri: Pointer[U8] tag, context: NullablePointer[GAppLaunchContext] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_app_info_launch_default_for_uri_async(uri: Pointer[U8] tag, context: NullablePointer[GAppLaunchContext] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_app_info_launch_default_for_uri_finish(result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_app_launch_context_get_type(): U64 =>
//   fun g_app_launch_context_new(): NullablePointer[GAppLaunchContext] =>
//   fun g_app_launch_context_setenv(context: NullablePointer[GAppLaunchContext] tag, variable: Pointer[U8] tag, value: Pointer[U8] tag): None =>
//   fun g_app_launch_context_unsetenv(context: NullablePointer[GAppLaunchContext] tag, variable: Pointer[U8] tag): None =>
//   fun g_app_launch_context_get_environment(context: NullablePointer[GAppLaunchContext] tag): NullablePointer[Pointer[U8]] =>
//   fun g_app_launch_context_get_display(context: NullablePointer[GAppLaunchContext] tag, info: NullablePointer[GAppInfo] tag, files: NullablePointer[GList] tag): Pointer[U8] =>
//   fun g_app_launch_context_get_startup_notify_id(context: NullablePointer[GAppLaunchContext] tag, info: NullablePointer[GAppInfo] tag, files: NullablePointer[GList] tag): Pointer[U8] =>
//   fun g_app_launch_context_launch_failed(context: NullablePointer[GAppLaunchContext] tag, startupnotifyid: Pointer[U8] tag): None =>
//   fun g_app_info_monitor_get_type(): U64 =>
//   fun g_app_info_monitor_get(): NullablePointer[GAppInfoMonitor] =>
//   fun g_buffered_input_stream_get_type(): U64 =>
//   fun g_buffered_input_stream_new(basestream: NullablePointer[GInputStream] tag): NullablePointer[GInputStream] =>
//   fun g_buffered_input_stream_new_sized(basestream: NullablePointer[GInputStream] tag, size: U64): NullablePointer[GInputStream] =>
//   fun g_buffered_input_stream_get_buffer_size(stream: NullablePointer[GBufferedInputStream] tag): U64 =>
//   fun g_buffered_input_stream_set_buffer_size(stream: NullablePointer[GBufferedInputStream] tag, size: U64): None =>
//   fun g_buffered_input_stream_get_available(stream: NullablePointer[GBufferedInputStream] tag): U64 =>
//   fun g_buffered_input_stream_peek(stream: NullablePointer[GBufferedInputStream] tag, buffer: Pointer[None] tag, offset: U64, count: U64): U64 =>
//   fun g_buffered_input_stream_peek_buffer(stream: NullablePointer[GBufferedInputStream] tag, count: Pointer[U64] tag): Pointer[None] =>
//   fun g_buffered_input_stream_fill(stream: NullablePointer[GBufferedInputStream] tag, count: I64, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_buffered_input_stream_fill_async(stream: NullablePointer[GBufferedInputStream] tag, count: I64, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_buffered_input_stream_fill_finish(stream: NullablePointer[GBufferedInputStream] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_buffered_input_stream_read_byte(stream: NullablePointer[GBufferedInputStream] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_buffered_output_stream_get_type(): U64 =>
//   fun g_buffered_output_stream_new(basestream: NullablePointer[GOutputStream] tag): NullablePointer[GOutputStream] =>
//   fun g_buffered_output_stream_new_sized(basestream: NullablePointer[GOutputStream] tag, size: U64): NullablePointer[GOutputStream] =>
//   fun g_buffered_output_stream_get_buffer_size(stream: NullablePointer[GBufferedOutputStream] tag): U64 =>
//   fun g_buffered_output_stream_set_buffer_size(stream: NullablePointer[GBufferedOutputStream] tag, size: U64): None =>
//   fun g_buffered_output_stream_get_auto_grow(stream: NullablePointer[GBufferedOutputStream] tag): I32 =>
//   fun g_buffered_output_stream_set_auto_grow(stream: NullablePointer[GBufferedOutputStream] tag, autogrow: I32): None =>
//   fun g_cancellable_get_type(): U64 =>
//   fun g_cancellable_new(): NullablePointer[GCancellable] =>
//   fun g_cancellable_is_cancelled(cancellable: NullablePointer[GCancellable] tag): I32 =>
//   fun g_cancellable_set_error_if_cancelled(cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_cancellable_get_fd(cancellable: NullablePointer[GCancellable] tag): I32 =>
//   fun g_cancellable_make_pollfd(cancellable: NullablePointer[GCancellable] tag, pollfd: NullablePointer[GPollFD] tag): I32 =>
//   fun g_cancellable_release_fd(cancellable: NullablePointer[GCancellable] tag): None =>
//   fun g_cancellable_source_new(cancellable: NullablePointer[GCancellable] tag): NullablePointer[GSource] =>
//   fun g_cancellable_get_current(): NullablePointer[GCancellable] =>
//   fun g_cancellable_push_current(cancellable: NullablePointer[GCancellable] tag): None =>
//   fun g_cancellable_pop_current(cancellable: NullablePointer[GCancellable] tag): None =>
//   fun g_cancellable_reset(cancellable: NullablePointer[GCancellable] tag): None =>
//   fun g_cancellable_connect(cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, data: Pointer[None] tag, datadestroyfunc: NullablePointer[FUNCTIONTYPE] tag): U64 =>
//     @g_cancellable_connect(cancellable, callback, data, datadestroyfunc)
//   fun g_cancellable_disconnect(cancellable: NullablePointer[GCancellable] tag, handlerid: U64): None =>
//   fun g_cancellable_cancel(cancellable: NullablePointer[GCancellable] tag): None =>
//   fun g_converter_input_stream_get_type(): U64 =>
//   fun g_converter_input_stream_new(basestream: NullablePointer[GInputStream] tag, converter: NullablePointer[GConverter] tag): NullablePointer[GInputStream] =>
//   fun g_converter_input_stream_get_converter(converterstream: NullablePointer[GConverterInputStream] tag): NullablePointer[GConverter] =>
//   fun g_converter_output_stream_get_type(): U64 =>
//   fun g_converter_output_stream_new(basestream: NullablePointer[GOutputStream] tag, converter: NullablePointer[GConverter] tag): NullablePointer[GOutputStream] =>
//   fun g_converter_output_stream_get_converter(converterstream: NullablePointer[GConverterOutputStream] tag): NullablePointer[GConverter] =>
//   fun g_data_input_stream_get_type(): U64 =>
//   fun g_data_input_stream_new(basestream: NullablePointer[GInputStream] tag): NullablePointer[GDataInputStream] =>
//   fun g_data_input_stream_set_byte_order(stream: NullablePointer[GDataInputStream] tag, order: I32): None =>
//   fun g_data_input_stream_get_byte_order(stream: NullablePointer[GDataInputStream] tag): I32 =>
//   fun g_data_input_stream_set_newline_type(stream: NullablePointer[GDataInputStream] tag, g_type: I32): None =>
//   fun g_data_input_stream_get_newline_type(stream: NullablePointer[GDataInputStream] tag): I32 =>
//   fun g_data_input_stream_read_byte(stream: NullablePointer[GDataInputStream] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): U8 =>
//   fun g_data_input_stream_read_int16(stream: NullablePointer[GDataInputStream] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I16 =>
//   fun g_data_input_stream_read_uint16(stream: NullablePointer[GDataInputStream] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): U16 =>
//   fun g_data_input_stream_read_int32(stream: NullablePointer[GDataInputStream] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_data_input_stream_read_uint32(stream: NullablePointer[GDataInputStream] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): U32 =>
//   fun g_data_input_stream_read_int64(stream: NullablePointer[GDataInputStream] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_data_input_stream_read_uint64(stream: NullablePointer[GDataInputStream] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): U64 =>
//   fun g_data_input_stream_read_line(stream: NullablePointer[GDataInputStream] tag, length: Pointer[U64] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_data_input_stream_read_line_utf8(stream: NullablePointer[GDataInputStream] tag, length: Pointer[U64] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_data_input_stream_read_line_async(stream: NullablePointer[GDataInputStream] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_data_input_stream_read_line_finish(stream: NullablePointer[GDataInputStream] tag, result: NullablePointer[GAsyncResult] tag, length: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_data_input_stream_read_line_finish_utf8(stream: NullablePointer[GDataInputStream] tag, result: NullablePointer[GAsyncResult] tag, length: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_data_input_stream_read_until(stream: NullablePointer[GDataInputStream] tag, stopchars: Pointer[U8] tag, length: Pointer[U64] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_data_input_stream_read_until_async(stream: NullablePointer[GDataInputStream] tag, stopchars: Pointer[U8] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_data_input_stream_read_until_finish(stream: NullablePointer[GDataInputStream] tag, result: NullablePointer[GAsyncResult] tag, length: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_data_input_stream_read_upto(stream: NullablePointer[GDataInputStream] tag, stopchars: Pointer[U8] tag, stopcharslen: I64, length: Pointer[U64] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_data_input_stream_read_upto_async(stream: NullablePointer[GDataInputStream] tag, stopchars: Pointer[U8] tag, stopcharslen: I64, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_data_input_stream_read_upto_finish(stream: NullablePointer[GDataInputStream] tag, result: NullablePointer[GAsyncResult] tag, length: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_simple_action_group_get_type(): U64 =>
//   fun g_simple_action_group_new(): NullablePointer[GSimpleActionGroup] =>
//   fun g_simple_action_group_lookup(simple: NullablePointer[GSimpleActionGroup] tag, actionname: Pointer[U8] tag): NullablePointer[GAction] =>
//   fun g_simple_action_group_insert(simple: NullablePointer[GSimpleActionGroup] tag, action: NullablePointer[GAction] tag): None =>
//   fun g_simple_action_group_remove(simple: NullablePointer[GSimpleActionGroup] tag, actionname: Pointer[U8] tag): None =>
//   fun g_simple_action_group_add_entries(simple: NullablePointer[GSimpleActionGroup] tag, entries: NullablePointer[GActionEntry] tag, nentries: I32, userdata: Pointer[None] tag): None =>
//   fun g_application_get_type(): U64 =>
//   fun g_application_id_is_valid(applicationid: Pointer[U8] tag): I32 =>
//   fun g_application_new(applicationid: Pointer[U8] tag, flags: I32): NullablePointer[GApplication] =>
//   fun g_application_get_application_id(application: NullablePointer[GApplication] tag): Pointer[U8] =>
//   fun g_application_set_application_id(application: NullablePointer[GApplication] tag, applicationid: Pointer[U8] tag): None =>
//   fun g_application_get_dbus_connection(application: NullablePointer[GApplication] tag): NullablePointer[GDBusConnection] =>
//   fun g_application_get_dbus_object_path(application: NullablePointer[GApplication] tag): Pointer[U8] =>
//   fun g_application_get_inactivity_timeout(application: NullablePointer[GApplication] tag): U32 =>
//   fun g_application_set_inactivity_timeout(application: NullablePointer[GApplication] tag, inactivitytimeout: U32): None =>
//   fun g_application_get_flags(application: NullablePointer[GApplication] tag): I32 =>
//   fun g_application_set_flags(application: NullablePointer[GApplication] tag, flags: I32): None =>
//   fun g_application_get_resource_base_path(application: NullablePointer[GApplication] tag): Pointer[U8] =>
//   fun g_application_set_resource_base_path(application: NullablePointer[GApplication] tag, resourcepath: Pointer[U8] tag): None =>
//   fun g_application_set_action_group(application: NullablePointer[GApplication] tag, actiongroup: NullablePointer[GActionGroup] tag): None =>
//   fun g_application_add_main_option_entries(application: NullablePointer[GApplication] tag, entries: NullablePointer[GOptionEntry] tag): None =>
//   fun g_application_add_main_option(application: NullablePointer[GApplication] tag, longname: Pointer[U8] tag, shortname: U8, flags: I32, arg: I32, description: Pointer[U8] tag, argdescription: Pointer[U8] tag): None =>
//   fun g_application_add_option_group(application: NullablePointer[GApplication] tag, group: NullablePointer[GOptionGroup] tag): None =>
//   fun g_application_set_option_context_parameter_string(application: NullablePointer[GApplication] tag, parameterstring: Pointer[U8] tag): None =>
//   fun g_application_set_option_context_summary(application: NullablePointer[GApplication] tag, summary: Pointer[U8] tag): None =>
//   fun g_application_set_option_context_description(application: NullablePointer[GApplication] tag, description: Pointer[U8] tag): None =>
//   fun g_application_get_is_registered(application: NullablePointer[GApplication] tag): I32 =>
//   fun g_application_get_is_remote(application: NullablePointer[GApplication] tag): I32 =>
//   fun g_application_register(application: NullablePointer[GApplication] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_application_hold(application: NullablePointer[GApplication] tag): None =>
//   fun g_application_release(application: NullablePointer[GApplication] tag): None =>
//   fun g_application_activate(application: NullablePointer[GApplication] tag): None =>
//   fun g_application_open(application: NullablePointer[GApplication] tag, files: NullablePointer[NullablePointer[GFile]] tag, nfiles: I32, hint: Pointer[U8] tag): None =>
//   fun g_application_run(application: NullablePointer[GApplication] tag, argc: I32, argv: NullablePointer[Pointer[U8]] tag): I32 =>
//   fun g_application_quit(application: NullablePointer[GApplication] tag): None =>
//   fun g_application_get_default(): NullablePointer[GApplication] =>
//   fun g_application_set_default(application: NullablePointer[GApplication] tag): None =>
//   fun g_application_mark_busy(application: NullablePointer[GApplication] tag): None =>
//   fun g_application_unmark_busy(application: NullablePointer[GApplication] tag): None =>
//   fun g_application_get_is_busy(application: NullablePointer[GApplication] tag): I32 =>
//   fun g_application_send_notification(application: NullablePointer[GApplication] tag, id: Pointer[U8] tag, notification: NullablePointer[GNotification] tag): None =>
//   fun g_application_withdraw_notification(application: NullablePointer[GApplication] tag, id: Pointer[U8] tag): None =>
//   fun g_application_bind_busy_property(application: NullablePointer[GApplication] tag, g_object: Pointer[None] tag, property: Pointer[U8] tag): None =>
//   fun g_application_unbind_busy_property(application: NullablePointer[GApplication] tag, g_object: Pointer[None] tag, property: Pointer[U8] tag): None =>
//   fun g_application_command_line_get_type(): U64 =>
//   fun g_application_command_line_get_arguments(cmdline: NullablePointer[GApplicationCommandLine] tag, argc: Pointer[I32] tag): NullablePointer[Pointer[U8]] =>
//   fun g_application_command_line_get_options_dict(cmdline: NullablePointer[GApplicationCommandLine] tag): NullablePointer[GVariantDict] =>
//   fun g_application_command_line_get_stdin(cmdline: NullablePointer[GApplicationCommandLine] tag): NullablePointer[GInputStream] =>
//   fun g_application_command_line_get_environ(cmdline: NullablePointer[GApplicationCommandLine] tag): NullablePointer[Pointer[U8]] =>
//   fun g_application_command_line_getenv(cmdline: NullablePointer[GApplicationCommandLine] tag, name: Pointer[U8] tag): Pointer[U8] =>
//   fun g_application_command_line_get_cwd(cmdline: NullablePointer[GApplicationCommandLine] tag): Pointer[U8] =>
//   fun g_application_command_line_get_is_remote(cmdline: NullablePointer[GApplicationCommandLine] tag): I32 =>
// /*  fun g_application_command_line_print(cmdline: NullablePointer[GApplicationCommandLine] tag, format: Pointer[U8] tag, ...): None =>
// /*  fun g_application_command_line_printerr(cmdline: NullablePointer[GApplicationCommandLine] tag, format: Pointer[U8] tag, ...): None =>
//   fun g_application_command_line_get_exit_status(cmdline: NullablePointer[GApplicationCommandLine] tag): I32 =>
//   fun g_application_command_line_set_exit_status(cmdline: NullablePointer[GApplicationCommandLine] tag, exitstatus: I32): None =>
//   fun g_application_command_line_get_platform_data(cmdline: NullablePointer[GApplicationCommandLine] tag): NullablePointer[GVariant] =>
//   fun g_application_command_line_create_file_for_arg(cmdline: NullablePointer[GApplicationCommandLine] tag, arg: Pointer[U8] tag): NullablePointer[GFile] =>
//   fun g_settings_get_type(): U64 =>
//   fun g_settings_list_schemas(): NullablePointer[Pointer[U8]] =>
//   fun g_settings_list_relocatable_schemas(): NullablePointer[Pointer[U8]] =>
//   fun g_settings_new(schemaid: Pointer[U8] tag): NullablePointer[GSettings] =>
//   fun g_settings_new_with_path(schemaid: Pointer[U8] tag, path: Pointer[U8] tag): NullablePointer[GSettings] =>
//   fun g_settings_new_with_backend(schemaid: Pointer[U8] tag, backend: NullablePointer[GSettingsBackend] tag): NullablePointer[GSettings] =>
//   fun g_settings_new_with_backend_and_path(schemaid: Pointer[U8] tag, backend: NullablePointer[GSettingsBackend] tag, path: Pointer[U8] tag): NullablePointer[GSettings] =>
//   fun g_settings_new_full(schema: NullablePointer[GSettingsSchema] tag, backend: NullablePointer[GSettingsBackend] tag, path: Pointer[U8] tag): NullablePointer[GSettings] =>
//   fun g_settings_list_children(settings: NullablePointer[GSettings] tag): NullablePointer[Pointer[U8]] =>
//   fun g_settings_list_keys(settings: NullablePointer[GSettings] tag): NullablePointer[Pointer[U8]] =>
//   fun g_settings_get_range(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag): NullablePointer[GVariant] =>
//   fun g_settings_range_check(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag, value: NullablePointer[GVariant] tag): I32 =>
//   fun g_settings_set_value(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag, value: NullablePointer[GVariant] tag): I32 =>
//   fun g_settings_get_value(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag): NullablePointer[GVariant] =>
//   fun g_settings_get_user_value(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag): NullablePointer[GVariant] =>
//   fun g_settings_get_default_value(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag): NullablePointer[GVariant] =>
// /*  fun g_settings_set(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag, format: Pointer[U8] tag, ...): I32 =>
// /*  fun g_settings_get(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag, format: Pointer[U8] tag, ...): None =>
//   fun g_settings_reset(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag): None =>
//   fun g_settings_get_int(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag): I32 =>
//   fun g_settings_set_int(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag, value: I32): I32 =>
//   fun g_settings_get_int64(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag): I64 =>
//   fun g_settings_set_int64(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag, value: I64): I32 =>
//   fun g_settings_get_uint(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag): U32 =>
//   fun g_settings_set_uint(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag, value: U32): I32 =>
//   fun g_settings_get_uint64(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag): U64 =>
//   fun g_settings_set_uint64(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag, value: U64): I32 =>
//   fun g_settings_get_string(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag): Pointer[U8] =>
//   fun g_settings_set_string(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag, value: Pointer[U8] tag): I32 =>
//   fun g_settings_get_boolean(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag): I32 =>
//   fun g_settings_set_boolean(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag, value: I32): I32 =>
//   fun g_settings_get_double(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag): F64 =>
//   fun g_settings_set_double(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag, value: F64): I32 =>
//   fun g_settings_get_strv(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag): NullablePointer[Pointer[U8]] =>
//   fun g_settings_set_strv(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag, value: NullablePointer[Pointer[U8]] tag): I32 =>
//   fun g_settings_get_enum(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag): I32 =>
//   fun g_settings_set_enum(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag, value: I32): I32 =>
//   fun g_settings_get_flags(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag): U32 =>
//   fun g_settings_set_flags(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag, value: U32): I32 =>
//   fun g_settings_get_child(settings: NullablePointer[GSettings] tag, name: Pointer[U8] tag): NullablePointer[GSettings] =>
//   fun g_settings_is_writable(settings: NullablePointer[GSettings] tag, name: Pointer[U8] tag): I32 =>
//   fun g_settings_delay(settings: NullablePointer[GSettings] tag): None =>
//   fun g_settings_apply(settings: NullablePointer[GSettings] tag): None =>
//   fun g_settings_revert(settings: NullablePointer[GSettings] tag): None =>
//   fun g_settings_get_has_unapplied(settings: NullablePointer[GSettings] tag): I32 =>
//   fun g_settings_sync(): None =>
//   fun g_settings_bind(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag, g_object: Pointer[None] tag, property: Pointer[U8] tag, flags: I32): None =>
//   fun g_settings_bind_with_mapping(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag, g_object: Pointer[None] tag, property: Pointer[U8] tag, flags: I32, getmapping: NullablePointer[FUNCTIONTYPE] tag, setmapping: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, destroy: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_settings_bind_writable(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag, g_object: Pointer[None] tag, property: Pointer[U8] tag, inverted: I32): None =>
//   fun g_settings_unbind(g_object: Pointer[None] tag, property: Pointer[U8] tag): None =>
//   fun g_settings_create_action(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag): NullablePointer[GAction] =>
//   fun g_settings_get_mapped(settings: NullablePointer[GSettings] tag, key: Pointer[U8] tag, mapping: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): Pointer[None] =>
//   fun g_permission_get_type(): U64 =>
//   fun g_permission_acquire(permission: NullablePointer[GPermission] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_permission_acquire_async(permission: NullablePointer[GPermission] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_permission_acquire_finish(permission: NullablePointer[GPermission] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_permission_release(permission: NullablePointer[GPermission] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_permission_release_async(permission: NullablePointer[GPermission] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_permission_release_finish(permission: NullablePointer[GPermission] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_permission_get_allowed(permission: NullablePointer[GPermission] tag): I32 =>
//   fun g_permission_get_can_acquire(permission: NullablePointer[GPermission] tag): I32 =>
//   fun g_permission_get_can_release(permission: NullablePointer[GPermission] tag): I32 =>
//   fun g_permission_impl_update(permission: NullablePointer[GPermission] tag, allowed: I32, canacquire: I32, canrelease: I32): None =>
//   fun g_menu_model_get_type(): U64 =>
//   fun g_menu_model_is_mutable(model: NullablePointer[GMenuModel] tag): I32 =>
//   fun g_menu_model_get_n_items(model: NullablePointer[GMenuModel] tag): I32 =>
//   fun g_menu_model_iterate_item_attributes(model: NullablePointer[GMenuModel] tag, itemindex: I32): NullablePointer[GMenuAttributeIter] =>
//   fun g_menu_model_get_item_attribute_value(model: NullablePointer[GMenuModel] tag, itemindex: I32, attribute: Pointer[U8] tag, expectedtype: NullablePointer[GVariantType] tag): NullablePointer[GVariant] =>
// /*  fun g_menu_model_get_item_attribute(model: NullablePointer[GMenuModel] tag, itemindex: I32, attribute: Pointer[U8] tag, formatstring: Pointer[U8] tag, ...): I32 =>
//   fun g_menu_model_iterate_item_links(model: NullablePointer[GMenuModel] tag, itemindex: I32): NullablePointer[GMenuLinkIter] =>
//   fun g_menu_model_get_item_link(model: NullablePointer[GMenuModel] tag, itemindex: I32, link: Pointer[U8] tag): NullablePointer[GMenuModel] =>
//   fun g_menu_model_items_changed(model: NullablePointer[GMenuModel] tag, position: I32, removed: I32, added: I32): None =>
//   fun g_menu_attribute_iter_get_type(): U64 =>
//   fun g_menu_attribute_iter_get_next(iter: NullablePointer[GMenuAttributeIter] tag, outname: NullablePointer[Pointer[U8]] tag, value: NullablePointer[NullablePointer[GVariant]] tag): I32 =>
//   fun g_menu_attribute_iter_next(iter: NullablePointer[GMenuAttributeIter] tag): I32 =>
//   fun g_menu_attribute_iter_get_name(iter: NullablePointer[GMenuAttributeIter] tag): Pointer[U8] =>
//   fun g_menu_attribute_iter_get_value(iter: NullablePointer[GMenuAttributeIter] tag): NullablePointer[GVariant] =>
//   fun g_menu_link_iter_get_type(): U64 =>
//   fun g_menu_link_iter_get_next(iter: NullablePointer[GMenuLinkIter] tag, outlink: NullablePointer[Pointer[U8]] tag, value: NullablePointer[NullablePointer[GMenuModel]] tag): I32 =>
//   fun g_menu_link_iter_next(iter: NullablePointer[GMenuLinkIter] tag): I32 =>
//   fun g_menu_link_iter_get_name(iter: NullablePointer[GMenuLinkIter] tag): Pointer[U8] =>
//   fun g_menu_link_iter_get_value(iter: NullablePointer[GMenuLinkIter] tag): NullablePointer[GMenuModel] =>
//   fun g_file_enumerator_get_type(): U64 =>
//   fun g_file_enumerator_next_file(enumerator: NullablePointer[GFileEnumerator] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileInfo] =>
//   fun g_file_enumerator_close(enumerator: NullablePointer[GFileEnumerator] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_enumerator_next_files_async(enumerator: NullablePointer[GFileEnumerator] tag, numfiles: I32, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_enumerator_next_files_finish(enumerator: NullablePointer[GFileEnumerator] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GList] =>
//   fun g_file_enumerator_close_async(enumerator: NullablePointer[GFileEnumerator] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_enumerator_close_finish(enumerator: NullablePointer[GFileEnumerator] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_enumerator_is_closed(enumerator: NullablePointer[GFileEnumerator] tag): I32 =>
//   fun g_file_enumerator_has_pending(enumerator: NullablePointer[GFileEnumerator] tag): I32 =>
//   fun g_file_enumerator_set_pending(enumerator: NullablePointer[GFileEnumerator] tag, pending: I32): None =>
//   fun g_file_enumerator_get_container(enumerator: NullablePointer[GFileEnumerator] tag): NullablePointer[GFile] =>
//   fun g_file_enumerator_get_child(enumerator: NullablePointer[GFileEnumerator] tag, info: NullablePointer[GFileInfo] tag): NullablePointer[GFile] =>
//   fun g_file_enumerator_iterate(direnum: NullablePointer[GFileEnumerator] tag, outinfo: NullablePointer[NullablePointer[GFileInfo]] tag, outchild: NullablePointer[NullablePointer[GFile]] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_monitor_get_type(): U64 =>
//   fun g_file_monitor_cancel(monitor: NullablePointer[GFileMonitor] tag): I32 =>
//   fun g_file_monitor_is_cancelled(monitor: NullablePointer[GFileMonitor] tag): I32 =>
//   fun g_file_monitor_set_rate_limit(monitor: NullablePointer[GFileMonitor] tag, limitmsecs: I32): None =>
//   fun g_file_monitor_emit_event(monitor: NullablePointer[GFileMonitor] tag, child: NullablePointer[GFile] tag, otherfile: NullablePointer[GFile] tag, eventtype: I32): None =>
//   fun g_filter_input_stream_get_type(): U64 =>
//   fun g_filter_input_stream_get_base_stream(stream: NullablePointer[GFilterInputStream] tag): NullablePointer[GInputStream] =>
//   fun g_filter_input_stream_get_close_base_stream(stream: NullablePointer[GFilterInputStream] tag): I32 =>
//   fun g_filter_input_stream_set_close_base_stream(stream: NullablePointer[GFilterInputStream] tag, closebase: I32): None =>
//   fun g_filter_output_stream_get_type(): U64 =>
//   fun g_filter_output_stream_get_base_stream(stream: NullablePointer[GFilterOutputStream] tag): NullablePointer[GOutputStream] =>
//   fun g_filter_output_stream_get_close_base_stream(stream: NullablePointer[GFilterOutputStream] tag): I32 =>
//   fun g_filter_output_stream_set_close_base_stream(stream: NullablePointer[GFilterOutputStream] tag, closebase: I32): None =>
//   fun g_file_attribute_info_list_get_type(): U64 =>
//   fun g_file_attribute_info_list_new(): NullablePointer[GFileAttributeInfoList] =>
//   fun g_file_attribute_info_list_ref(list: NullablePointer[GFileAttributeInfoList] tag): NullablePointer[GFileAttributeInfoList] =>
//   fun g_file_attribute_info_list_unref(list: NullablePointer[GFileAttributeInfoList] tag): None =>
//   fun g_file_attribute_info_list_dup(list: NullablePointer[GFileAttributeInfoList] tag): NullablePointer[GFileAttributeInfoList] =>
//   fun g_file_attribute_info_list_lookup(list: NullablePointer[GFileAttributeInfoList] tag, name: Pointer[U8] tag): NullablePointer[GFileAttributeInfo] =>
//   fun g_file_attribute_info_list_add(list: NullablePointer[GFileAttributeInfoList] tag, name: Pointer[U8] tag, g_type: I32, flags: I32): None =>
//   fun g_file_input_stream_get_type(): U64 =>
//   fun g_file_input_stream_query_info(stream: NullablePointer[GFileInputStream] tag, attributes: Pointer[U8] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileInfo] =>
//   fun g_file_input_stream_query_info_async(stream: NullablePointer[GFileInputStream] tag, attributes: Pointer[U8] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_input_stream_query_info_finish(stream: NullablePointer[GFileInputStream] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileInfo] =>
//   fun g_file_output_stream_get_type(): U64 =>
//   fun g_file_output_stream_query_info(stream: NullablePointer[GFileOutputStream] tag, attributes: Pointer[U8] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileInfo] =>
//   fun g_file_output_stream_query_info_async(stream: NullablePointer[GFileOutputStream] tag, attributes: Pointer[U8] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_output_stream_query_info_finish(stream: NullablePointer[GFileOutputStream] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileInfo] =>
//   fun g_file_output_stream_get_etag(stream: NullablePointer[GFileOutputStream] tag): Pointer[U8] =>
//   fun g_file_io_stream_get_type(): U64 =>
//   fun g_file_io_stream_query_info(stream: NullablePointer[GFileIOStream] tag, attributes: Pointer[U8] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileInfo] =>
//   fun g_file_io_stream_query_info_async(stream: NullablePointer[GFileIOStream] tag, attributes: Pointer[U8] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_io_stream_query_info_finish(stream: NullablePointer[GFileIOStream] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileInfo] =>
//   fun g_file_io_stream_get_etag(stream: NullablePointer[GFileIOStream] tag): Pointer[U8] =>
//   fun g_inet_address_get_type(): U64 =>
//   fun g_inet_address_new_from_string(string: Pointer[U8] tag): NullablePointer[GInetAddress] =>
//   fun g_inet_address_new_from_bytes(bytes: Pointer[U8] tag, family: I32): NullablePointer[GInetAddress] =>
//   fun g_inet_address_new_loopback(family: I32): NullablePointer[GInetAddress] =>
//   fun g_inet_address_new_any(family: I32): NullablePointer[GInetAddress] =>
//   fun g_inet_address_equal(address: NullablePointer[GInetAddress] tag, otheraddress: NullablePointer[GInetAddress] tag): I32 =>
//   fun g_inet_address_to_string(address: NullablePointer[GInetAddress] tag): Pointer[U8] =>
//   fun g_inet_address_to_bytes(address: NullablePointer[GInetAddress] tag): Pointer[U8] =>
//   fun g_inet_address_get_native_size(address: NullablePointer[GInetAddress] tag): U64 =>
//   fun g_inet_address_get_family(address: NullablePointer[GInetAddress] tag): I32 =>
//   fun g_inet_address_get_is_any(address: NullablePointer[GInetAddress] tag): I32 =>
//   fun g_inet_address_get_is_loopback(address: NullablePointer[GInetAddress] tag): I32 =>
//   fun g_inet_address_get_is_link_local(address: NullablePointer[GInetAddress] tag): I32 =>
//   fun g_inet_address_get_is_site_local(address: NullablePointer[GInetAddress] tag): I32 =>
//   fun g_inet_address_get_is_multicast(address: NullablePointer[GInetAddress] tag): I32 =>
//   fun g_inet_address_get_is_mc_global(address: NullablePointer[GInetAddress] tag): I32 =>
//   fun g_inet_address_get_is_mc_link_local(address: NullablePointer[GInetAddress] tag): I32 =>
//   fun g_inet_address_get_is_mc_node_local(address: NullablePointer[GInetAddress] tag): I32 =>
//   fun g_inet_address_get_is_mc_org_local(address: NullablePointer[GInetAddress] tag): I32 =>
//   fun g_inet_address_get_is_mc_site_local(address: NullablePointer[GInetAddress] tag): I32 =>
//   fun g_inet_address_mask_get_type(): U64 =>
//   fun g_inet_address_mask_new(addr: NullablePointer[GInetAddress] tag, length: U32, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GInetAddressMask] =>
//   fun g_inet_address_mask_new_from_string(maskstring: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GInetAddressMask] =>
//   fun g_inet_address_mask_to_string(mask: NullablePointer[GInetAddressMask] tag): Pointer[U8] =>
//   fun g_inet_address_mask_get_family(mask: NullablePointer[GInetAddressMask] tag): I32 =>
//   fun g_inet_address_mask_get_address(mask: NullablePointer[GInetAddressMask] tag): NullablePointer[GInetAddress] =>
//   fun g_inet_address_mask_get_length(mask: NullablePointer[GInetAddressMask] tag): U32 =>
//   fun g_inet_address_mask_matches(mask: NullablePointer[GInetAddressMask] tag, address: NullablePointer[GInetAddress] tag): I32 =>
//   fun g_inet_address_mask_equal(mask: NullablePointer[GInetAddressMask] tag, mask2: NullablePointer[GInetAddressMask] tag): I32 =>
//   fun g_inet_socket_address_get_type(): U64 =>
//   fun g_inet_socket_address_new(address: NullablePointer[GInetAddress] tag, port: U16): NullablePointer[GSocketAddress] =>
//   fun g_inet_socket_address_new_from_string(address: Pointer[U8] tag, port: U32): NullablePointer[GSocketAddress] =>
//   fun g_inet_socket_address_get_address(address: NullablePointer[GInetSocketAddress] tag): NullablePointer[GInetAddress] =>
//   fun g_inet_socket_address_get_port(address: NullablePointer[GInetSocketAddress] tag): U16 =>
//   fun g_inet_socket_address_get_flowinfo(address: NullablePointer[GInetSocketAddress] tag): U32 =>
//   fun g_inet_socket_address_get_scope_id(address: NullablePointer[GInetSocketAddress] tag): U32 =>
//   fun g_native_socket_address_get_type(): U64 =>
//   fun g_native_socket_address_new(native: Pointer[None] tag, len: U64): NullablePointer[GSocketAddress] =>
//   fun g_input_stream_get_type(): U64 =>
//   fun g_input_stream_read(stream: NullablePointer[GInputStream] tag, buffer: Pointer[None] tag, count: U64, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_input_stream_read_all(stream: NullablePointer[GInputStream] tag, buffer: Pointer[None] tag, count: U64, bytesread: Pointer[U64] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_input_stream_read_bytes(stream: NullablePointer[GInputStream] tag, count: U64, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GBytes] =>
//   fun g_input_stream_skip(stream: NullablePointer[GInputStream] tag, count: U64, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_input_stream_close(stream: NullablePointer[GInputStream] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_input_stream_read_async(stream: NullablePointer[GInputStream] tag, buffer: Pointer[None] tag, count: U64, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_input_stream_read_finish(stream: NullablePointer[GInputStream] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_input_stream_read_all_async(stream: NullablePointer[GInputStream] tag, buffer: Pointer[None] tag, count: U64, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_input_stream_read_all_finish(stream: NullablePointer[GInputStream] tag, result: NullablePointer[GAsyncResult] tag, bytesread: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_input_stream_read_bytes_async(stream: NullablePointer[GInputStream] tag, count: U64, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_input_stream_read_bytes_finish(stream: NullablePointer[GInputStream] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GBytes] =>
//   fun g_input_stream_skip_async(stream: NullablePointer[GInputStream] tag, count: U64, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_input_stream_skip_finish(stream: NullablePointer[GInputStream] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_input_stream_close_async(stream: NullablePointer[GInputStream] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_input_stream_close_finish(stream: NullablePointer[GInputStream] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_input_stream_is_closed(stream: NullablePointer[GInputStream] tag): I32 =>
//   fun g_input_stream_has_pending(stream: NullablePointer[GInputStream] tag): I32 =>
//   fun g_input_stream_set_pending(stream: NullablePointer[GInputStream] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_input_stream_clear_pending(stream: NullablePointer[GInputStream] tag): None =>
//   fun g_memory_input_stream_get_type(): U64 =>
//   fun g_memory_input_stream_new(): NullablePointer[GInputStream] =>
//   fun g_memory_input_stream_new_from_data(data: Pointer[None] tag, len: I64, destroy: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[GInputStream] =>
//   fun g_memory_input_stream_new_from_bytes(bytes: NullablePointer[GBytes] tag): NullablePointer[GInputStream] =>
//   fun g_memory_input_stream_add_data(stream: NullablePointer[GMemoryInputStream] tag, data: Pointer[None] tag, len: I64, destroy: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_memory_input_stream_add_bytes(stream: NullablePointer[GMemoryInputStream] tag, bytes: NullablePointer[GBytes] tag): None =>
//   fun g_memory_output_stream_get_type(): U64 =>
//   fun g_memory_output_stream_new(data: Pointer[None] tag, size: U64, reallocfunction: NullablePointer[FUNCTIONTYPE] tag, destroyfunction: NullablePointer[FUNCTIONTYPE] tag): NullablePointer[GOutputStream] =>
//     @g_memory_output_stream_new(data, size, reallocfunction, destroyfunction)
//   fun g_memory_output_stream_new_resizable(): NullablePointer[GOutputStream] =>
//   fun g_memory_output_stream_get_data(ostream: NullablePointer[GMemoryOutputStream] tag): Pointer[None] =>
//   fun g_memory_output_stream_get_size(ostream: NullablePointer[GMemoryOutputStream] tag): U64 =>
//   fun g_memory_output_stream_get_data_size(ostream: NullablePointer[GMemoryOutputStream] tag): U64 =>
//   fun g_memory_output_stream_steal_data(ostream: NullablePointer[GMemoryOutputStream] tag): Pointer[None] =>
//   fun g_memory_output_stream_steal_as_bytes(ostream: NullablePointer[GMemoryOutputStream] tag): NullablePointer[GBytes] =>
//   fun g_mount_operation_get_type(): U64 =>
//   fun g_mount_operation_new(): NullablePointer[GMountOperation] =>
//   fun g_mount_operation_get_username(op: NullablePointer[GMountOperation] tag): Pointer[U8] =>
//   fun g_mount_operation_set_username(op: NullablePointer[GMountOperation] tag, username: Pointer[U8] tag): None =>
//   fun g_mount_operation_get_password(op: NullablePointer[GMountOperation] tag): Pointer[U8] =>
//   fun g_mount_operation_set_password(op: NullablePointer[GMountOperation] tag, password: Pointer[U8] tag): None =>
//   fun g_mount_operation_get_anonymous(op: NullablePointer[GMountOperation] tag): I32 =>
//   fun g_mount_operation_set_anonymous(op: NullablePointer[GMountOperation] tag, anonymous: I32): None =>
//   fun g_mount_operation_get_domain(op: NullablePointer[GMountOperation] tag): Pointer[U8] =>
//   fun g_mount_operation_set_domain(op: NullablePointer[GMountOperation] tag, domain: Pointer[U8] tag): None =>
//   fun g_mount_operation_get_password_save(op: NullablePointer[GMountOperation] tag): I32 =>
//   fun g_mount_operation_set_password_save(op: NullablePointer[GMountOperation] tag, save: I32): None =>
//   fun g_mount_operation_get_choice(op: NullablePointer[GMountOperation] tag): I32 =>
//   fun g_mount_operation_set_choice(op: NullablePointer[GMountOperation] tag, choice: I32): None =>
//   fun g_mount_operation_reply(op: NullablePointer[GMountOperation] tag, result: I32): None =>
//   fun g_mount_operation_get_is_tcrypt_hidden_volume(op: NullablePointer[GMountOperation] tag): I32 =>
//   fun g_mount_operation_set_is_tcrypt_hidden_volume(op: NullablePointer[GMountOperation] tag, hiddenvolume: I32): None =>
//   fun g_mount_operation_get_is_tcrypt_system_volume(op: NullablePointer[GMountOperation] tag): I32 =>
//   fun g_mount_operation_set_is_tcrypt_system_volume(op: NullablePointer[GMountOperation] tag, systemvolume: I32): None =>
//   fun g_mount_operation_get_pim(op: NullablePointer[GMountOperation] tag): U32 =>
//   fun g_mount_operation_set_pim(op: NullablePointer[GMountOperation] tag, pim: U32): None =>
//   fun g_network_address_get_type(): U64 =>
//   fun g_network_address_new(hostname: Pointer[U8] tag, port: U16): NullablePointer[GSocketConnectable] =>
//   fun g_network_address_new_loopback(port: U16): NullablePointer[GSocketConnectable] =>
//   fun g_network_address_parse(hostandport: Pointer[U8] tag, defaultport: U16, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSocketConnectable] =>
//   fun g_network_address_parse_uri(uri: Pointer[U8] tag, defaultport: U16, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSocketConnectable] =>
//   fun g_network_address_get_hostname(addr: NullablePointer[GNetworkAddress] tag): Pointer[U8] =>
//   fun g_network_address_get_port(addr: NullablePointer[GNetworkAddress] tag): U16 =>
//   fun g_network_address_get_scheme(addr: NullablePointer[GNetworkAddress] tag): Pointer[U8] =>
//   fun g_network_service_get_type(): U64 =>
//   fun g_network_service_new(service: Pointer[U8] tag, protocol: Pointer[U8] tag, domain: Pointer[U8] tag): NullablePointer[GSocketConnectable] =>
//   fun g_network_service_get_service(srv: NullablePointer[GNetworkService] tag): Pointer[U8] =>
//   fun g_network_service_get_protocol(srv: NullablePointer[GNetworkService] tag): Pointer[U8] =>
//   fun g_network_service_get_domain(srv: NullablePointer[GNetworkService] tag): Pointer[U8] =>
//   fun g_network_service_get_scheme(srv: NullablePointer[GNetworkService] tag): Pointer[U8] =>
//   fun g_network_service_set_scheme(srv: NullablePointer[GNetworkService] tag, scheme: Pointer[U8] tag): None =>
//   fun g_output_stream_get_type(): U64 =>
//   fun g_output_stream_write(stream: NullablePointer[GOutputStream] tag, buffer: Pointer[None] tag, count: U64, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_output_stream_write_all(stream: NullablePointer[GOutputStream] tag, buffer: Pointer[None] tag, count: U64, byteswritten: Pointer[U64] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_output_stream_writev(stream: NullablePointer[GOutputStream] tag, vectors: NullablePointer[GOutputVector] tag, nvectors: U64, byteswritten: Pointer[U64] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_output_stream_writev_all(stream: NullablePointer[GOutputStream] tag, vectors: NullablePointer[GOutputVector] tag, nvectors: U64, byteswritten: Pointer[U64] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
// /*  fun g_output_stream_printf(stream: NullablePointer[GOutputStream] tag, byteswritten: Pointer[U64] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag, format: Pointer[U8] tag, ...): I32 =>
//   fun g_output_stream_vprintf(stream: NullablePointer[GOutputStream] tag, byteswritten: Pointer[U64] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag, format: Pointer[U8] tag, args: NullablePointer[Valisttag] tag): I32 =>
//   fun g_output_stream_write_bytes(stream: NullablePointer[GOutputStream] tag, bytes: NullablePointer[GBytes] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_output_stream_splice(stream: NullablePointer[GOutputStream] tag, source: NullablePointer[GInputStream] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_output_stream_flush(stream: NullablePointer[GOutputStream] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_output_stream_close(stream: NullablePointer[GOutputStream] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_output_stream_write_async(stream: NullablePointer[GOutputStream] tag, buffer: Pointer[None] tag, count: U64, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_output_stream_write_finish(stream: NullablePointer[GOutputStream] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_output_stream_write_all_async(stream: NullablePointer[GOutputStream] tag, buffer: Pointer[None] tag, count: U64, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_output_stream_write_all_finish(stream: NullablePointer[GOutputStream] tag, result: NullablePointer[GAsyncResult] tag, byteswritten: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_output_stream_writev_async(stream: NullablePointer[GOutputStream] tag, vectors: NullablePointer[GOutputVector] tag, nvectors: U64, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_output_stream_writev_finish(stream: NullablePointer[GOutputStream] tag, result: NullablePointer[GAsyncResult] tag, byteswritten: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_output_stream_writev_all_async(stream: NullablePointer[GOutputStream] tag, vectors: NullablePointer[GOutputVector] tag, nvectors: U64, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_output_stream_writev_all_finish(stream: NullablePointer[GOutputStream] tag, result: NullablePointer[GAsyncResult] tag, byteswritten: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_output_stream_write_bytes_async(stream: NullablePointer[GOutputStream] tag, bytes: NullablePointer[GBytes] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_output_stream_write_bytes_finish(stream: NullablePointer[GOutputStream] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_output_stream_splice_async(stream: NullablePointer[GOutputStream] tag, source: NullablePointer[GInputStream] tag, flags: I32, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_output_stream_splice_finish(stream: NullablePointer[GOutputStream] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_output_stream_flush_async(stream: NullablePointer[GOutputStream] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_output_stream_flush_finish(stream: NullablePointer[GOutputStream] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_output_stream_close_async(stream: NullablePointer[GOutputStream] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_output_stream_close_finish(stream: NullablePointer[GOutputStream] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_output_stream_is_closed(stream: NullablePointer[GOutputStream] tag): I32 =>
//   fun g_output_stream_is_closing(stream: NullablePointer[GOutputStream] tag): I32 =>
//   fun g_output_stream_has_pending(stream: NullablePointer[GOutputStream] tag): I32 =>
//   fun g_output_stream_set_pending(stream: NullablePointer[GOutputStream] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_output_stream_clear_pending(stream: NullablePointer[GOutputStream] tag): None =>
//   fun g_io_stream_get_type(): U64 =>
//   fun g_io_stream_get_input_stream(stream: NullablePointer[GIOStream] tag): NullablePointer[GInputStream] =>
//   fun g_io_stream_get_output_stream(stream: NullablePointer[GIOStream] tag): NullablePointer[GOutputStream] =>
//   fun g_io_stream_splice_async(stream1: NullablePointer[GIOStream] tag, stream2: NullablePointer[GIOStream] tag, flags: I32, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_io_stream_splice_finish(result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_io_stream_close(stream: NullablePointer[GIOStream] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_io_stream_close_async(stream: NullablePointer[GIOStream] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_io_stream_close_finish(stream: NullablePointer[GIOStream] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_io_stream_is_closed(stream: NullablePointer[GIOStream] tag): I32 =>
//   fun g_io_stream_has_pending(stream: NullablePointer[GIOStream] tag): I32 =>
//   fun g_io_stream_set_pending(stream: NullablePointer[GIOStream] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_io_stream_clear_pending(stream: NullablePointer[GIOStream] tag): None =>
//   fun g_resolver_get_type(): U64 =>
//   fun g_resolver_get_default(): NullablePointer[GResolver] =>
//   fun g_resolver_set_default(resolver: NullablePointer[GResolver] tag): None =>
//   fun g_resolver_lookup_by_name(resolver: NullablePointer[GResolver] tag, hostname: Pointer[U8] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GList] =>
//   fun g_resolver_lookup_by_name_async(resolver: NullablePointer[GResolver] tag, hostname: Pointer[U8] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_resolver_lookup_by_name_finish(resolver: NullablePointer[GResolver] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GList] =>
//   fun g_resolver_lookup_by_name_with_flags_async(resolver: NullablePointer[GResolver] tag, hostname: Pointer[U8] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_resolver_lookup_by_name_with_flags_finish(resolver: NullablePointer[GResolver] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GList] =>
//   fun g_resolver_lookup_by_name_with_flags(resolver: NullablePointer[GResolver] tag, hostname: Pointer[U8] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GList] =>
//   fun g_resolver_free_addresses(addresses: NullablePointer[GList] tag): None =>
//   fun g_resolver_lookup_by_address(resolver: NullablePointer[GResolver] tag, address: NullablePointer[GInetAddress] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_resolver_lookup_by_address_async(resolver: NullablePointer[GResolver] tag, address: NullablePointer[GInetAddress] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_resolver_lookup_by_address_finish(resolver: NullablePointer[GResolver] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_resolver_lookup_service(resolver: NullablePointer[GResolver] tag, service: Pointer[U8] tag, protocol: Pointer[U8] tag, domain: Pointer[U8] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GList] =>
//   fun g_resolver_lookup_service_async(resolver: NullablePointer[GResolver] tag, service: Pointer[U8] tag, protocol: Pointer[U8] tag, domain: Pointer[U8] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_resolver_lookup_service_finish(resolver: NullablePointer[GResolver] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GList] =>
//   fun g_resolver_lookup_records(resolver: NullablePointer[GResolver] tag, rrname: Pointer[U8] tag, recordtype: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GList] =>
//   fun g_resolver_lookup_records_async(resolver: NullablePointer[GResolver] tag, rrname: Pointer[U8] tag, recordtype: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_resolver_lookup_records_finish(resolver: NullablePointer[GResolver] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GList] =>
//   fun g_resolver_free_targets(targets: NullablePointer[GList] tag): None =>
//   fun g_resolver_error_quark(): U32 =>
//   fun g_socket_get_type(): U64 =>
//   fun g_socket_new(family: I32, g_type: I32, protocol: I32, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSocket] =>
//   fun g_socket_new_from_fd(fd: I32, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSocket] =>
//   fun g_socket_get_fd(socket: NullablePointer[GSocket] tag): I32 =>
//   fun g_socket_get_family(socket: NullablePointer[GSocket] tag): I32 =>
//   fun g_socket_get_socket_type(socket: NullablePointer[GSocket] tag): I32 =>
//   fun g_socket_get_protocol(socket: NullablePointer[GSocket] tag): I32 =>
//   fun g_socket_get_local_address(socket: NullablePointer[GSocket] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSocketAddress] =>
//   fun g_socket_get_remote_address(socket: NullablePointer[GSocket] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSocketAddress] =>
//   fun g_socket_set_blocking(socket: NullablePointer[GSocket] tag, blocking: I32): None =>
//   fun g_socket_get_blocking(socket: NullablePointer[GSocket] tag): I32 =>
//   fun g_socket_set_keepalive(socket: NullablePointer[GSocket] tag, keepalive: I32): None =>
//   fun g_socket_get_keepalive(socket: NullablePointer[GSocket] tag): I32 =>
//   fun g_socket_get_listen_backlog(socket: NullablePointer[GSocket] tag): I32 =>
//   fun g_socket_set_listen_backlog(socket: NullablePointer[GSocket] tag, backlog: I32): None =>
//   fun g_socket_get_timeout(socket: NullablePointer[GSocket] tag): U32 =>
//   fun g_socket_set_timeout(socket: NullablePointer[GSocket] tag, timeout: U32): None =>
//   fun g_socket_get_ttl(socket: NullablePointer[GSocket] tag): U32 =>
//   fun g_socket_set_ttl(socket: NullablePointer[GSocket] tag, ttl: U32): None =>
//   fun g_socket_get_broadcast(socket: NullablePointer[GSocket] tag): I32 =>
//   fun g_socket_set_broadcast(socket: NullablePointer[GSocket] tag, broadcast: I32): None =>
//   fun g_socket_get_multicast_loopback(socket: NullablePointer[GSocket] tag): I32 =>
//   fun g_socket_set_multicast_loopback(socket: NullablePointer[GSocket] tag, loopback: I32): None =>
//   fun g_socket_get_multicast_ttl(socket: NullablePointer[GSocket] tag): U32 =>
//   fun g_socket_set_multicast_ttl(socket: NullablePointer[GSocket] tag, ttl: U32): None =>
//   fun g_socket_is_connected(socket: NullablePointer[GSocket] tag): I32 =>
//   fun g_socket_bind(socket: NullablePointer[GSocket] tag, address: NullablePointer[GSocketAddress] tag, allowreuse: I32, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_socket_join_multicast_group(socket: NullablePointer[GSocket] tag, group: NullablePointer[GInetAddress] tag, sourcespecific: I32, iface: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_socket_leave_multicast_group(socket: NullablePointer[GSocket] tag, group: NullablePointer[GInetAddress] tag, sourcespecific: I32, iface: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_socket_join_multicast_group_ssm(socket: NullablePointer[GSocket] tag, group: NullablePointer[GInetAddress] tag, sourcespecific: NullablePointer[GInetAddress] tag, iface: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_socket_leave_multicast_group_ssm(socket: NullablePointer[GSocket] tag, group: NullablePointer[GInetAddress] tag, sourcespecific: NullablePointer[GInetAddress] tag, iface: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_socket_connect(socket: NullablePointer[GSocket] tag, address: NullablePointer[GSocketAddress] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_socket_check_connect_result(socket: NullablePointer[GSocket] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_socket_get_available_bytes(socket: NullablePointer[GSocket] tag): I64 =>
//   fun g_socket_condition_check(socket: NullablePointer[GSocket] tag, condition: I32): I32 =>
//   fun g_socket_condition_wait(socket: NullablePointer[GSocket] tag, condition: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_socket_condition_timed_wait(socket: NullablePointer[GSocket] tag, condition: I32, timeoutus: I64, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_socket_accept(socket: NullablePointer[GSocket] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSocket] =>
//   fun g_socket_listen(socket: NullablePointer[GSocket] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_socket_receive(socket: NullablePointer[GSocket] tag, buffer: Pointer[U8] tag, size: U64, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_socket_receive_from(socket: NullablePointer[GSocket] tag, address: NullablePointer[NullablePointer[GSocketAddress]] tag, buffer: Pointer[U8] tag, size: U64, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_socket_send(socket: NullablePointer[GSocket] tag, buffer: Pointer[U8] tag, size: U64, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_socket_send_to(socket: NullablePointer[GSocket] tag, address: NullablePointer[GSocketAddress] tag, buffer: Pointer[U8] tag, size: U64, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_socket_receive_message(socket: NullablePointer[GSocket] tag, address: NullablePointer[NullablePointer[GSocketAddress]] tag, vectors: NullablePointer[GInputVector] tag, numvectors: I32, messages: NullablePointer[NullablePointer[NullablePointer[GSocketControlMessage]]] tag, nummessages: Pointer[I32] tag, flags: Pointer[I32] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_socket_send_message(socket: NullablePointer[GSocket] tag, address: NullablePointer[GSocketAddress] tag, vectors: NullablePointer[GOutputVector] tag, numvectors: I32, messages: NullablePointer[NullablePointer[GSocketControlMessage]] tag, nummessages: I32, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_socket_receive_messages(socket: NullablePointer[GSocket] tag, messages: NullablePointer[GInputMessage] tag, nummessages: U32, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_socket_send_messages(socket: NullablePointer[GSocket] tag, messages: NullablePointer[GOutputMessage] tag, nummessages: U32, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_socket_close(socket: NullablePointer[GSocket] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_socket_shutdown(socket: NullablePointer[GSocket] tag, shutdownread: I32, shutdownwrite: I32, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_socket_is_closed(socket: NullablePointer[GSocket] tag): I32 =>
//   fun g_socket_create_source(socket: NullablePointer[GSocket] tag, condition: I32, cancellable: NullablePointer[GCancellable] tag): NullablePointer[GSource] =>
//   fun g_socket_speaks_ipv4(socket: NullablePointer[GSocket] tag): I32 =>
//   fun g_socket_get_credentials(socket: NullablePointer[GSocket] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GCredentials] =>
//   fun g_socket_receive_with_blocking(socket: NullablePointer[GSocket] tag, buffer: Pointer[U8] tag, size: U64, blocking: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_socket_send_with_blocking(socket: NullablePointer[GSocket] tag, buffer: Pointer[U8] tag, size: U64, blocking: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_socket_send_message_with_timeout(socket: NullablePointer[GSocket] tag, address: NullablePointer[GSocketAddress] tag, vectors: NullablePointer[GOutputVector] tag, numvectors: I32, messages: NullablePointer[NullablePointer[GSocketControlMessage]] tag, nummessages: I32, flags: I32, timeoutus: I64, byteswritten: Pointer[U64] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_socket_get_option(socket: NullablePointer[GSocket] tag, level: I32, optname: I32, value: Pointer[I32] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_socket_set_option(socket: NullablePointer[GSocket] tag, level: I32, optname: I32, value: I32, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_socket_control_message_get_type(): U64 =>
//   fun g_socket_control_message_get_size(message: NullablePointer[GSocketControlMessage] tag): U64 =>
//   fun g_socket_control_message_get_level(message: NullablePointer[GSocketControlMessage] tag): I32 =>
//   fun g_socket_control_message_get_msg_type(message: NullablePointer[GSocketControlMessage] tag): I32 =>
//   fun g_socket_control_message_serialize(message: NullablePointer[GSocketControlMessage] tag, data: Pointer[None] tag): None =>
//   fun g_socket_control_message_deserialize(level: I32, g_type: I32, size: U64, data: Pointer[None] tag): NullablePointer[GSocketControlMessage] =>
//   fun g_socket_client_get_type(): U64 =>
//   fun g_socket_client_new(): NullablePointer[GSocketClient] =>
//   fun g_socket_client_get_family(client: NullablePointer[GSocketClient] tag): I32 =>
//   fun g_socket_client_set_family(client: NullablePointer[GSocketClient] tag, family: I32): None =>
//   fun g_socket_client_get_socket_type(client: NullablePointer[GSocketClient] tag): I32 =>
//   fun g_socket_client_set_socket_type(client: NullablePointer[GSocketClient] tag, g_type: I32): None =>
//   fun g_socket_client_get_protocol(client: NullablePointer[GSocketClient] tag): I32 =>
//   fun g_socket_client_set_protocol(client: NullablePointer[GSocketClient] tag, protocol: I32): None =>
//   fun g_socket_client_get_local_address(client: NullablePointer[GSocketClient] tag): NullablePointer[GSocketAddress] =>
//   fun g_socket_client_set_local_address(client: NullablePointer[GSocketClient] tag, address: NullablePointer[GSocketAddress] tag): None =>
//   fun g_socket_client_get_timeout(client: NullablePointer[GSocketClient] tag): U32 =>
//   fun g_socket_client_set_timeout(client: NullablePointer[GSocketClient] tag, timeout: U32): None =>
//   fun g_socket_client_get_enable_proxy(client: NullablePointer[GSocketClient] tag): I32 =>
//   fun g_socket_client_set_enable_proxy(client: NullablePointer[GSocketClient] tag, enable: I32): None =>
//   fun g_socket_client_get_tls(client: NullablePointer[GSocketClient] tag): I32 =>
//   fun g_socket_client_set_tls(client: NullablePointer[GSocketClient] tag, tls: I32): None =>
//   fun g_socket_client_get_tls_validation_flags(client: NullablePointer[GSocketClient] tag): I32 =>
//   fun g_socket_client_set_tls_validation_flags(client: NullablePointer[GSocketClient] tag, flags: I32): None =>
//   fun g_socket_client_get_proxy_resolver(client: NullablePointer[GSocketClient] tag): NullablePointer[GProxyResolver] =>
//   fun g_socket_client_set_proxy_resolver(client: NullablePointer[GSocketClient] tag, proxyresolver: NullablePointer[GProxyResolver] tag): None =>
//   fun g_socket_client_connect(client: NullablePointer[GSocketClient] tag, connectable: NullablePointer[GSocketConnectable] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSocketConnection] =>
//   fun g_socket_client_connect_to_host(client: NullablePointer[GSocketClient] tag, hostandport: Pointer[U8] tag, defaultport: U16, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSocketConnection] =>
//   fun g_socket_client_connect_to_service(client: NullablePointer[GSocketClient] tag, domain: Pointer[U8] tag, service: Pointer[U8] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSocketConnection] =>
//   fun g_socket_client_connect_to_uri(client: NullablePointer[GSocketClient] tag, uri: Pointer[U8] tag, defaultport: U16, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSocketConnection] =>
//   fun g_socket_client_connect_async(client: NullablePointer[GSocketClient] tag, connectable: NullablePointer[GSocketConnectable] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_socket_client_connect_finish(client: NullablePointer[GSocketClient] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSocketConnection] =>
//   fun g_socket_client_connect_to_host_async(client: NullablePointer[GSocketClient] tag, hostandport: Pointer[U8] tag, defaultport: U16, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_socket_client_connect_to_host_finish(client: NullablePointer[GSocketClient] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSocketConnection] =>
//   fun g_socket_client_connect_to_service_async(client: NullablePointer[GSocketClient] tag, domain: Pointer[U8] tag, service: Pointer[U8] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_socket_client_connect_to_service_finish(client: NullablePointer[GSocketClient] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSocketConnection] =>
//   fun g_socket_client_connect_to_uri_async(client: NullablePointer[GSocketClient] tag, uri: Pointer[U8] tag, defaultport: U16, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_socket_client_connect_to_uri_finish(client: NullablePointer[GSocketClient] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSocketConnection] =>
//   fun g_socket_client_add_application_proxy(client: NullablePointer[GSocketClient] tag, protocol: Pointer[U8] tag): None =>
//   fun g_socket_connection_get_type(): U64 =>
//   fun g_socket_connection_is_connected(connection: NullablePointer[GSocketConnection] tag): I32 =>
//   fun g_socket_connection_connect(connection: NullablePointer[GSocketConnection] tag, address: NullablePointer[GSocketAddress] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_socket_connection_connect_async(connection: NullablePointer[GSocketConnection] tag, address: NullablePointer[GSocketAddress] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_socket_connection_connect_finish(connection: NullablePointer[GSocketConnection] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_socket_connection_get_socket(connection: NullablePointer[GSocketConnection] tag): NullablePointer[GSocket] =>
//   fun g_socket_connection_get_local_address(connection: NullablePointer[GSocketConnection] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSocketAddress] =>
//   fun g_socket_connection_get_remote_address(connection: NullablePointer[GSocketConnection] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSocketAddress] =>
//   fun g_socket_connection_factory_register_type(gtype: U64, family: I32, g_type: I32, protocol: I32): None =>
//   fun g_socket_connection_factory_lookup_type(family: I32, g_type: I32, protocolid: I32): U64 =>
//   fun g_socket_connection_factory_create_connection(socket: NullablePointer[GSocket] tag): NullablePointer[GSocketConnection] =>
//   fun g_socket_listener_get_type(): U64 =>
//   fun g_socket_listener_new(): NullablePointer[GSocketListener] =>
//   fun g_socket_listener_set_backlog(listener: NullablePointer[GSocketListener] tag, listenbacklog: I32): None =>
//   fun g_socket_listener_add_socket(listener: NullablePointer[GSocketListener] tag, socket: NullablePointer[GSocket] tag, sourceobject: NullablePointer[GObject] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_socket_listener_add_address(listener: NullablePointer[GSocketListener] tag, address: NullablePointer[GSocketAddress] tag, g_type: I32, protocol: I32, sourceobject: NullablePointer[GObject] tag, effectiveaddress: NullablePointer[NullablePointer[GSocketAddress]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_socket_listener_add_inet_port(listener: NullablePointer[GSocketListener] tag, port: U16, sourceobject: NullablePointer[GObject] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_socket_listener_add_any_inet_port(listener: NullablePointer[GSocketListener] tag, sourceobject: NullablePointer[GObject] tag, g_error: NullablePointer[NullablePointer[GError]] tag): U16 =>
//   fun g_socket_listener_accept_socket(listener: NullablePointer[GSocketListener] tag, sourceobject: NullablePointer[NullablePointer[GObject]] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSocket] =>
//   fun g_socket_listener_accept_socket_async(listener: NullablePointer[GSocketListener] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_socket_listener_accept_socket_finish(listener: NullablePointer[GSocketListener] tag, result: NullablePointer[GAsyncResult] tag, sourceobject: NullablePointer[NullablePointer[GObject]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSocket] =>
//   fun g_socket_listener_accept(listener: NullablePointer[GSocketListener] tag, sourceobject: NullablePointer[NullablePointer[GObject]] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSocketConnection] =>
//   fun g_socket_listener_accept_async(listener: NullablePointer[GSocketListener] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_socket_listener_accept_finish(listener: NullablePointer[GSocketListener] tag, result: NullablePointer[GAsyncResult] tag, sourceobject: NullablePointer[NullablePointer[GObject]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSocketConnection] =>
//   fun g_socket_listener_close(listener: NullablePointer[GSocketListener] tag): None =>
//   fun g_socket_service_get_type(): U64 =>
//   fun g_socket_service_new(): NullablePointer[GSocketService] =>
//   fun g_socket_service_start(service: NullablePointer[GSocketService] tag): None =>
//   fun g_socket_service_stop(service: NullablePointer[GSocketService] tag): None =>
//   fun g_socket_service_is_active(service: NullablePointer[GSocketService] tag): I32 =>
//   fun g_socket_address_get_type(): U64 =>
//   fun g_socket_address_get_family(address: NullablePointer[GSocketAddress] tag): I32 =>
//   fun g_socket_address_new_from_native(native: Pointer[None] tag, len: U64): NullablePointer[GSocketAddress] =>
//   fun g_socket_address_to_native(address: NullablePointer[GSocketAddress] tag, dest: Pointer[None] tag, destlen: U64, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_socket_address_get_native_size(address: NullablePointer[GSocketAddress] tag): I64 =>
//   fun g_socket_address_enumerator_get_type(): U64 =>
//   fun g_socket_address_enumerator_next(enumerator: NullablePointer[GSocketAddressEnumerator] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSocketAddress] =>
//   fun g_socket_address_enumerator_next_async(enumerator: NullablePointer[GSocketAddressEnumerator] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_socket_address_enumerator_next_finish(enumerator: NullablePointer[GSocketAddressEnumerator] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSocketAddress] =>
//   fun g_tcp_connection_get_type(): U64 =>
//   fun g_tcp_connection_set_graceful_disconnect(connection: NullablePointer[GTcpConnection] tag, gracefuldisconnect: I32): None =>
//   fun g_tcp_connection_get_graceful_disconnect(connection: NullablePointer[GTcpConnection] tag): I32 =>
//   fun g_tcp_wrapper_connection_get_type(): U64 =>
//   fun g_tcp_wrapper_connection_new(baseiostream: NullablePointer[GIOStream] tag, socket: NullablePointer[GSocket] tag): NullablePointer[GSocketConnection] =>
//   fun g_tcp_wrapper_connection_get_base_io_stream(conn: NullablePointer[GTcpWrapperConnection] tag): NullablePointer[GIOStream] =>
//   fun g_threaded_socket_service_get_type(): U64 =>
//   fun g_threaded_socket_service_new(maxthreads: I32): NullablePointer[GSocketService] =>
//   fun g_tls_certificate_get_type(): U64 =>
//   fun g_tls_certificate_new_from_pem(data: Pointer[U8] tag, length: I64, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GTlsCertificate] =>
//   fun g_tls_certificate_new_from_file(file: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GTlsCertificate] =>
//   fun g_tls_certificate_new_from_files(certfile: Pointer[U8] tag, keyfile: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GTlsCertificate] =>
//   fun g_tls_certificate_new_from_pkcs11_uris(pkcs11uri: Pointer[U8] tag, privatekeypkcs11uri: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GTlsCertificate] =>
//   fun g_tls_certificate_list_new_from_file(file: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GList] =>
//   fun g_tls_certificate_get_issuer(cert: NullablePointer[GTlsCertificate] tag): NullablePointer[GTlsCertificate] =>
//   fun g_tls_certificate_verify(cert: NullablePointer[GTlsCertificate] tag, identity: NullablePointer[GSocketConnectable] tag, trustedca: NullablePointer[GTlsCertificate] tag): I32 =>
//   fun g_tls_certificate_is_same(certone: NullablePointer[GTlsCertificate] tag, certtwo: NullablePointer[GTlsCertificate] tag): I32 =>
//   fun g_tls_connection_get_type(): U64 =>
//   fun g_tls_connection_set_use_system_certdb(conn: NullablePointer[GTlsConnection] tag, usesystemcertdb: I32): None =>
//   fun g_tls_connection_get_use_system_certdb(conn: NullablePointer[GTlsConnection] tag): I32 =>
//   fun g_tls_connection_set_database(conn: NullablePointer[GTlsConnection] tag, database: NullablePointer[GTlsDatabase] tag): None =>
//   fun g_tls_connection_get_database(conn: NullablePointer[GTlsConnection] tag): NullablePointer[GTlsDatabase] =>
//   fun g_tls_connection_set_certificate(conn: NullablePointer[GTlsConnection] tag, certificate: NullablePointer[GTlsCertificate] tag): None =>
//   fun g_tls_connection_get_certificate(conn: NullablePointer[GTlsConnection] tag): NullablePointer[GTlsCertificate] =>
//   fun g_tls_connection_set_interaction(conn: NullablePointer[GTlsConnection] tag, interaction: NullablePointer[GTlsInteraction] tag): None =>
//   fun g_tls_connection_get_interaction(conn: NullablePointer[GTlsConnection] tag): NullablePointer[GTlsInteraction] =>
//   fun g_tls_connection_get_peer_certificate(conn: NullablePointer[GTlsConnection] tag): NullablePointer[GTlsCertificate] =>
//   fun g_tls_connection_get_peer_certificate_errors(conn: NullablePointer[GTlsConnection] tag): I32 =>
//   fun g_tls_connection_set_require_close_notify(conn: NullablePointer[GTlsConnection] tag, requireclosenotify: I32): None =>
//   fun g_tls_connection_get_require_close_notify(conn: NullablePointer[GTlsConnection] tag): I32 =>
//   fun g_tls_connection_set_rehandshake_mode(conn: NullablePointer[GTlsConnection] tag, mode: I32): None =>
//   fun g_tls_connection_get_rehandshake_mode(conn: NullablePointer[GTlsConnection] tag): I32 =>
//   fun g_tls_connection_set_advertised_protocols(conn: NullablePointer[GTlsConnection] tag, protocols: NullablePointer[Pointer[U8]] tag): None =>
//   fun g_tls_connection_get_negotiated_protocol(conn: NullablePointer[GTlsConnection] tag): Pointer[U8] =>
//   fun g_tls_connection_get_channel_binding_data(conn: NullablePointer[GTlsConnection] tag, g_type: I32, data: NullablePointer[GByteArray] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_tls_connection_handshake(conn: NullablePointer[GTlsConnection] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_tls_connection_handshake_async(conn: NullablePointer[GTlsConnection] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_tls_connection_handshake_finish(conn: NullablePointer[GTlsConnection] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_tls_error_quark(): U32 =>
//   fun g_tls_channel_binding_error_quark(): U32 =>
//   fun g_tls_connection_emit_accept_certificate(conn: NullablePointer[GTlsConnection] tag, peercert: NullablePointer[GTlsCertificate] tag, errors: I32): I32 =>
//   fun g_tls_database_get_type(): U64 =>
//   fun g_tls_database_verify_chain(self: NullablePointer[GTlsDatabase] tag, chain: NullablePointer[GTlsCertificate] tag, purpose: Pointer[U8] tag, identity: NullablePointer[GSocketConnectable] tag, interaction: NullablePointer[GTlsInteraction] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_tls_database_verify_chain_async(self: NullablePointer[GTlsDatabase] tag, chain: NullablePointer[GTlsCertificate] tag, purpose: Pointer[U8] tag, identity: NullablePointer[GSocketConnectable] tag, interaction: NullablePointer[GTlsInteraction] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_tls_database_verify_chain_finish(self: NullablePointer[GTlsDatabase] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_tls_database_create_certificate_handle(self: NullablePointer[GTlsDatabase] tag, certificate: NullablePointer[GTlsCertificate] tag): Pointer[U8] =>
//   fun g_tls_database_lookup_certificate_for_handle(self: NullablePointer[GTlsDatabase] tag, handle: Pointer[U8] tag, interaction: NullablePointer[GTlsInteraction] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GTlsCertificate] =>
//   fun g_tls_database_lookup_certificate_for_handle_async(self: NullablePointer[GTlsDatabase] tag, handle: Pointer[U8] tag, interaction: NullablePointer[GTlsInteraction] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_tls_database_lookup_certificate_for_handle_finish(self: NullablePointer[GTlsDatabase] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GTlsCertificate] =>
//   fun g_tls_database_lookup_certificate_issuer(self: NullablePointer[GTlsDatabase] tag, certificate: NullablePointer[GTlsCertificate] tag, interaction: NullablePointer[GTlsInteraction] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GTlsCertificate] =>
//   fun g_tls_database_lookup_certificate_issuer_async(self: NullablePointer[GTlsDatabase] tag, certificate: NullablePointer[GTlsCertificate] tag, interaction: NullablePointer[GTlsInteraction] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_tls_database_lookup_certificate_issuer_finish(self: NullablePointer[GTlsDatabase] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GTlsCertificate] =>
//   fun g_tls_database_lookup_certificates_issued_by(self: NullablePointer[GTlsDatabase] tag, issuerrawdn: NullablePointer[GByteArray] tag, interaction: NullablePointer[GTlsInteraction] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GList] =>
//   fun g_tls_database_lookup_certificates_issued_by_async(self: NullablePointer[GTlsDatabase] tag, issuerrawdn: NullablePointer[GByteArray] tag, interaction: NullablePointer[GTlsInteraction] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_tls_database_lookup_certificates_issued_by_finish(self: NullablePointer[GTlsDatabase] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GList] =>
//   fun g_tls_interaction_get_type(): U64 =>
//   fun g_tls_interaction_invoke_ask_password(interaction: NullablePointer[GTlsInteraction] tag, password: NullablePointer[GTlsPassword] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_tls_interaction_ask_password(interaction: NullablePointer[GTlsInteraction] tag, password: NullablePointer[GTlsPassword] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_tls_interaction_ask_password_async(interaction: NullablePointer[GTlsInteraction] tag, password: NullablePointer[GTlsPassword] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_tls_interaction_ask_password_finish(interaction: NullablePointer[GTlsInteraction] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_tls_interaction_invoke_request_certificate(interaction: NullablePointer[GTlsInteraction] tag, connection: NullablePointer[GTlsConnection] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_tls_interaction_request_certificate(interaction: NullablePointer[GTlsInteraction] tag, connection: NullablePointer[GTlsConnection] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_tls_interaction_request_certificate_async(interaction: NullablePointer[GTlsInteraction] tag, connection: NullablePointer[GTlsConnection] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_tls_interaction_request_certificate_finish(interaction: NullablePointer[GTlsInteraction] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_tls_password_get_type(): U64 =>
//   fun g_tls_password_new(flags: I32, description: Pointer[U8] tag): NullablePointer[GTlsPassword] =>
//   fun g_tls_password_get_value(password: NullablePointer[GTlsPassword] tag, length: Pointer[U64] tag): Pointer[U8] =>
//   fun g_tls_password_set_value(password: NullablePointer[GTlsPassword] tag, value: Pointer[U8] tag, length: I64): None =>
//   fun g_tls_password_set_value_full(password: NullablePointer[GTlsPassword] tag, value: Pointer[U8] tag, length: I64, destroy: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_tls_password_get_flags(password: NullablePointer[GTlsPassword] tag): I32 =>
//   fun g_tls_password_set_flags(password: NullablePointer[GTlsPassword] tag, flags: I32): None =>
//   fun g_tls_password_get_description(password: NullablePointer[GTlsPassword] tag): Pointer[U8] =>
//   fun g_tls_password_set_description(password: NullablePointer[GTlsPassword] tag, description: Pointer[U8] tag): None =>
//   fun g_tls_password_get_warning(password: NullablePointer[GTlsPassword] tag): Pointer[U8] =>
//   fun g_tls_password_set_warning(password: NullablePointer[GTlsPassword] tag, warning: Pointer[U8] tag): None =>
//   fun g_vfs_get_type(): U64 =>
//   fun g_vfs_is_active(vfs: NullablePointer[GVfs] tag): I32 =>
//   fun g_vfs_get_file_for_path(vfs: NullablePointer[GVfs] tag, path: Pointer[U8] tag): NullablePointer[GFile] =>
//   fun g_vfs_get_file_for_uri(vfs: NullablePointer[GVfs] tag, uri: Pointer[U8] tag): NullablePointer[GFile] =>
//   fun g_vfs_get_supported_uri_schemes(vfs: NullablePointer[GVfs] tag): NullablePointer[Pointer[U8]] =>
//   fun g_vfs_parse_name(vfs: NullablePointer[GVfs] tag, parsename: Pointer[U8] tag): NullablePointer[GFile] =>
//   fun g_vfs_get_default(): NullablePointer[GVfs] =>
//   fun g_vfs_get_local(): NullablePointer[GVfs] =>
//   fun g_vfs_register_uri_scheme(vfs: NullablePointer[GVfs] tag, scheme: Pointer[U8] tag, urifunc: NullablePointer[FUNCTIONTYPE] tag, uridata: Pointer[None] tag, uridestroy: NullablePointer[FUNCTIONTYPE] tag, parsenamefunc: NullablePointer[FUNCTIONTYPE] tag, parsenamedata: Pointer[None] tag, parsenamedestroy: NullablePointer[FUNCTIONTYPE] tag): I32 =>
//     @g_vfs_register_uri_scheme(vfs, scheme, urifunc, uridata, uridestroy, parsenamefunc, parsenamedata, parsenamedestroy)
//   fun g_vfs_unregister_uri_scheme(vfs: NullablePointer[GVfs] tag, scheme: Pointer[U8] tag): I32 =>
//   fun g_proxy_address_get_type(): U64 =>
//   fun g_proxy_address_new(inetaddr: NullablePointer[GInetAddress] tag, port: U16, protocol: Pointer[U8] tag, desthostname: Pointer[U8] tag, destport: U16, username: Pointer[U8] tag, password: Pointer[U8] tag): NullablePointer[GSocketAddress] =>
//   fun g_proxy_address_get_protocol(proxy: NullablePointer[GProxyAddress] tag): Pointer[U8] =>
//   fun g_proxy_address_get_destination_protocol(proxy: NullablePointer[GProxyAddress] tag): Pointer[U8] =>
//   fun g_proxy_address_get_destination_hostname(proxy: NullablePointer[GProxyAddress] tag): Pointer[U8] =>
//   fun g_proxy_address_get_destination_port(proxy: NullablePointer[GProxyAddress] tag): U16 =>
//   fun g_proxy_address_get_username(proxy: NullablePointer[GProxyAddress] tag): Pointer[U8] =>
//   fun g_proxy_address_get_password(proxy: NullablePointer[GProxyAddress] tag): Pointer[U8] =>
//   fun g_proxy_address_get_uri(proxy: NullablePointer[GProxyAddress] tag): Pointer[U8] =>
//   fun g_proxy_address_enumerator_get_type(): U64 =>
//   fun g_volume_monitor_get_type(): U64 =>
//   fun g_volume_monitor_get(): NullablePointer[GVolumeMonitor] =>
//   fun g_volume_monitor_get_connected_drives(volumemonitor: NullablePointer[GVolumeMonitor] tag): NullablePointer[GList] =>
//   fun g_volume_monitor_get_volumes(volumemonitor: NullablePointer[GVolumeMonitor] tag): NullablePointer[GList] =>
//   fun g_volume_monitor_get_mounts(volumemonitor: NullablePointer[GVolumeMonitor] tag): NullablePointer[GList] =>
//   fun g_volume_monitor_get_volume_for_uuid(volumemonitor: NullablePointer[GVolumeMonitor] tag, uuid: Pointer[U8] tag): NullablePointer[GVolume] =>
//   fun g_volume_monitor_get_mount_for_uuid(volumemonitor: NullablePointer[GVolumeMonitor] tag, uuid: Pointer[U8] tag): NullablePointer[GMount] =>
//   fun g_volume_monitor_adopt_orphan_mount(mount: NullablePointer[GMount] tag): NullablePointer[GVolume] =>
//   fun g_dbus_proxy_get_type(): U64 =>
//   fun g_dbus_proxy_new(connection: NullablePointer[GDBusConnection] tag, flags: I32, info: NullablePointer[GDBusInterfaceInfo] tag, name: Pointer[U8] tag, objectpath: Pointer[U8] tag, interfacename: Pointer[U8] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_dbus_proxy_new_finish(res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDBusProxy] =>
//   fun g_dbus_proxy_new_sync(connection: NullablePointer[GDBusConnection] tag, flags: I32, info: NullablePointer[GDBusInterfaceInfo] tag, name: Pointer[U8] tag, objectpath: Pointer[U8] tag, interfacename: Pointer[U8] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDBusProxy] =>
//   fun g_dbus_proxy_new_for_bus(bustype: I32, flags: I32, info: NullablePointer[GDBusInterfaceInfo] tag, name: Pointer[U8] tag, objectpath: Pointer[U8] tag, interfacename: Pointer[U8] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_dbus_proxy_new_for_bus_finish(res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDBusProxy] =>
//   fun g_dbus_proxy_new_for_bus_sync(bustype: I32, flags: I32, info: NullablePointer[GDBusInterfaceInfo] tag, name: Pointer[U8] tag, objectpath: Pointer[U8] tag, interfacename: Pointer[U8] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDBusProxy] =>
//   fun g_dbus_proxy_get_connection(proxy: NullablePointer[GDBusProxy] tag): NullablePointer[GDBusConnection] =>
//   fun g_dbus_proxy_get_flags(proxy: NullablePointer[GDBusProxy] tag): I32 =>
//   fun g_dbus_proxy_get_name(proxy: NullablePointer[GDBusProxy] tag): Pointer[U8] =>
//   fun g_dbus_proxy_get_name_owner(proxy: NullablePointer[GDBusProxy] tag): Pointer[U8] =>
//   fun g_dbus_proxy_get_object_path(proxy: NullablePointer[GDBusProxy] tag): Pointer[U8] =>
//   fun g_dbus_proxy_get_interface_name(proxy: NullablePointer[GDBusProxy] tag): Pointer[U8] =>
//   fun g_dbus_proxy_get_default_timeout(proxy: NullablePointer[GDBusProxy] tag): I32 =>
//   fun g_dbus_proxy_set_default_timeout(proxy: NullablePointer[GDBusProxy] tag, timeoutmsec: I32): None =>
//   fun g_dbus_proxy_get_interface_info(proxy: NullablePointer[GDBusProxy] tag): NullablePointer[GDBusInterfaceInfo] =>
//   fun g_dbus_proxy_set_interface_info(proxy: NullablePointer[GDBusProxy] tag, info: NullablePointer[GDBusInterfaceInfo] tag): None =>
//   fun g_dbus_proxy_get_cached_property(proxy: NullablePointer[GDBusProxy] tag, propertyname: Pointer[U8] tag): NullablePointer[GVariant] =>
//   fun g_dbus_proxy_set_cached_property(proxy: NullablePointer[GDBusProxy] tag, propertyname: Pointer[U8] tag, value: NullablePointer[GVariant] tag): None =>
//   fun g_dbus_proxy_get_cached_property_names(proxy: NullablePointer[GDBusProxy] tag): NullablePointer[Pointer[U8]] =>
//   fun g_dbus_proxy_call(proxy: NullablePointer[GDBusProxy] tag, methodname: Pointer[U8] tag, parameters: NullablePointer[GVariant] tag, flags: I32, timeoutmsec: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_dbus_proxy_call_finish(proxy: NullablePointer[GDBusProxy] tag, res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GVariant] =>
//   fun g_dbus_proxy_call_sync(proxy: NullablePointer[GDBusProxy] tag, methodname: Pointer[U8] tag, parameters: NullablePointer[GVariant] tag, flags: I32, timeoutmsec: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GVariant] =>
//   fun g_dbus_proxy_call_with_unix_fd_list(proxy: NullablePointer[GDBusProxy] tag, methodname: Pointer[U8] tag, parameters: NullablePointer[GVariant] tag, flags: I32, timeoutmsec: I32, fdlist: NullablePointer[GUnixFDList] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_dbus_proxy_call_with_unix_fd_list_finish(proxy: NullablePointer[GDBusProxy] tag, outfdlist: NullablePointer[NullablePointer[GUnixFDList]] tag, res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GVariant] =>
//   fun g_dbus_proxy_call_with_unix_fd_list_sync(proxy: NullablePointer[GDBusProxy] tag, methodname: Pointer[U8] tag, parameters: NullablePointer[GVariant] tag, flags: I32, timeoutmsec: I32, fdlist: NullablePointer[GUnixFDList] tag, outfdlist: NullablePointer[NullablePointer[GUnixFDList]] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GVariant] =>
//   fun g_dbus_error_quark(): U32 =>
//   fun g_dbus_error_is_remote_error(g_error: NullablePointer[GError] tag): I32 =>
//   fun g_dbus_error_get_remote_error(g_error: NullablePointer[GError] tag): Pointer[U8] =>
//   fun g_dbus_error_strip_remote_error(g_error: NullablePointer[GError] tag): I32 =>
//   fun g_dbus_error_register_error(errordomain: U32, errorcode: I32, dbuserrorname: Pointer[U8] tag): I32 =>
//   fun g_dbus_error_unregister_error(errordomain: U32, errorcode: I32, dbuserrorname: Pointer[U8] tag): I32 =>
//   fun g_dbus_error_register_error_domain(errordomainquarkname: Pointer[U8] tag, quarkvolatile: Pointer[U64] tag, entries: NullablePointer[GDBusErrorEntry] tag, numentries: U32): None =>
//   fun g_dbus_error_new_for_dbus_error(dbuserrorname: Pointer[U8] tag, dbuserrormessage: Pointer[U8] tag): NullablePointer[GError] =>
// /*  fun g_dbus_error_set_dbus_error(g_error: NullablePointer[NullablePointer[GError]] tag, dbuserrorname: Pointer[U8] tag, dbuserrormessage: Pointer[U8] tag, format: Pointer[U8] tag, ...): None =>
//   fun g_dbus_error_set_dbus_error_valist(g_error: NullablePointer[NullablePointer[GError]] tag, dbuserrorname: Pointer[U8] tag, dbuserrormessage: Pointer[U8] tag, format: Pointer[U8] tag, varargs: NullablePointer[Valisttag] tag): None =>
//   fun g_dbus_error_encode_gerror(g_error: NullablePointer[GError] tag): Pointer[U8] =>
//   fun g_dbus_connection_get_type(): U64 =>
//   fun g_bus_get(bustype: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_bus_get_finish(res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDBusConnection] =>
//   fun g_bus_get_sync(bustype: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDBusConnection] =>
//   fun g_dbus_connection_new(stream: NullablePointer[GIOStream] tag, guid: Pointer[U8] tag, flags: I32, observer: NullablePointer[GDBusAuthObserver] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_dbus_connection_new_finish(res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDBusConnection] =>
//   fun g_dbus_connection_new_sync(stream: NullablePointer[GIOStream] tag, guid: Pointer[U8] tag, flags: I32, observer: NullablePointer[GDBusAuthObserver] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDBusConnection] =>
//   fun g_dbus_connection_new_for_address(address: Pointer[U8] tag, flags: I32, observer: NullablePointer[GDBusAuthObserver] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_dbus_connection_new_for_address_finish(res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDBusConnection] =>
//   fun g_dbus_connection_new_for_address_sync(address: Pointer[U8] tag, flags: I32, observer: NullablePointer[GDBusAuthObserver] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDBusConnection] =>
//   fun g_dbus_connection_start_message_processing(connection: NullablePointer[GDBusConnection] tag): None =>
//   fun g_dbus_connection_is_closed(connection: NullablePointer[GDBusConnection] tag): I32 =>
//   fun g_dbus_connection_get_stream(connection: NullablePointer[GDBusConnection] tag): NullablePointer[GIOStream] =>
//   fun g_dbus_connection_get_guid(connection: NullablePointer[GDBusConnection] tag): Pointer[U8] =>
//   fun g_dbus_connection_get_unique_name(connection: NullablePointer[GDBusConnection] tag): Pointer[U8] =>
//   fun g_dbus_connection_get_peer_credentials(connection: NullablePointer[GDBusConnection] tag): NullablePointer[GCredentials] =>
//   fun g_dbus_connection_get_last_serial(connection: NullablePointer[GDBusConnection] tag): U32 =>
//   fun g_dbus_connection_get_exit_on_close(connection: NullablePointer[GDBusConnection] tag): I32 =>
//   fun g_dbus_connection_set_exit_on_close(connection: NullablePointer[GDBusConnection] tag, exitonclose: I32): None =>
//   fun g_dbus_connection_get_capabilities(connection: NullablePointer[GDBusConnection] tag): I32 =>
//   fun g_dbus_connection_get_flags(connection: NullablePointer[GDBusConnection] tag): I32 =>
//   fun g_dbus_connection_close(connection: NullablePointer[GDBusConnection] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_dbus_connection_close_finish(connection: NullablePointer[GDBusConnection] tag, res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_dbus_connection_close_sync(connection: NullablePointer[GDBusConnection] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_dbus_connection_flush(connection: NullablePointer[GDBusConnection] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_dbus_connection_flush_finish(connection: NullablePointer[GDBusConnection] tag, res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_dbus_connection_flush_sync(connection: NullablePointer[GDBusConnection] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_dbus_connection_send_message(connection: NullablePointer[GDBusConnection] tag, message: NullablePointer[GDBusMessage] tag, flags: I32, outserial: Pointer[U32] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_dbus_connection_send_message_with_reply(connection: NullablePointer[GDBusConnection] tag, message: NullablePointer[GDBusMessage] tag, flags: I32, timeoutmsec: I32, outserial: Pointer[U32] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_dbus_connection_send_message_with_reply_finish(connection: NullablePointer[GDBusConnection] tag, res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDBusMessage] =>
//   fun g_dbus_connection_send_message_with_reply_sync(connection: NullablePointer[GDBusConnection] tag, message: NullablePointer[GDBusMessage] tag, flags: I32, timeoutmsec: I32, outserial: Pointer[U32] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDBusMessage] =>
//   fun g_dbus_connection_emit_signal(connection: NullablePointer[GDBusConnection] tag, destinationbusname: Pointer[U8] tag, objectpath: Pointer[U8] tag, interfacename: Pointer[U8] tag, signalname: Pointer[U8] tag, parameters: NullablePointer[GVariant] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_dbus_connection_call(connection: NullablePointer[GDBusConnection] tag, busname: Pointer[U8] tag, objectpath: Pointer[U8] tag, interfacename: Pointer[U8] tag, methodname: Pointer[U8] tag, parameters: NullablePointer[GVariant] tag, replytype: NullablePointer[GVariantType] tag, flags: I32, timeoutmsec: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_dbus_connection_call_finish(connection: NullablePointer[GDBusConnection] tag, res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GVariant] =>
//   fun g_dbus_connection_call_sync(connection: NullablePointer[GDBusConnection] tag, busname: Pointer[U8] tag, objectpath: Pointer[U8] tag, interfacename: Pointer[U8] tag, methodname: Pointer[U8] tag, parameters: NullablePointer[GVariant] tag, replytype: NullablePointer[GVariantType] tag, flags: I32, timeoutmsec: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GVariant] =>
//   fun g_dbus_connection_call_with_unix_fd_list(connection: NullablePointer[GDBusConnection] tag, busname: Pointer[U8] tag, objectpath: Pointer[U8] tag, interfacename: Pointer[U8] tag, methodname: Pointer[U8] tag, parameters: NullablePointer[GVariant] tag, replytype: NullablePointer[GVariantType] tag, flags: I32, timeoutmsec: I32, fdlist: NullablePointer[GUnixFDList] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_dbus_connection_call_with_unix_fd_list_finish(connection: NullablePointer[GDBusConnection] tag, outfdlist: NullablePointer[NullablePointer[GUnixFDList]] tag, res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GVariant] =>
//   fun g_dbus_connection_call_with_unix_fd_list_sync(connection: NullablePointer[GDBusConnection] tag, busname: Pointer[U8] tag, objectpath: Pointer[U8] tag, interfacename: Pointer[U8] tag, methodname: Pointer[U8] tag, parameters: NullablePointer[GVariant] tag, replytype: NullablePointer[GVariantType] tag, flags: I32, timeoutmsec: I32, fdlist: NullablePointer[GUnixFDList] tag, outfdlist: NullablePointer[NullablePointer[GUnixFDList]] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GVariant] =>
//   fun g_dbus_connection_register_object(connection: NullablePointer[GDBusConnection] tag, objectpath: Pointer[U8] tag, interfaceinfo: NullablePointer[GDBusInterfaceInfo] tag, vtable: NullablePointer[GDBusInterfaceVTable] tag, userdata: Pointer[None] tag, userdatafreefunc: NullablePointer[FUNCTIONTYPE] tag, g_error: NullablePointer[NullablePointer[GError]] tag): U32 =>
//     @g_dbus_connection_register_object(connection, objectpath, interfaceinfo, vtable, userdata, userdatafreefunc, g_error)
//   fun g_dbus_connection_register_object_with_closures(connection: NullablePointer[GDBusConnection] tag, objectpath: Pointer[U8] tag, interfaceinfo: NullablePointer[GDBusInterfaceInfo] tag, methodcallclosure: NullablePointer[GClosure] tag, getpropertyclosure: NullablePointer[GClosure] tag, setpropertyclosure: NullablePointer[GClosure] tag, g_error: NullablePointer[NullablePointer[GError]] tag): U32 =>
//   fun g_dbus_connection_unregister_object(connection: NullablePointer[GDBusConnection] tag, registrationid: U32): I32 =>
//   fun g_dbus_connection_register_subtree(connection: NullablePointer[GDBusConnection] tag, objectpath: Pointer[U8] tag, vtable: NullablePointer[GDBusSubtreeVTable] tag, flags: I32, userdata: Pointer[None] tag, userdatafreefunc: NullablePointer[FUNCTIONTYPE] tag, g_error: NullablePointer[NullablePointer[GError]] tag): U32 =>
//     @g_dbus_connection_register_subtree(connection, objectpath, vtable, flags, userdata, userdatafreefunc, g_error)
//   fun g_dbus_connection_unregister_subtree(connection: NullablePointer[GDBusConnection] tag, registrationid: U32): I32 =>
//   fun g_dbus_connection_signal_subscribe(connection: NullablePointer[GDBusConnection] tag, sender: Pointer[U8] tag, interfacename: Pointer[U8] tag, member: Pointer[U8] tag, objectpath: Pointer[U8] tag, arg0: Pointer[U8] tag, flags: I32, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, userdatafreefunc: NullablePointer[FUNCTIONTYPE] tag): U32 =>
//     @g_dbus_connection_signal_subscribe(connection, sender, interfacename, member, objectpath, arg0, flags, callback, userdata, userdatafreefunc)
//   fun g_dbus_connection_signal_unsubscribe(connection: NullablePointer[GDBusConnection] tag, subscriptionid: U32): None =>
//   fun g_dbus_connection_add_filter(connection: NullablePointer[GDBusConnection] tag, filterfunction: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, userdatafreefunc: NullablePointer[FUNCTIONTYPE] tag): U32 =>
//     @g_dbus_connection_add_filter(connection, filterfunction, userdata, userdatafreefunc)
//   fun g_dbus_connection_remove_filter(connection: NullablePointer[GDBusConnection] tag, filterid: U32): None =>
//   fun g_dbus_annotation_info_lookup(annotations: NullablePointer[NullablePointer[GDBusAnnotationInfo]] tag, name: Pointer[U8] tag): Pointer[U8] =>
//   fun g_dbus_interface_info_lookup_method(info: NullablePointer[GDBusInterfaceInfo] tag, name: Pointer[U8] tag): NullablePointer[GDBusMethodInfo] =>
//   fun g_dbus_interface_info_lookup_signal(info: NullablePointer[GDBusInterfaceInfo] tag, name: Pointer[U8] tag): NullablePointer[GDBusSignalInfo] =>
//   fun g_dbus_interface_info_lookup_property(info: NullablePointer[GDBusInterfaceInfo] tag, name: Pointer[U8] tag): NullablePointer[GDBusPropertyInfo] =>
//   fun g_dbus_interface_info_cache_build(info: NullablePointer[GDBusInterfaceInfo] tag): None =>
//   fun g_dbus_interface_info_cache_release(info: NullablePointer[GDBusInterfaceInfo] tag): None =>
//   fun g_dbus_interface_info_generate_xml(info: NullablePointer[GDBusInterfaceInfo] tag, indent: U32, stringbuilder: NullablePointer[GString] tag): None =>
//   fun g_dbus_node_info_new_for_xml(xmldata: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDBusNodeInfo] =>
//   fun g_dbus_node_info_lookup_interface(info: NullablePointer[GDBusNodeInfo] tag, name: Pointer[U8] tag): NullablePointer[GDBusInterfaceInfo] =>
//   fun g_dbus_node_info_generate_xml(info: NullablePointer[GDBusNodeInfo] tag, indent: U32, stringbuilder: NullablePointer[GString] tag): None =>
//   fun g_dbus_node_info_ref(info: NullablePointer[GDBusNodeInfo] tag): NullablePointer[GDBusNodeInfo] =>
//   fun g_dbus_interface_info_ref(info: NullablePointer[GDBusInterfaceInfo] tag): NullablePointer[GDBusInterfaceInfo] =>
//   fun g_dbus_method_info_ref(info: NullablePointer[GDBusMethodInfo] tag): NullablePointer[GDBusMethodInfo] =>
//   fun g_dbus_signal_info_ref(info: NullablePointer[GDBusSignalInfo] tag): NullablePointer[GDBusSignalInfo] =>
//   fun g_dbus_property_info_ref(info: NullablePointer[GDBusPropertyInfo] tag): NullablePointer[GDBusPropertyInfo] =>
//   fun g_dbus_arg_info_ref(info: NullablePointer[GDBusArgInfo] tag): NullablePointer[GDBusArgInfo] =>
//   fun g_dbus_annotation_info_ref(info: NullablePointer[GDBusAnnotationInfo] tag): NullablePointer[GDBusAnnotationInfo] =>
//   fun g_dbus_node_info_unref(info: NullablePointer[GDBusNodeInfo] tag): None =>
//   fun g_dbus_interface_info_unref(info: NullablePointer[GDBusInterfaceInfo] tag): None =>
//   fun g_dbus_method_info_unref(info: NullablePointer[GDBusMethodInfo] tag): None =>
//   fun g_dbus_signal_info_unref(info: NullablePointer[GDBusSignalInfo] tag): None =>
//   fun g_dbus_property_info_unref(info: NullablePointer[GDBusPropertyInfo] tag): None =>
//   fun g_dbus_arg_info_unref(info: NullablePointer[GDBusArgInfo] tag): None =>
//   fun g_dbus_annotation_info_unref(info: NullablePointer[GDBusAnnotationInfo] tag): None =>
//   fun g_dbus_node_info_get_type(): U64 =>
//   fun g_dbus_interface_info_get_type(): U64 =>
//   fun g_dbus_method_info_get_type(): U64 =>
//   fun g_dbus_signal_info_get_type(): U64 =>
//   fun g_dbus_property_info_get_type(): U64 =>
//   fun g_dbus_arg_info_get_type(): U64 =>
//   fun g_dbus_annotation_info_get_type(): U64 =>
//   fun g_dbus_interface_skeleton_get_type(): U64 =>
//   fun g_dbus_interface_skeleton_get_flags(g_interface: NullablePointer[GDBusInterfaceSkeleton] tag): I32 =>
//   fun g_dbus_interface_skeleton_set_flags(g_interface: NullablePointer[GDBusInterfaceSkeleton] tag, flags: I32): None =>
//   fun g_dbus_interface_skeleton_get_info(g_interface: NullablePointer[GDBusInterfaceSkeleton] tag): NullablePointer[GDBusInterfaceInfo] =>
//   fun g_dbus_interface_skeleton_get_vtable(g_interface: NullablePointer[GDBusInterfaceSkeleton] tag): NullablePointer[GDBusInterfaceVTable] =>
//   fun g_dbus_interface_skeleton_get_properties(g_interface: NullablePointer[GDBusInterfaceSkeleton] tag): NullablePointer[GVariant] =>
//   fun g_dbus_interface_skeleton_flush(g_interface: NullablePointer[GDBusInterfaceSkeleton] tag): None =>
//   fun g_dbus_interface_skeleton_export(g_interface: NullablePointer[GDBusInterfaceSkeleton] tag, connection: NullablePointer[GDBusConnection] tag, objectpath: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_dbus_interface_skeleton_unexport(g_interface: NullablePointer[GDBusInterfaceSkeleton] tag): None =>
//   fun g_dbus_interface_skeleton_unexport_from_connection(g_interface: NullablePointer[GDBusInterfaceSkeleton] tag, connection: NullablePointer[GDBusConnection] tag): None =>
//   fun g_dbus_interface_skeleton_get_connection(g_interface: NullablePointer[GDBusInterfaceSkeleton] tag): NullablePointer[GDBusConnection] =>
//   fun g_dbus_interface_skeleton_get_connections(g_interface: NullablePointer[GDBusInterfaceSkeleton] tag): NullablePointer[GList] =>
//   fun g_dbus_interface_skeleton_has_connection(g_interface: NullablePointer[GDBusInterfaceSkeleton] tag, connection: NullablePointer[GDBusConnection] tag): I32 =>
//   fun g_dbus_interface_skeleton_get_object_path(g_interface: NullablePointer[GDBusInterfaceSkeleton] tag): Pointer[U8] =>
//   fun g_dbus_object_skeleton_get_type(): U64 =>
//   fun g_dbus_object_skeleton_new(objectpath: Pointer[U8] tag): NullablePointer[GDBusObjectSkeleton] =>
//   fun g_dbus_object_skeleton_flush(g_object: NullablePointer[GDBusObjectSkeleton] tag): None =>
//   fun g_dbus_object_skeleton_add_interface(g_object: NullablePointer[GDBusObjectSkeleton] tag, g_interface: NullablePointer[GDBusInterfaceSkeleton] tag): None =>
//   fun g_dbus_object_skeleton_remove_interface(g_object: NullablePointer[GDBusObjectSkeleton] tag, g_interface: NullablePointer[GDBusInterfaceSkeleton] tag): None =>
//   fun g_dbus_object_skeleton_remove_interface_by_name(g_object: NullablePointer[GDBusObjectSkeleton] tag, interfacename: Pointer[U8] tag): None =>
//   fun g_dbus_object_skeleton_set_object_path(g_object: NullablePointer[GDBusObjectSkeleton] tag, objectpath: Pointer[U8] tag): None =>
//   fun g_dbus_object_proxy_get_type(): U64 =>
//   fun g_dbus_object_proxy_new(connection: NullablePointer[GDBusConnection] tag, objectpath: Pointer[U8] tag): NullablePointer[GDBusObjectProxy] =>
//   fun g_dbus_object_proxy_get_connection(proxy: NullablePointer[GDBusObjectProxy] tag): NullablePointer[GDBusConnection] =>
//   fun g_dbus_object_manager_client_get_type(): U64 =>
//   fun g_dbus_object_manager_client_new(connection: NullablePointer[GDBusConnection] tag, flags: I32, name: Pointer[U8] tag, objectpath: Pointer[U8] tag, getproxytypefunc: NullablePointer[FUNCTIONTYPE] tag, getproxytypeuserdata: Pointer[None] tag, getproxytypedestroynotify: NullablePointer[FUNCTIONTYPE] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//     @g_dbus_object_manager_client_new(connection, flags, name, objectpath, getproxytypefunc, getproxytypeuserdata, getproxytypedestroynotify, cancellable, callback, userdata)
//   fun g_dbus_object_manager_client_new_finish(res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDBusObjectManager] =>
//   fun g_dbus_object_manager_client_new_sync(connection: NullablePointer[GDBusConnection] tag, flags: I32, name: Pointer[U8] tag, objectpath: Pointer[U8] tag, getproxytypefunc: NullablePointer[FUNCTIONTYPE] tag, getproxytypeuserdata: Pointer[None] tag, getproxytypedestroynotify: NullablePointer[FUNCTIONTYPE] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDBusObjectManager] =>
//     @g_dbus_object_manager_client_new_sync(connection, flags, name, objectpath, getproxytypefunc, getproxytypeuserdata, getproxytypedestroynotify, cancellable, g_error)
//   fun g_dbus_object_manager_client_new_for_bus(bustype: I32, flags: I32, name: Pointer[U8] tag, objectpath: Pointer[U8] tag, getproxytypefunc: NullablePointer[FUNCTIONTYPE] tag, getproxytypeuserdata: Pointer[None] tag, getproxytypedestroynotify: NullablePointer[FUNCTIONTYPE] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//     @g_dbus_object_manager_client_new_for_bus(bustype, flags, name, objectpath, getproxytypefunc, getproxytypeuserdata, getproxytypedestroynotify, cancellable, callback, userdata)
//   fun g_dbus_object_manager_client_new_for_bus_finish(res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDBusObjectManager] =>
//   fun g_dbus_object_manager_client_new_for_bus_sync(bustype: I32, flags: I32, name: Pointer[U8] tag, objectpath: Pointer[U8] tag, getproxytypefunc: NullablePointer[FUNCTIONTYPE] tag, getproxytypeuserdata: Pointer[None] tag, getproxytypedestroynotify: NullablePointer[FUNCTIONTYPE] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDBusObjectManager] =>
//     @g_dbus_object_manager_client_new_for_bus_sync(bustype, flags, name, objectpath, getproxytypefunc, getproxytypeuserdata, getproxytypedestroynotify, cancellable, g_error)
//   fun g_dbus_object_manager_client_get_connection(manager: NullablePointer[GDBusObjectManagerClient] tag): NullablePointer[GDBusConnection] =>
//   fun g_dbus_object_manager_client_get_flags(manager: NullablePointer[GDBusObjectManagerClient] tag): I32 =>
//   fun g_dbus_object_manager_client_get_name(manager: NullablePointer[GDBusObjectManagerClient] tag): Pointer[U8] =>
//   fun g_dbus_object_manager_client_get_name_owner(manager: NullablePointer[GDBusObjectManagerClient] tag): Pointer[U8] =>
//   fun g_dbus_object_manager_server_get_type(): U64 =>
//   fun g_dbus_object_manager_server_new(objectpath: Pointer[U8] tag): NullablePointer[GDBusObjectManagerServer] =>
//   fun g_dbus_object_manager_server_get_connection(manager: NullablePointer[GDBusObjectManagerServer] tag): NullablePointer[GDBusConnection] =>
//   fun g_dbus_object_manager_server_set_connection(manager: NullablePointer[GDBusObjectManagerServer] tag, connection: NullablePointer[GDBusConnection] tag): None =>
//   fun g_dbus_object_manager_server_export(manager: NullablePointer[GDBusObjectManagerServer] tag, g_object: NullablePointer[GDBusObjectSkeleton] tag): None =>
//   fun g_dbus_object_manager_server_export_uniquely(manager: NullablePointer[GDBusObjectManagerServer] tag, g_object: NullablePointer[GDBusObjectSkeleton] tag): None =>
//   fun g_dbus_object_manager_server_is_exported(manager: NullablePointer[GDBusObjectManagerServer] tag, g_object: NullablePointer[GDBusObjectSkeleton] tag): I32 =>
//   fun g_dbus_object_manager_server_unexport(manager: NullablePointer[GDBusObjectManagerServer] tag, objectpath: Pointer[U8] tag): I32 =>
//   fun g_action_get_type(): U64 =>
//   fun g_action_get_name(action: NullablePointer[GAction] tag): Pointer[U8] =>
//   fun g_action_get_parameter_type(action: NullablePointer[GAction] tag): NullablePointer[GVariantType] =>
//   fun g_action_get_state_type(action: NullablePointer[GAction] tag): NullablePointer[GVariantType] =>
//   fun g_action_get_state_hint(action: NullablePointer[GAction] tag): NullablePointer[GVariant] =>
//   fun g_action_get_enabled(action: NullablePointer[GAction] tag): I32 =>
//   fun g_action_get_state(action: NullablePointer[GAction] tag): NullablePointer[GVariant] =>
//   fun g_action_change_state(action: NullablePointer[GAction] tag, value: NullablePointer[GVariant] tag): None =>
//   fun g_action_activate(action: NullablePointer[GAction] tag, parameter: NullablePointer[GVariant] tag): None =>
//   fun g_action_name_is_valid(actionname: Pointer[U8] tag): I32 =>
//   fun g_action_parse_detailed_name(detailedname: Pointer[U8] tag, actionname: NullablePointer[Pointer[U8]] tag, targetvalue: NullablePointer[NullablePointer[GVariant]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_action_print_detailed_name(actionname: Pointer[U8] tag, targetvalue: NullablePointer[GVariant] tag): Pointer[U8] =>
//   fun g_action_group_get_type(): U64 =>
//   fun g_action_group_has_action(actiongroup: NullablePointer[GActionGroup] tag, actionname: Pointer[U8] tag): I32 =>
//   fun g_action_group_list_actions(actiongroup: NullablePointer[GActionGroup] tag): NullablePointer[Pointer[U8]] =>
//   fun g_action_group_get_action_parameter_type(actiongroup: NullablePointer[GActionGroup] tag, actionname: Pointer[U8] tag): NullablePointer[GVariantType] =>
//   fun g_action_group_get_action_state_type(actiongroup: NullablePointer[GActionGroup] tag, actionname: Pointer[U8] tag): NullablePointer[GVariantType] =>
//   fun g_action_group_get_action_state_hint(actiongroup: NullablePointer[GActionGroup] tag, actionname: Pointer[U8] tag): NullablePointer[GVariant] =>
//   fun g_action_group_get_action_enabled(actiongroup: NullablePointer[GActionGroup] tag, actionname: Pointer[U8] tag): I32 =>
//   fun g_action_group_get_action_state(actiongroup: NullablePointer[GActionGroup] tag, actionname: Pointer[U8] tag): NullablePointer[GVariant] =>
//   fun g_action_group_change_action_state(actiongroup: NullablePointer[GActionGroup] tag, actionname: Pointer[U8] tag, value: NullablePointer[GVariant] tag): None =>
//   fun g_action_group_activate_action(actiongroup: NullablePointer[GActionGroup] tag, actionname: Pointer[U8] tag, parameter: NullablePointer[GVariant] tag): None =>
//   fun g_action_group_action_added(actiongroup: NullablePointer[GActionGroup] tag, actionname: Pointer[U8] tag): None =>
//   fun g_action_group_action_removed(actiongroup: NullablePointer[GActionGroup] tag, actionname: Pointer[U8] tag): None =>
//   fun g_action_group_action_enabled_changed(actiongroup: NullablePointer[GActionGroup] tag, actionname: Pointer[U8] tag, enabled: I32): None =>
//   fun g_action_group_action_state_changed(actiongroup: NullablePointer[GActionGroup] tag, actionname: Pointer[U8] tag, state: NullablePointer[GVariant] tag): None =>
//   fun g_action_group_query_action(actiongroup: NullablePointer[GActionGroup] tag, actionname: Pointer[U8] tag, enabled: Pointer[I32] tag, parametertype: NullablePointer[NullablePointer[GVariantType]] tag, statetype: NullablePointer[NullablePointer[GVariantType]] tag, statehint: NullablePointer[NullablePointer[GVariant]] tag, state: NullablePointer[NullablePointer[GVariant]] tag): I32 =>
//   fun g_dbus_connection_export_action_group(connection: NullablePointer[GDBusConnection] tag, objectpath: Pointer[U8] tag, actiongroup: NullablePointer[GActionGroup] tag, g_error: NullablePointer[NullablePointer[GError]] tag): U32 =>
//   fun g_dbus_connection_unexport_action_group(connection: NullablePointer[GDBusConnection] tag, exportid: U32): None =>
//   fun g_action_map_get_type(): U64 =>
//   fun g_action_map_lookup_action(actionmap: NullablePointer[GActionMap] tag, actionname: Pointer[U8] tag): NullablePointer[GAction] =>
//   fun g_action_map_add_action(actionmap: NullablePointer[GActionMap] tag, action: NullablePointer[GAction] tag): None =>
//   fun g_action_map_remove_action(actionmap: NullablePointer[GActionMap] tag, actionname: Pointer[U8] tag): None =>
//   fun g_action_map_add_action_entries(actionmap: NullablePointer[GActionMap] tag, entries: NullablePointer[GActionEntry] tag, nentries: I32, userdata: Pointer[None] tag): None =>
//   fun g_initable_get_type(): U64 =>
//   fun g_initable_init(initable: NullablePointer[GInitable] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
// /*  fun g_initable_new(objecttype: U64, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag, firstpropertyname: Pointer[U8] tag, ...): Pointer[None] =>
//   fun g_initable_newv(objecttype: U64, nparameters: U32, parameters: NullablePointer[GParameter] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[None] =>
//   fun g_initable_new_valist(objecttype: U64, firstpropertyname: Pointer[U8] tag, varargs: NullablePointer[Valisttag] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GObject] =>
//   fun g_async_initable_get_type(): U64 =>
//   fun g_async_initable_init_async(initable: NullablePointer[GAsyncInitable] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_async_initable_init_finish(initable: NullablePointer[GAsyncInitable] tag, res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
// /*  fun g_async_initable_new_async(objecttype: U64, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, firstpropertyname: Pointer[U8] tag, ...): None =>
//   fun g_async_initable_newv_async(objecttype: U64, nparameters: U32, parameters: NullablePointer[GParameter] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_async_initable_new_valist_async(objecttype: U64, firstpropertyname: Pointer[U8] tag, varargs: NullablePointer[Valisttag] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_async_initable_new_finish(initable: NullablePointer[GAsyncInitable] tag, res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GObject] =>
//   fun g_async_result_get_type(): U64 =>
//   fun g_async_result_get_user_data(res: NullablePointer[GAsyncResult] tag): Pointer[None] =>
//   fun g_async_result_get_source_object(res: NullablePointer[GAsyncResult] tag): NullablePointer[GObject] =>
//   fun g_async_result_legacy_propagate_error(res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_async_result_is_tagged(res: NullablePointer[GAsyncResult] tag, sourcetag: Pointer[None] tag): I32 =>
//   fun g_bytes_icon_get_type(): U64 =>
//   fun g_bytes_icon_new(bytes: NullablePointer[GBytes] tag): NullablePointer[GIcon] =>
//   fun g_bytes_icon_get_bytes(icon: NullablePointer[GBytesIcon] tag): NullablePointer[GBytes] =>
//   fun g_converter_get_type(): U64 =>
//   fun g_converter_convert(converter: NullablePointer[GConverter] tag, inbuf: Pointer[None] tag, inbufsize: U64, outbuf: Pointer[None] tag, outbufsize: U64, flags: I32, bytesread: Pointer[U64] tag, byteswritten: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_converter_reset(converter: NullablePointer[GConverter] tag): None =>
//   fun g_charset_converter_get_type(): U64 =>
//   fun g_charset_converter_new(tocharset: Pointer[U8] tag, fromcharset: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GCharsetConverter] =>
//   fun g_charset_converter_set_use_fallback(converter: NullablePointer[GCharsetConverter] tag, usefallback: I32): None =>
//   fun g_charset_converter_get_use_fallback(converter: NullablePointer[GCharsetConverter] tag): I32 =>
//   fun g_charset_converter_get_num_fallbacks(converter: NullablePointer[GCharsetConverter] tag): U32 =>
//   fun g_content_type_equals(type1: Pointer[U8] tag, type2: Pointer[U8] tag): I32 =>
//   fun g_content_type_is_a(g_type: Pointer[U8] tag, supertype: Pointer[U8] tag): I32 =>
//   fun g_content_type_is_mime_type(g_type: Pointer[U8] tag, mimetype: Pointer[U8] tag): I32 =>
//   fun g_content_type_is_unknown(g_type: Pointer[U8] tag): I32 =>
//   fun g_content_type_get_description(g_type: Pointer[U8] tag): Pointer[U8] =>
//   fun g_content_type_get_mime_type(g_type: Pointer[U8] tag): Pointer[U8] =>
//   fun g_content_type_get_icon(g_type: Pointer[U8] tag): NullablePointer[GIcon] =>
//   fun g_content_type_get_symbolic_icon(g_type: Pointer[U8] tag): NullablePointer[GIcon] =>
//   fun g_content_type_get_generic_icon_name(g_type: Pointer[U8] tag): Pointer[U8] =>
//   fun g_content_type_can_be_executable(g_type: Pointer[U8] tag): I32 =>
//   fun g_content_type_from_mime_type(mimetype: Pointer[U8] tag): Pointer[U8] =>
//   fun g_content_type_guess(filename: Pointer[U8] tag, data: Pointer[U8] tag, datasize: U64, resultuncertain: Pointer[I32] tag): Pointer[U8] =>
//   fun g_content_type_guess_for_tree(root: NullablePointer[GFile] tag): NullablePointer[Pointer[U8]] =>
//   fun g_content_types_get_registered(): NullablePointer[GList] =>
//   fun g_content_type_get_mime_dirs(): NullablePointer[Pointer[U8]] =>
//   fun g_content_type_set_mime_dirs(dirs: NullablePointer[Pointer[U8]] tag): None =>
//   fun g_credentials_get_type(): U64 =>
//   fun g_credentials_new(): NullablePointer[GCredentials] =>
//   fun g_credentials_to_string(credentials: NullablePointer[GCredentials] tag): Pointer[U8] =>
//   fun g_credentials_get_native(credentials: NullablePointer[GCredentials] tag, nativetype: I32): Pointer[None] =>
//   fun g_credentials_set_native(credentials: NullablePointer[GCredentials] tag, nativetype: I32, native: Pointer[None] tag): None =>
//   fun g_credentials_is_same_user(credentials: NullablePointer[GCredentials] tag, othercredentials: NullablePointer[GCredentials] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_credentials_get_unix_pid(credentials: NullablePointer[GCredentials] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_credentials_get_unix_user(credentials: NullablePointer[GCredentials] tag, g_error: NullablePointer[NullablePointer[GError]] tag): U32 =>
//   fun g_credentials_set_unix_user(credentials: NullablePointer[GCredentials] tag, uid: U32, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_datagram_based_get_type(): U64 =>
//   fun g_datagram_based_receive_messages(datagrambased: NullablePointer[GDatagramBased] tag, messages: NullablePointer[GInputMessage] tag, nummessages: U32, flags: I32, timeout: I64, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_datagram_based_send_messages(datagrambased: NullablePointer[GDatagramBased] tag, messages: NullablePointer[GOutputMessage] tag, nummessages: U32, flags: I32, timeout: I64, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_datagram_based_create_source(datagrambased: NullablePointer[GDatagramBased] tag, condition: I32, cancellable: NullablePointer[GCancellable] tag): NullablePointer[GSource] =>
//   fun g_datagram_based_condition_check(datagrambased: NullablePointer[GDatagramBased] tag, condition: I32): I32 =>
//   fun g_datagram_based_condition_wait(datagrambased: NullablePointer[GDatagramBased] tag, condition: I32, timeout: I64, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_data_output_stream_get_type(): U64 =>
//   fun g_data_output_stream_new(basestream: NullablePointer[GOutputStream] tag): NullablePointer[GDataOutputStream] =>
//   fun g_data_output_stream_set_byte_order(stream: NullablePointer[GDataOutputStream] tag, order: I32): None =>
//   fun g_data_output_stream_get_byte_order(stream: NullablePointer[GDataOutputStream] tag): I32 =>
//   fun g_data_output_stream_put_byte(stream: NullablePointer[GDataOutputStream] tag, data: U8, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_data_output_stream_put_int16(stream: NullablePointer[GDataOutputStream] tag, data: I16, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_data_output_stream_put_uint16(stream: NullablePointer[GDataOutputStream] tag, data: U16, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_data_output_stream_put_int32(stream: NullablePointer[GDataOutputStream] tag, data: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_data_output_stream_put_uint32(stream: NullablePointer[GDataOutputStream] tag, data: U32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_data_output_stream_put_int64(stream: NullablePointer[GDataOutputStream] tag, data: I64, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_data_output_stream_put_uint64(stream: NullablePointer[GDataOutputStream] tag, data: U64, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_data_output_stream_put_string(stream: NullablePointer[GDataOutputStream] tag, str: Pointer[U8] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_dbus_action_group_get_type(): U64 =>
//   fun g_dbus_action_group_get(connection: NullablePointer[GDBusConnection] tag, busname: Pointer[U8] tag, objectpath: Pointer[U8] tag): NullablePointer[GDBusActionGroup] =>
//   fun g_dbus_address_escape_value(string: Pointer[U8] tag): Pointer[U8] =>
//   fun g_dbus_is_address(string: Pointer[U8] tag): I32 =>
//   fun g_dbus_is_supported_address(string: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_dbus_address_get_stream(address: Pointer[U8] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_dbus_address_get_stream_finish(res: NullablePointer[GAsyncResult] tag, outguid: NullablePointer[Pointer[U8]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GIOStream] =>
//   fun g_dbus_address_get_stream_sync(address: Pointer[U8] tag, outguid: NullablePointer[Pointer[U8]] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GIOStream] =>
//   fun g_dbus_address_get_for_bus_sync(bustype: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_dbus_auth_observer_get_type(): U64 =>
//   fun g_dbus_auth_observer_new(): NullablePointer[GDBusAuthObserver] =>
//   fun g_dbus_auth_observer_authorize_authenticated_peer(observer: NullablePointer[GDBusAuthObserver] tag, stream: NullablePointer[GIOStream] tag, credentials: NullablePointer[GCredentials] tag): I32 =>
//   fun g_dbus_auth_observer_allow_mechanism(observer: NullablePointer[GDBusAuthObserver] tag, mechanism: Pointer[U8] tag): I32 =>
//   fun g_dbus_interface_get_type(): U64 =>
//   fun g_dbus_interface_get_info(g_interface: NullablePointer[GDBusInterface] tag): NullablePointer[GDBusInterfaceInfo] =>
//   fun g_dbus_interface_get_object(g_interface: NullablePointer[GDBusInterface] tag): NullablePointer[GDBusObject] =>
//   fun g_dbus_interface_set_object(g_interface: NullablePointer[GDBusInterface] tag, g_object: NullablePointer[GDBusObject] tag): None =>
//   fun g_dbus_interface_dup_object(g_interface: NullablePointer[GDBusInterface] tag): NullablePointer[GDBusObject] =>
//   fun g_dbus_menu_model_get_type(): U64 =>
//   fun g_dbus_menu_model_get(connection: NullablePointer[GDBusConnection] tag, busname: Pointer[U8] tag, objectpath: Pointer[U8] tag): NullablePointer[GDBusMenuModel] =>
//   fun g_dbus_message_get_type(): U64 =>
//   fun g_dbus_message_new(): NullablePointer[GDBusMessage] =>
//   fun g_dbus_message_new_signal(path: Pointer[U8] tag, g_interface: Pointer[U8] tag, signal: Pointer[U8] tag): NullablePointer[GDBusMessage] =>
//   fun g_dbus_message_new_method_call(name: Pointer[U8] tag, path: Pointer[U8] tag, g_interface: Pointer[U8] tag, method: Pointer[U8] tag): NullablePointer[GDBusMessage] =>
//   fun g_dbus_message_new_method_reply(methodcallmessage: NullablePointer[GDBusMessage] tag): NullablePointer[GDBusMessage] =>
// /*  fun g_dbus_message_new_method_error(methodcallmessage: NullablePointer[GDBusMessage] tag, errorname: Pointer[U8] tag, errormessageformat: Pointer[U8] tag, ...): NullablePointer[GDBusMessage] =>
//   fun g_dbus_message_new_method_error_valist(methodcallmessage: NullablePointer[GDBusMessage] tag, errorname: Pointer[U8] tag, errormessageformat: Pointer[U8] tag, varargs: NullablePointer[Valisttag] tag): NullablePointer[GDBusMessage] =>
//   fun g_dbus_message_new_method_error_literal(methodcallmessage: NullablePointer[GDBusMessage] tag, errorname: Pointer[U8] tag, errormessage: Pointer[U8] tag): NullablePointer[GDBusMessage] =>
//   fun g_dbus_message_print(message: NullablePointer[GDBusMessage] tag, indent: U32): Pointer[U8] =>
//   fun g_dbus_message_get_locked(message: NullablePointer[GDBusMessage] tag): I32 =>
//   fun g_dbus_message_lock(message: NullablePointer[GDBusMessage] tag): None =>
//   fun g_dbus_message_copy(message: NullablePointer[GDBusMessage] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDBusMessage] =>
//   fun g_dbus_message_get_byte_order(message: NullablePointer[GDBusMessage] tag): I32 =>
//   fun g_dbus_message_set_byte_order(message: NullablePointer[GDBusMessage] tag, byteorder: I32): None =>
//   fun g_dbus_message_get_message_type(message: NullablePointer[GDBusMessage] tag): I32 =>
//   fun g_dbus_message_set_message_type(message: NullablePointer[GDBusMessage] tag, g_type: I32): None =>
//   fun g_dbus_message_get_flags(message: NullablePointer[GDBusMessage] tag): I32 =>
//   fun g_dbus_message_set_flags(message: NullablePointer[GDBusMessage] tag, flags: I32): None =>
//   fun g_dbus_message_get_serial(message: NullablePointer[GDBusMessage] tag): U32 =>
//   fun g_dbus_message_set_serial(message: NullablePointer[GDBusMessage] tag, serial: U32): None =>
//   fun g_dbus_message_get_header(message: NullablePointer[GDBusMessage] tag, headerfield: I32): NullablePointer[GVariant] =>
//   fun g_dbus_message_set_header(message: NullablePointer[GDBusMessage] tag, headerfield: I32, value: NullablePointer[GVariant] tag): None =>
//   fun g_dbus_message_get_header_fields(message: NullablePointer[GDBusMessage] tag): Pointer[U8] =>
//   fun g_dbus_message_get_body(message: NullablePointer[GDBusMessage] tag): NullablePointer[GVariant] =>
//   fun g_dbus_message_set_body(message: NullablePointer[GDBusMessage] tag, body: NullablePointer[GVariant] tag): None =>
//   fun g_dbus_message_get_unix_fd_list(message: NullablePointer[GDBusMessage] tag): NullablePointer[GUnixFDList] =>
//   fun g_dbus_message_set_unix_fd_list(message: NullablePointer[GDBusMessage] tag, fdlist: NullablePointer[GUnixFDList] tag): None =>
//   fun g_dbus_message_get_reply_serial(message: NullablePointer[GDBusMessage] tag): U32 =>
//   fun g_dbus_message_set_reply_serial(message: NullablePointer[GDBusMessage] tag, value: U32): None =>
//   fun g_dbus_message_get_interface(message: NullablePointer[GDBusMessage] tag): Pointer[U8] =>
//   fun g_dbus_message_set_interface(message: NullablePointer[GDBusMessage] tag, value: Pointer[U8] tag): None =>
//   fun g_dbus_message_get_member(message: NullablePointer[GDBusMessage] tag): Pointer[U8] =>
//   fun g_dbus_message_set_member(message: NullablePointer[GDBusMessage] tag, value: Pointer[U8] tag): None =>
//   fun g_dbus_message_get_path(message: NullablePointer[GDBusMessage] tag): Pointer[U8] =>
//   fun g_dbus_message_set_path(message: NullablePointer[GDBusMessage] tag, value: Pointer[U8] tag): None =>
//   fun g_dbus_message_get_sender(message: NullablePointer[GDBusMessage] tag): Pointer[U8] =>
//   fun g_dbus_message_set_sender(message: NullablePointer[GDBusMessage] tag, value: Pointer[U8] tag): None =>
//   fun g_dbus_message_get_destination(message: NullablePointer[GDBusMessage] tag): Pointer[U8] =>
//   fun g_dbus_message_set_destination(message: NullablePointer[GDBusMessage] tag, value: Pointer[U8] tag): None =>
//   fun g_dbus_message_get_error_name(message: NullablePointer[GDBusMessage] tag): Pointer[U8] =>
//   fun g_dbus_message_set_error_name(message: NullablePointer[GDBusMessage] tag, value: Pointer[U8] tag): None =>
//   fun g_dbus_message_get_signature(message: NullablePointer[GDBusMessage] tag): Pointer[U8] =>
//   fun g_dbus_message_set_signature(message: NullablePointer[GDBusMessage] tag, value: Pointer[U8] tag): None =>
//   fun g_dbus_message_get_num_unix_fds(message: NullablePointer[GDBusMessage] tag): U32 =>
//   fun g_dbus_message_set_num_unix_fds(message: NullablePointer[GDBusMessage] tag, value: U32): None =>
//   fun g_dbus_message_get_arg0(message: NullablePointer[GDBusMessage] tag): Pointer[U8] =>
//   fun g_dbus_message_new_from_blob(blob: Pointer[U8] tag, bloblen: U64, capabilities: I32, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDBusMessage] =>
//   fun g_dbus_message_bytes_needed(blob: Pointer[U8] tag, bloblen: U64, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_dbus_message_to_blob(message: NullablePointer[GDBusMessage] tag, outsize: Pointer[U64] tag, capabilities: I32, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_dbus_message_to_gerror(message: NullablePointer[GDBusMessage] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_dbus_method_invocation_get_type(): U64 =>
//   fun g_dbus_method_invocation_get_sender(invocation: NullablePointer[GDBusMethodInvocation] tag): Pointer[U8] =>
//   fun g_dbus_method_invocation_get_object_path(invocation: NullablePointer[GDBusMethodInvocation] tag): Pointer[U8] =>
//   fun g_dbus_method_invocation_get_interface_name(invocation: NullablePointer[GDBusMethodInvocation] tag): Pointer[U8] =>
//   fun g_dbus_method_invocation_get_method_name(invocation: NullablePointer[GDBusMethodInvocation] tag): Pointer[U8] =>
//   fun g_dbus_method_invocation_get_method_info(invocation: NullablePointer[GDBusMethodInvocation] tag): NullablePointer[GDBusMethodInfo] =>
//   fun g_dbus_method_invocation_get_property_info(invocation: NullablePointer[GDBusMethodInvocation] tag): NullablePointer[GDBusPropertyInfo] =>
//   fun g_dbus_method_invocation_get_connection(invocation: NullablePointer[GDBusMethodInvocation] tag): NullablePointer[GDBusConnection] =>
//   fun g_dbus_method_invocation_get_message(invocation: NullablePointer[GDBusMethodInvocation] tag): NullablePointer[GDBusMessage] =>
//   fun g_dbus_method_invocation_get_parameters(invocation: NullablePointer[GDBusMethodInvocation] tag): NullablePointer[GVariant] =>
//   fun g_dbus_method_invocation_get_user_data(invocation: NullablePointer[GDBusMethodInvocation] tag): Pointer[None] =>
//   fun g_dbus_method_invocation_return_value(invocation: NullablePointer[GDBusMethodInvocation] tag, parameters: NullablePointer[GVariant] tag): None =>
//   fun g_dbus_method_invocation_return_value_with_unix_fd_list(invocation: NullablePointer[GDBusMethodInvocation] tag, parameters: NullablePointer[GVariant] tag, fdlist: NullablePointer[GUnixFDList] tag): None =>
// /*  fun g_dbus_method_invocation_return_error(invocation: NullablePointer[GDBusMethodInvocation] tag, domain: U32, code: I32, format: Pointer[U8] tag, ...): None =>
//   fun g_dbus_method_invocation_return_error_valist(invocation: NullablePointer[GDBusMethodInvocation] tag, domain: U32, code: I32, format: Pointer[U8] tag, varargs: NullablePointer[Valisttag] tag): None =>
//   fun g_dbus_method_invocation_return_error_literal(invocation: NullablePointer[GDBusMethodInvocation] tag, domain: U32, code: I32, message: Pointer[U8] tag): None =>
//   fun g_dbus_method_invocation_return_gerror(invocation: NullablePointer[GDBusMethodInvocation] tag, g_error: NullablePointer[GError] tag): None =>
//   fun g_dbus_method_invocation_take_error(invocation: NullablePointer[GDBusMethodInvocation] tag, g_error: NullablePointer[GError] tag): None =>
//   fun g_dbus_method_invocation_return_dbus_error(invocation: NullablePointer[GDBusMethodInvocation] tag, errorname: Pointer[U8] tag, errormessage: Pointer[U8] tag): None =>
//   fun g_bus_own_name(bustype: I32, name: Pointer[U8] tag, flags: I32, busacquiredhandler: NullablePointer[FUNCTIONTYPE] tag, nameacquiredhandler: NullablePointer[FUNCTIONTYPE] tag, namelosthandler: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, userdatafreefunc: NullablePointer[FUNCTIONTYPE] tag): U32 =>
//     @g_bus_own_name(bustype, name, flags, busacquiredhandler, nameacquiredhandler, namelosthandler, userdata, userdatafreefunc)
//   fun g_bus_own_name_on_connection(connection: NullablePointer[GDBusConnection] tag, name: Pointer[U8] tag, flags: I32, nameacquiredhandler: NullablePointer[FUNCTIONTYPE] tag, namelosthandler: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, userdatafreefunc: NullablePointer[FUNCTIONTYPE] tag): U32 =>
//     @g_bus_own_name_on_connection(connection, name, flags, nameacquiredhandler, namelosthandler, userdata, userdatafreefunc)
//   fun g_bus_own_name_with_closures(bustype: I32, name: Pointer[U8] tag, flags: I32, busacquiredclosure: NullablePointer[GClosure] tag, nameacquiredclosure: NullablePointer[GClosure] tag, namelostclosure: NullablePointer[GClosure] tag): U32 =>
//   fun g_bus_own_name_on_connection_with_closures(connection: NullablePointer[GDBusConnection] tag, name: Pointer[U8] tag, flags: I32, nameacquiredclosure: NullablePointer[GClosure] tag, namelostclosure: NullablePointer[GClosure] tag): U32 =>
//   fun g_bus_unown_name(ownerid: U32): None =>
//   fun g_bus_watch_name(bustype: I32, name: Pointer[U8] tag, flags: I32, nameappearedhandler: NullablePointer[FUNCTIONTYPE] tag, namevanishedhandler: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, userdatafreefunc: NullablePointer[FUNCTIONTYPE] tag): U32 =>
//     @g_bus_watch_name(bustype, name, flags, nameappearedhandler, namevanishedhandler, userdata, userdatafreefunc)
//   fun g_bus_watch_name_on_connection(connection: NullablePointer[GDBusConnection] tag, name: Pointer[U8] tag, flags: I32, nameappearedhandler: NullablePointer[FUNCTIONTYPE] tag, namevanishedhandler: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, userdatafreefunc: NullablePointer[FUNCTIONTYPE] tag): U32 =>
//     @g_bus_watch_name_on_connection(connection, name, flags, nameappearedhandler, namevanishedhandler, userdata, userdatafreefunc)
//   fun g_bus_watch_name_with_closures(bustype: I32, name: Pointer[U8] tag, flags: I32, nameappearedclosure: NullablePointer[GClosure] tag, namevanishedclosure: NullablePointer[GClosure] tag): U32 =>
//   fun g_bus_watch_name_on_connection_with_closures(connection: NullablePointer[GDBusConnection] tag, name: Pointer[U8] tag, flags: I32, nameappearedclosure: NullablePointer[GClosure] tag, namevanishedclosure: NullablePointer[GClosure] tag): U32 =>
//   fun g_bus_unwatch_name(watcherid: U32): None =>
//   fun g_dbus_object_get_type(): U64 =>
//   fun g_dbus_object_get_object_path(g_object: NullablePointer[GDBusObject] tag): Pointer[U8] =>
//   fun g_dbus_object_get_interfaces(g_object: NullablePointer[GDBusObject] tag): NullablePointer[GList] =>
//   fun g_dbus_object_get_interface(g_object: NullablePointer[GDBusObject] tag, interfacename: Pointer[U8] tag): NullablePointer[GDBusInterface] =>
//   fun g_dbus_object_manager_get_type(): U64 =>
//   fun g_dbus_object_manager_get_object_path(manager: NullablePointer[GDBusObjectManager] tag): Pointer[U8] =>
//   fun g_dbus_object_manager_get_objects(manager: NullablePointer[GDBusObjectManager] tag): NullablePointer[GList] =>
//   fun g_dbus_object_manager_get_object(manager: NullablePointer[GDBusObjectManager] tag, objectpath: Pointer[U8] tag): NullablePointer[GDBusObject] =>
//   fun g_dbus_object_manager_get_interface(manager: NullablePointer[GDBusObjectManager] tag, objectpath: Pointer[U8] tag, interfacename: Pointer[U8] tag): NullablePointer[GDBusInterface] =>
//   fun g_dbus_server_get_type(): U64 =>
//   fun g_dbus_server_new_sync(address: Pointer[U8] tag, flags: I32, guid: Pointer[U8] tag, observer: NullablePointer[GDBusAuthObserver] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDBusServer] =>
//   fun g_dbus_server_get_client_address(server: NullablePointer[GDBusServer] tag): Pointer[U8] =>
//   fun g_dbus_server_get_guid(server: NullablePointer[GDBusServer] tag): Pointer[U8] =>
//   fun g_dbus_server_get_flags(server: NullablePointer[GDBusServer] tag): I32 =>
//   fun g_dbus_server_start(server: NullablePointer[GDBusServer] tag): None =>
//   fun g_dbus_server_stop(server: NullablePointer[GDBusServer] tag): None =>
//   fun g_dbus_server_is_active(server: NullablePointer[GDBusServer] tag): I32 =>
//   fun g_dbus_is_guid(string: Pointer[U8] tag): I32 =>
//   fun g_dbus_generate_guid(): Pointer[U8] =>
//   fun g_dbus_is_name(string: Pointer[U8] tag): I32 =>
//   fun g_dbus_is_unique_name(string: Pointer[U8] tag): I32 =>
//   fun g_dbus_is_member_name(string: Pointer[U8] tag): I32 =>
//   fun g_dbus_is_interface_name(string: Pointer[U8] tag): I32 =>
//   fun g_dbus_gvariant_to_gvalue(value: NullablePointer[GVariant] tag, outgvalue: NullablePointer[GValue] tag): None =>
//   fun g_dbus_gvalue_to_gvariant(gvalue: NullablePointer[GValue] tag, g_type: NullablePointer[GVariantType] tag): NullablePointer[GVariant] =>
//   fun g_dbus_escape_object_path_bytestring(bytes: Pointer[U8] tag): Pointer[U8] =>
//   fun g_dbus_escape_object_path(s: Pointer[U8] tag): Pointer[U8] =>
//   fun g_dbus_unescape_object_path(s: Pointer[U8] tag): Pointer[U8] =>
//   fun g_drive_get_type(): U64 =>
//   fun g_drive_get_name(drive: NullablePointer[GDrive] tag): Pointer[U8] =>
//   fun g_drive_get_icon(drive: NullablePointer[GDrive] tag): NullablePointer[GIcon] =>
//   fun g_drive_get_symbolic_icon(drive: NullablePointer[GDrive] tag): NullablePointer[GIcon] =>
//   fun g_drive_has_volumes(drive: NullablePointer[GDrive] tag): I32 =>
//   fun g_drive_get_volumes(drive: NullablePointer[GDrive] tag): NullablePointer[GList] =>
//   fun g_drive_is_removable(drive: NullablePointer[GDrive] tag): I32 =>
//   fun g_drive_is_media_removable(drive: NullablePointer[GDrive] tag): I32 =>
//   fun g_drive_has_media(drive: NullablePointer[GDrive] tag): I32 =>
//   fun g_drive_is_media_check_automatic(drive: NullablePointer[GDrive] tag): I32 =>
//   fun g_drive_can_poll_for_media(drive: NullablePointer[GDrive] tag): I32 =>
//   fun g_drive_can_eject(drive: NullablePointer[GDrive] tag): I32 =>
//   fun g_drive_eject(drive: NullablePointer[GDrive] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_drive_eject_finish(drive: NullablePointer[GDrive] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_drive_poll_for_media(drive: NullablePointer[GDrive] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_drive_poll_for_media_finish(drive: NullablePointer[GDrive] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_drive_get_identifier(drive: NullablePointer[GDrive] tag, kind: Pointer[U8] tag): Pointer[U8] =>
//   fun g_drive_enumerate_identifiers(drive: NullablePointer[GDrive] tag): NullablePointer[Pointer[U8]] =>
//   fun g_drive_get_start_stop_type(drive: NullablePointer[GDrive] tag): I32 =>
//   fun g_drive_can_start(drive: NullablePointer[GDrive] tag): I32 =>
//   fun g_drive_can_start_degraded(drive: NullablePointer[GDrive] tag): I32 =>
//   fun g_drive_start(drive: NullablePointer[GDrive] tag, flags: I32, mountoperation: NullablePointer[GMountOperation] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_drive_start_finish(drive: NullablePointer[GDrive] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_drive_can_stop(drive: NullablePointer[GDrive] tag): I32 =>
//   fun g_drive_stop(drive: NullablePointer[GDrive] tag, flags: I32, mountoperation: NullablePointer[GMountOperation] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_drive_stop_finish(drive: NullablePointer[GDrive] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_drive_eject_with_operation(drive: NullablePointer[GDrive] tag, flags: I32, mountoperation: NullablePointer[GMountOperation] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_drive_eject_with_operation_finish(drive: NullablePointer[GDrive] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_drive_get_sort_key(drive: NullablePointer[GDrive] tag): Pointer[U8] =>
//   fun g_dtls_connection_get_type(): U64 =>
//   fun g_dtls_connection_set_database(conn: NullablePointer[GDtlsConnection] tag, database: NullablePointer[GTlsDatabase] tag): None =>
//   fun g_dtls_connection_get_database(conn: NullablePointer[GDtlsConnection] tag): NullablePointer[GTlsDatabase] =>
//   fun g_dtls_connection_set_certificate(conn: NullablePointer[GDtlsConnection] tag, certificate: NullablePointer[GTlsCertificate] tag): None =>
//   fun g_dtls_connection_get_certificate(conn: NullablePointer[GDtlsConnection] tag): NullablePointer[GTlsCertificate] =>
//   fun g_dtls_connection_set_interaction(conn: NullablePointer[GDtlsConnection] tag, interaction: NullablePointer[GTlsInteraction] tag): None =>
//   fun g_dtls_connection_get_interaction(conn: NullablePointer[GDtlsConnection] tag): NullablePointer[GTlsInteraction] =>
//   fun g_dtls_connection_get_peer_certificate(conn: NullablePointer[GDtlsConnection] tag): NullablePointer[GTlsCertificate] =>
//   fun g_dtls_connection_get_peer_certificate_errors(conn: NullablePointer[GDtlsConnection] tag): I32 =>
//   fun g_dtls_connection_set_require_close_notify(conn: NullablePointer[GDtlsConnection] tag, requireclosenotify: I32): None =>
//   fun g_dtls_connection_get_require_close_notify(conn: NullablePointer[GDtlsConnection] tag): I32 =>
//   fun g_dtls_connection_set_rehandshake_mode(conn: NullablePointer[GDtlsConnection] tag, mode: I32): None =>
//   fun g_dtls_connection_get_rehandshake_mode(conn: NullablePointer[GDtlsConnection] tag): I32 =>
//   fun g_dtls_connection_handshake(conn: NullablePointer[GDtlsConnection] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_dtls_connection_handshake_async(conn: NullablePointer[GDtlsConnection] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_dtls_connection_handshake_finish(conn: NullablePointer[GDtlsConnection] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_dtls_connection_shutdown(conn: NullablePointer[GDtlsConnection] tag, shutdownread: I32, shutdownwrite: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_dtls_connection_shutdown_async(conn: NullablePointer[GDtlsConnection] tag, shutdownread: I32, shutdownwrite: I32, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_dtls_connection_shutdown_finish(conn: NullablePointer[GDtlsConnection] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_dtls_connection_close(conn: NullablePointer[GDtlsConnection] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_dtls_connection_close_async(conn: NullablePointer[GDtlsConnection] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_dtls_connection_close_finish(conn: NullablePointer[GDtlsConnection] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_dtls_connection_emit_accept_certificate(conn: NullablePointer[GDtlsConnection] tag, peercert: NullablePointer[GTlsCertificate] tag, errors: I32): I32 =>
//   fun g_dtls_connection_set_advertised_protocols(conn: NullablePointer[GDtlsConnection] tag, protocols: NullablePointer[Pointer[U8]] tag): None =>
//   fun g_dtls_connection_get_negotiated_protocol(conn: NullablePointer[GDtlsConnection] tag): Pointer[U8] =>
//   fun g_dtls_connection_get_channel_binding_data(conn: NullablePointer[GDtlsConnection] tag, g_type: I32, data: NullablePointer[GByteArray] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_dtls_client_connection_get_type(): U64 =>
//   fun g_dtls_client_connection_new(basesocket: NullablePointer[GDatagramBased] tag, serveridentity: NullablePointer[GSocketConnectable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDatagramBased] =>
//   fun g_dtls_client_connection_get_validation_flags(conn: NullablePointer[GDtlsClientConnection] tag): I32 =>
//   fun g_dtls_client_connection_set_validation_flags(conn: NullablePointer[GDtlsClientConnection] tag, flags: I32): None =>
//   fun g_dtls_client_connection_get_server_identity(conn: NullablePointer[GDtlsClientConnection] tag): NullablePointer[GSocketConnectable] =>
//   fun g_dtls_client_connection_set_server_identity(conn: NullablePointer[GDtlsClientConnection] tag, identity: NullablePointer[GSocketConnectable] tag): None =>
//   fun g_dtls_client_connection_get_accepted_cas(conn: NullablePointer[GDtlsClientConnection] tag): NullablePointer[GList] =>
//   fun g_dtls_server_connection_get_type(): U64 =>
//   fun g_dtls_server_connection_new(basesocket: NullablePointer[GDatagramBased] tag, certificate: NullablePointer[GTlsCertificate] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GDatagramBased] =>
//   fun g_icon_get_type(): U64 =>
//   fun g_icon_hash(icon: Pointer[None] tag): U32 =>
//   fun g_icon_equal(icon1: NullablePointer[GIcon] tag, icon2: NullablePointer[GIcon] tag): I32 =>
//   fun g_icon_to_string(icon: NullablePointer[GIcon] tag): Pointer[U8] =>
//   fun g_icon_new_for_string(str: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GIcon] =>
//   fun g_icon_serialize(icon: NullablePointer[GIcon] tag): NullablePointer[GVariant] =>
//   fun g_icon_deserialize(value: NullablePointer[GVariant] tag): NullablePointer[GIcon] =>
//   fun g_emblem_get_type(): U64 =>
//   fun g_emblem_new(icon: NullablePointer[GIcon] tag): NullablePointer[GEmblem] =>
//   fun g_emblem_new_with_origin(icon: NullablePointer[GIcon] tag, origin: I32): NullablePointer[GEmblem] =>
//   fun g_emblem_get_icon(emblem: NullablePointer[GEmblem] tag): NullablePointer[GIcon] =>
//   fun g_emblem_get_origin(emblem: NullablePointer[GEmblem] tag): I32 =>
//   fun g_emblemed_icon_get_type(): U64 =>
//   fun g_emblemed_icon_new(icon: NullablePointer[GIcon] tag, emblem: NullablePointer[GEmblem] tag): NullablePointer[GIcon] =>
//   fun g_emblemed_icon_get_icon(emblemed: NullablePointer[GEmblemedIcon] tag): NullablePointer[GIcon] =>
//   fun g_emblemed_icon_get_emblems(emblemed: NullablePointer[GEmblemedIcon] tag): NullablePointer[GList] =>
//   fun g_emblemed_icon_add_emblem(emblemed: NullablePointer[GEmblemedIcon] tag, emblem: NullablePointer[GEmblem] tag): None =>
//   fun g_emblemed_icon_clear_emblems(emblemed: NullablePointer[GEmblemedIcon] tag): None =>
//   fun g_file_get_type(): U64 =>
//   fun g_file_new_for_path(path: Pointer[U8] tag): NullablePointer[GFile] =>
//   fun g_file_new_for_uri(uri: Pointer[U8] tag): NullablePointer[GFile] =>
//   fun g_file_new_for_commandline_arg(arg: Pointer[U8] tag): NullablePointer[GFile] =>
//   fun g_file_new_for_commandline_arg_and_cwd(arg: Pointer[U8] tag, cwd: Pointer[U8] tag): NullablePointer[GFile] =>
//   fun g_file_new_tmp(tmpl: Pointer[U8] tag, iostream: NullablePointer[NullablePointer[GFileIOStream]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFile] =>
//   fun g_file_parse_name(parsename: Pointer[U8] tag): NullablePointer[GFile] =>
// /*  fun g_file_new_build_filename(firstelement: Pointer[U8] tag, ...): NullablePointer[GFile] =>
//   fun g_file_dup(file: NullablePointer[GFile] tag): NullablePointer[GFile] =>
//   fun g_file_hash(file: Pointer[None] tag): U32 =>
//   fun g_file_equal(file1: NullablePointer[GFile] tag, file2: NullablePointer[GFile] tag): I32 =>
//   fun g_file_get_basename(file: NullablePointer[GFile] tag): Pointer[U8] =>
//   fun g_file_get_path(file: NullablePointer[GFile] tag): Pointer[U8] =>
//   fun g_file_peek_path(file: NullablePointer[GFile] tag): Pointer[U8] =>
//   fun g_file_get_uri(file: NullablePointer[GFile] tag): Pointer[U8] =>
//   fun g_file_get_parse_name(file: NullablePointer[GFile] tag): Pointer[U8] =>
//   fun g_file_get_parent(file: NullablePointer[GFile] tag): NullablePointer[GFile] =>
//   fun g_file_has_parent(file: NullablePointer[GFile] tag, parent: NullablePointer[GFile] tag): I32 =>
//   fun g_file_get_child(file: NullablePointer[GFile] tag, name: Pointer[U8] tag): NullablePointer[GFile] =>
//   fun g_file_get_child_for_display_name(file: NullablePointer[GFile] tag, displayname: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFile] =>
//   fun g_file_has_prefix(file: NullablePointer[GFile] tag, prefix: NullablePointer[GFile] tag): I32 =>
//   fun g_file_get_relative_path(parent: NullablePointer[GFile] tag, descendant: NullablePointer[GFile] tag): Pointer[U8] =>
//   fun g_file_resolve_relative_path(file: NullablePointer[GFile] tag, relativepath: Pointer[U8] tag): NullablePointer[GFile] =>
//   fun g_file_is_native(file: NullablePointer[GFile] tag): I32 =>
//   fun g_file_has_uri_scheme(file: NullablePointer[GFile] tag, urischeme: Pointer[U8] tag): I32 =>
//   fun g_file_get_uri_scheme(file: NullablePointer[GFile] tag): Pointer[U8] =>
//   fun g_file_read(file: NullablePointer[GFile] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileInputStream] =>
//   fun g_file_read_async(file: NullablePointer[GFile] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_read_finish(file: NullablePointer[GFile] tag, res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileInputStream] =>
//   fun g_file_append_to(file: NullablePointer[GFile] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileOutputStream] =>
//   fun g_file_create(file: NullablePointer[GFile] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileOutputStream] =>
//   fun g_file_replace(file: NullablePointer[GFile] tag, etag: Pointer[U8] tag, makebackup: I32, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileOutputStream] =>
//   fun g_file_append_to_async(file: NullablePointer[GFile] tag, flags: I32, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_append_to_finish(file: NullablePointer[GFile] tag, res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileOutputStream] =>
//   fun g_file_create_async(file: NullablePointer[GFile] tag, flags: I32, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_create_finish(file: NullablePointer[GFile] tag, res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileOutputStream] =>
//   fun g_file_replace_async(file: NullablePointer[GFile] tag, etag: Pointer[U8] tag, makebackup: I32, flags: I32, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_replace_finish(file: NullablePointer[GFile] tag, res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileOutputStream] =>
//   fun g_file_open_readwrite(file: NullablePointer[GFile] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileIOStream] =>
//   fun g_file_open_readwrite_async(file: NullablePointer[GFile] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_open_readwrite_finish(file: NullablePointer[GFile] tag, res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileIOStream] =>
//   fun g_file_create_readwrite(file: NullablePointer[GFile] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileIOStream] =>
//   fun g_file_create_readwrite_async(file: NullablePointer[GFile] tag, flags: I32, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_create_readwrite_finish(file: NullablePointer[GFile] tag, res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileIOStream] =>
//   fun g_file_replace_readwrite(file: NullablePointer[GFile] tag, etag: Pointer[U8] tag, makebackup: I32, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileIOStream] =>
//   fun g_file_replace_readwrite_async(file: NullablePointer[GFile] tag, etag: Pointer[U8] tag, makebackup: I32, flags: I32, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_replace_readwrite_finish(file: NullablePointer[GFile] tag, res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileIOStream] =>
//   fun g_file_query_exists(file: NullablePointer[GFile] tag, cancellable: NullablePointer[GCancellable] tag): I32 =>
//   fun g_file_query_file_type(file: NullablePointer[GFile] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag): I32 =>
//   fun g_file_query_info(file: NullablePointer[GFile] tag, attributes: Pointer[U8] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileInfo] =>
//   fun g_file_query_info_async(file: NullablePointer[GFile] tag, attributes: Pointer[U8] tag, flags: I32, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_query_info_finish(file: NullablePointer[GFile] tag, res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileInfo] =>
//   fun g_file_query_filesystem_info(file: NullablePointer[GFile] tag, attributes: Pointer[U8] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileInfo] =>
//   fun g_file_query_filesystem_info_async(file: NullablePointer[GFile] tag, attributes: Pointer[U8] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_query_filesystem_info_finish(file: NullablePointer[GFile] tag, res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileInfo] =>
//   fun g_file_find_enclosing_mount(file: NullablePointer[GFile] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GMount] =>
//   fun g_file_find_enclosing_mount_async(file: NullablePointer[GFile] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_find_enclosing_mount_finish(file: NullablePointer[GFile] tag, res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GMount] =>
//   fun g_file_enumerate_children(file: NullablePointer[GFile] tag, attributes: Pointer[U8] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileEnumerator] =>
//   fun g_file_enumerate_children_async(file: NullablePointer[GFile] tag, attributes: Pointer[U8] tag, flags: I32, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_enumerate_children_finish(file: NullablePointer[GFile] tag, res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileEnumerator] =>
//   fun g_file_set_display_name(file: NullablePointer[GFile] tag, displayname: Pointer[U8] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFile] =>
//   fun g_file_set_display_name_async(file: NullablePointer[GFile] tag, displayname: Pointer[U8] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_set_display_name_finish(file: NullablePointer[GFile] tag, res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFile] =>
//   fun g_file_delete(file: NullablePointer[GFile] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_delete_async(file: NullablePointer[GFile] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_delete_finish(file: NullablePointer[GFile] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_trash(file: NullablePointer[GFile] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_trash_async(file: NullablePointer[GFile] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_trash_finish(file: NullablePointer[GFile] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_copy(source: NullablePointer[GFile] tag, destination: NullablePointer[GFile] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, progresscallback: NullablePointer[FUNCTIONTYPE] tag, progresscallbackdata: Pointer[None] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_copy_async(source: NullablePointer[GFile] tag, destination: NullablePointer[GFile] tag, flags: I32, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, progresscallback: NullablePointer[FUNCTIONTYPE] tag, progresscallbackdata: Pointer[None] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_copy_finish(file: NullablePointer[GFile] tag, res: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_move(source: NullablePointer[GFile] tag, destination: NullablePointer[GFile] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, progresscallback: NullablePointer[FUNCTIONTYPE] tag, progresscallbackdata: Pointer[None] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_make_directory(file: NullablePointer[GFile] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_make_directory_async(file: NullablePointer[GFile] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_make_directory_finish(file: NullablePointer[GFile] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_make_directory_with_parents(file: NullablePointer[GFile] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_make_symbolic_link(file: NullablePointer[GFile] tag, symlinkvalue: Pointer[U8] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_query_settable_attributes(file: NullablePointer[GFile] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileAttributeInfoList] =>
//   fun g_file_query_writable_namespaces(file: NullablePointer[GFile] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileAttributeInfoList] =>
//   fun g_file_set_attribute(file: NullablePointer[GFile] tag, attribute: Pointer[U8] tag, g_type: I32, valuep: Pointer[None] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_set_attributes_from_info(file: NullablePointer[GFile] tag, info: NullablePointer[GFileInfo] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_set_attributes_async(file: NullablePointer[GFile] tag, info: NullablePointer[GFileInfo] tag, flags: I32, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_set_attributes_finish(file: NullablePointer[GFile] tag, result: NullablePointer[GAsyncResult] tag, info: NullablePointer[NullablePointer[GFileInfo]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_set_attribute_string(file: NullablePointer[GFile] tag, attribute: Pointer[U8] tag, value: Pointer[U8] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_set_attribute_byte_string(file: NullablePointer[GFile] tag, attribute: Pointer[U8] tag, value: Pointer[U8] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_set_attribute_uint32(file: NullablePointer[GFile] tag, attribute: Pointer[U8] tag, value: U32, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_set_attribute_int32(file: NullablePointer[GFile] tag, attribute: Pointer[U8] tag, value: I32, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_set_attribute_uint64(file: NullablePointer[GFile] tag, attribute: Pointer[U8] tag, value: U64, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_set_attribute_int64(file: NullablePointer[GFile] tag, attribute: Pointer[U8] tag, value: I64, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_mount_enclosing_volume(location: NullablePointer[GFile] tag, flags: I32, mountoperation: NullablePointer[GMountOperation] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_mount_enclosing_volume_finish(location: NullablePointer[GFile] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_mount_mountable(file: NullablePointer[GFile] tag, flags: I32, mountoperation: NullablePointer[GMountOperation] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_mount_mountable_finish(file: NullablePointer[GFile] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFile] =>
//   fun g_file_unmount_mountable(file: NullablePointer[GFile] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_unmount_mountable_finish(file: NullablePointer[GFile] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_unmount_mountable_with_operation(file: NullablePointer[GFile] tag, flags: I32, mountoperation: NullablePointer[GMountOperation] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_unmount_mountable_with_operation_finish(file: NullablePointer[GFile] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_eject_mountable(file: NullablePointer[GFile] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_eject_mountable_finish(file: NullablePointer[GFile] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_eject_mountable_with_operation(file: NullablePointer[GFile] tag, flags: I32, mountoperation: NullablePointer[GMountOperation] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_eject_mountable_with_operation_finish(file: NullablePointer[GFile] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_build_attribute_list_for_copy(file: NullablePointer[GFile] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[U8] =>
//   fun g_file_copy_attributes(source: NullablePointer[GFile] tag, destination: NullablePointer[GFile] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_monitor_directory(file: NullablePointer[GFile] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileMonitor] =>
//   fun g_file_monitor_file(file: NullablePointer[GFile] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileMonitor] =>
//   fun g_file_monitor(file: NullablePointer[GFile] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GFileMonitor] =>
//   fun g_file_measure_disk_usage(file: NullablePointer[GFile] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, progresscallback: NullablePointer[FUNCTIONTYPE] tag, progressdata: Pointer[None] tag, diskusage: Pointer[U64] tag, numdirs: Pointer[U64] tag, numfiles: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_measure_disk_usage_async(file: NullablePointer[GFile] tag, flags: I32, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, progresscallback: NullablePointer[FUNCTIONTYPE] tag, progressdata: Pointer[None] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_measure_disk_usage_finish(file: NullablePointer[GFile] tag, result: NullablePointer[GAsyncResult] tag, diskusage: Pointer[U64] tag, numdirs: Pointer[U64] tag, numfiles: Pointer[U64] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_start_mountable(file: NullablePointer[GFile] tag, flags: I32, startoperation: NullablePointer[GMountOperation] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_start_mountable_finish(file: NullablePointer[GFile] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_stop_mountable(file: NullablePointer[GFile] tag, flags: I32, mountoperation: NullablePointer[GMountOperation] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_stop_mountable_finish(file: NullablePointer[GFile] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_poll_mountable(file: NullablePointer[GFile] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_poll_mountable_finish(file: NullablePointer[GFile] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_query_default_handler(file: NullablePointer[GFile] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GAppInfo] =>
//   fun g_file_query_default_handler_async(file: NullablePointer[GFile] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_query_default_handler_finish(file: NullablePointer[GFile] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GAppInfo] =>
//   fun g_file_load_contents(file: NullablePointer[GFile] tag, cancellable: NullablePointer[GCancellable] tag, contents: NullablePointer[Pointer[U8]] tag, length: Pointer[U64] tag, etagout: NullablePointer[Pointer[U8]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_load_contents_async(file: NullablePointer[GFile] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_load_contents_finish(file: NullablePointer[GFile] tag, res: NullablePointer[GAsyncResult] tag, contents: NullablePointer[Pointer[U8]] tag, length: Pointer[U64] tag, etagout: NullablePointer[Pointer[U8]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_load_partial_contents_async(file: NullablePointer[GFile] tag, cancellable: NullablePointer[GCancellable] tag, readmorecallback: NullablePointer[FUNCTIONTYPE] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_load_partial_contents_finish(file: NullablePointer[GFile] tag, res: NullablePointer[GAsyncResult] tag, contents: NullablePointer[Pointer[U8]] tag, length: Pointer[U64] tag, etagout: NullablePointer[Pointer[U8]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_replace_contents(file: NullablePointer[GFile] tag, contents: Pointer[U8] tag, length: U64, etag: Pointer[U8] tag, makebackup: I32, flags: I32, newetag: NullablePointer[Pointer[U8]] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_replace_contents_async(file: NullablePointer[GFile] tag, contents: Pointer[U8] tag, length: U64, etag: Pointer[U8] tag, makebackup: I32, flags: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_replace_contents_bytes_async(file: NullablePointer[GFile] tag, contents: NullablePointer[GBytes] tag, etag: Pointer[U8] tag, makebackup: I32, flags: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_replace_contents_finish(file: NullablePointer[GFile] tag, res: NullablePointer[GAsyncResult] tag, newetag: NullablePointer[Pointer[U8]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_file_supports_thread_contexts(file: NullablePointer[GFile] tag): I32 =>
//   fun g_file_load_bytes(file: NullablePointer[GFile] tag, cancellable: NullablePointer[GCancellable] tag, etagout: NullablePointer[Pointer[U8]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GBytes] =>
//   fun g_file_load_bytes_async(file: NullablePointer[GFile] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_file_load_bytes_finish(file: NullablePointer[GFile] tag, result: NullablePointer[GAsyncResult] tag, etagout: NullablePointer[Pointer[U8]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GBytes] =>
//   fun g_file_icon_get_type(): U64 =>
//   fun g_file_icon_new(file: NullablePointer[GFile] tag): NullablePointer[GIcon] =>
//   fun g_file_icon_get_file(icon: NullablePointer[GFileIcon] tag): NullablePointer[GFile] =>
//   fun g_file_info_get_type(): U64 =>
//   fun g_file_info_new(): NullablePointer[GFileInfo] =>
//   fun g_file_info_dup(other: NullablePointer[GFileInfo] tag): NullablePointer[GFileInfo] =>
//   fun g_file_info_copy_into(srcinfo: NullablePointer[GFileInfo] tag, destinfo: NullablePointer[GFileInfo] tag): None =>
//   fun g_file_info_has_attribute(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag): I32 =>
//   fun g_file_info_has_namespace(info: NullablePointer[GFileInfo] tag, namespace: Pointer[U8] tag): I32 =>
//   fun g_file_info_list_attributes(info: NullablePointer[GFileInfo] tag, namespace: Pointer[U8] tag): NullablePointer[Pointer[U8]] =>
//   fun g_file_info_get_attribute_data(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag, g_type: Pointer[I32] tag, valuepp: NullablePointer[Pointer[None]] tag, status: Pointer[I32] tag): I32 =>
//   fun g_file_info_get_attribute_type(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag): I32 =>
//   fun g_file_info_remove_attribute(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag): None =>
//   fun g_file_info_get_attribute_status(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag): I32 =>
//   fun g_file_info_set_attribute_status(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag, status: I32): I32 =>
//   fun g_file_info_get_attribute_as_string(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag): Pointer[U8] =>
//   fun g_file_info_get_attribute_string(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag): Pointer[U8] =>
//   fun g_file_info_get_attribute_byte_string(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag): Pointer[U8] =>
//   fun g_file_info_get_attribute_boolean(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag): I32 =>
//   fun g_file_info_get_attribute_uint32(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag): U32 =>
//   fun g_file_info_get_attribute_int32(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag): I32 =>
//   fun g_file_info_get_attribute_uint64(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag): U64 =>
//   fun g_file_info_get_attribute_int64(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag): I64 =>
//   fun g_file_info_get_attribute_object(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag): NullablePointer[GObject] =>
//   fun g_file_info_get_attribute_stringv(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag): NullablePointer[Pointer[U8]] =>
//   fun g_file_info_set_attribute(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag, g_type: I32, valuep: Pointer[None] tag): None =>
//   fun g_file_info_set_attribute_string(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag, attrvalue: Pointer[U8] tag): None =>
//   fun g_file_info_set_attribute_byte_string(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag, attrvalue: Pointer[U8] tag): None =>
//   fun g_file_info_set_attribute_boolean(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag, attrvalue: I32): None =>
//   fun g_file_info_set_attribute_uint32(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag, attrvalue: U32): None =>
//   fun g_file_info_set_attribute_int32(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag, attrvalue: I32): None =>
//   fun g_file_info_set_attribute_uint64(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag, attrvalue: U64): None =>
//   fun g_file_info_set_attribute_int64(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag, attrvalue: I64): None =>
//   fun g_file_info_set_attribute_object(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag, attrvalue: NullablePointer[GObject] tag): None =>
//   fun g_file_info_set_attribute_stringv(info: NullablePointer[GFileInfo] tag, attribute: Pointer[U8] tag, attrvalue: NullablePointer[Pointer[U8]] tag): None =>
//   fun g_file_info_clear_status(info: NullablePointer[GFileInfo] tag): None =>
//   fun g_file_info_get_deletion_date(info: NullablePointer[GFileInfo] tag): NullablePointer[GDateTime] =>
//   fun g_file_info_get_file_type(info: NullablePointer[GFileInfo] tag): I32 =>
//   fun g_file_info_get_is_hidden(info: NullablePointer[GFileInfo] tag): I32 =>
//   fun g_file_info_get_is_backup(info: NullablePointer[GFileInfo] tag): I32 =>
//   fun g_file_info_get_is_symlink(info: NullablePointer[GFileInfo] tag): I32 =>
//   fun g_file_info_get_name(info: NullablePointer[GFileInfo] tag): Pointer[U8] =>
//   fun g_file_info_get_display_name(info: NullablePointer[GFileInfo] tag): Pointer[U8] =>
//   fun g_file_info_get_edit_name(info: NullablePointer[GFileInfo] tag): Pointer[U8] =>
//   fun g_file_info_get_icon(info: NullablePointer[GFileInfo] tag): NullablePointer[GIcon] =>
//   fun g_file_info_get_symbolic_icon(info: NullablePointer[GFileInfo] tag): NullablePointer[GIcon] =>
//   fun g_file_info_get_content_type(info: NullablePointer[GFileInfo] tag): Pointer[U8] =>
//   fun g_file_info_get_size(info: NullablePointer[GFileInfo] tag): I64 =>
//   fun g_file_info_get_modification_time(info: NullablePointer[GFileInfo] tag, result: NullablePointer[GTimeVal] tag): None =>
//   fun g_file_info_get_modification_date_time(info: NullablePointer[GFileInfo] tag): NullablePointer[GDateTime] =>
//   fun g_file_info_get_symlink_target(info: NullablePointer[GFileInfo] tag): Pointer[U8] =>
//   fun g_file_info_get_etag(info: NullablePointer[GFileInfo] tag): Pointer[U8] =>
//   fun g_file_info_get_sort_order(info: NullablePointer[GFileInfo] tag): I32 =>
//   fun g_file_info_set_attribute_mask(info: NullablePointer[GFileInfo] tag, mask: NullablePointer[GFileAttributeMatcher] tag): None =>
//   fun g_file_info_unset_attribute_mask(info: NullablePointer[GFileInfo] tag): None =>
//   fun g_file_info_set_file_type(info: NullablePointer[GFileInfo] tag, g_type: I32): None =>
//   fun g_file_info_set_is_hidden(info: NullablePointer[GFileInfo] tag, ishidden: I32): None =>
//   fun g_file_info_set_is_symlink(info: NullablePointer[GFileInfo] tag, issymlink: I32): None =>
//   fun g_file_info_set_name(info: NullablePointer[GFileInfo] tag, name: Pointer[U8] tag): None =>
//   fun g_file_info_set_display_name(info: NullablePointer[GFileInfo] tag, displayname: Pointer[U8] tag): None =>
//   fun g_file_info_set_edit_name(info: NullablePointer[GFileInfo] tag, editname: Pointer[U8] tag): None =>
//   fun g_file_info_set_icon(info: NullablePointer[GFileInfo] tag, icon: NullablePointer[GIcon] tag): None =>
//   fun g_file_info_set_symbolic_icon(info: NullablePointer[GFileInfo] tag, icon: NullablePointer[GIcon] tag): None =>
//   fun g_file_info_set_content_type(info: NullablePointer[GFileInfo] tag, contenttype: Pointer[U8] tag): None =>
//   fun g_file_info_set_size(info: NullablePointer[GFileInfo] tag, size: I64): None =>
//   fun g_file_info_set_modification_time(info: NullablePointer[GFileInfo] tag, mtime: NullablePointer[GTimeVal] tag): None =>
//   fun g_file_info_set_modification_date_time(info: NullablePointer[GFileInfo] tag, mtime: NullablePointer[GDateTime] tag): None =>
//   fun g_file_info_set_symlink_target(info: NullablePointer[GFileInfo] tag, symlinktarget: Pointer[U8] tag): None =>
//   fun g_file_info_set_sort_order(info: NullablePointer[GFileInfo] tag, sortorder: I32): None =>
//   fun g_file_attribute_matcher_get_type(): U64 =>
//   fun g_file_attribute_matcher_new(attributes: Pointer[U8] tag): NullablePointer[GFileAttributeMatcher] =>
//   fun g_file_attribute_matcher_ref(matcher: NullablePointer[GFileAttributeMatcher] tag): NullablePointer[GFileAttributeMatcher] =>
//   fun g_file_attribute_matcher_unref(matcher: NullablePointer[GFileAttributeMatcher] tag): None =>
//   fun g_file_attribute_matcher_subtract(matcher: NullablePointer[GFileAttributeMatcher] tag, subtract: NullablePointer[GFileAttributeMatcher] tag): NullablePointer[GFileAttributeMatcher] =>
//   fun g_file_attribute_matcher_matches(matcher: NullablePointer[GFileAttributeMatcher] tag, attribute: Pointer[U8] tag): I32 =>
//   fun g_file_attribute_matcher_matches_only(matcher: NullablePointer[GFileAttributeMatcher] tag, attribute: Pointer[U8] tag): I32 =>
//   fun g_file_attribute_matcher_enumerate_namespace(matcher: NullablePointer[GFileAttributeMatcher] tag, ns: Pointer[U8] tag): I32 =>
//   fun g_file_attribute_matcher_enumerate_next(matcher: NullablePointer[GFileAttributeMatcher] tag): Pointer[U8] =>
//   fun g_file_attribute_matcher_to_string(matcher: NullablePointer[GFileAttributeMatcher] tag): Pointer[U8] =>
//   fun g_io_error_quark(): U32 =>
//   fun g_io_error_from_errno(errno: I32): I32 =>
//   fun g_filename_completer_get_type(): U64 =>
//   fun g_filename_completer_new(): NullablePointer[GFilenameCompleter] =>
//   fun g_filename_completer_get_completion_suffix(completer: NullablePointer[GFilenameCompleter] tag, initialtext: Pointer[U8] tag): Pointer[U8] =>
//   fun g_filename_completer_get_completions(completer: NullablePointer[GFilenameCompleter] tag, initialtext: Pointer[U8] tag): NullablePointer[Pointer[U8]] =>
//   fun g_filename_completer_set_dirs_only(completer: NullablePointer[GFilenameCompleter] tag, dirsonly: I32): None =>
//   fun g_app_info_create_flags_get_type(): U64 =>
//   fun g_converter_flags_get_type(): U64 =>
//   fun g_converter_result_get_type(): U64 =>
//   fun g_data_stream_byte_order_get_type(): U64 =>
//   fun g_data_stream_newline_type_get_type(): U64 =>
//   fun g_file_attribute_type_get_type(): U64 =>
//   fun g_file_attribute_info_flags_get_type(): U64 =>
//   fun g_file_attribute_status_get_type(): U64 =>
//   fun g_file_query_info_flags_get_type(): U64 =>
//   fun g_file_create_flags_get_type(): U64 =>
//   fun g_file_measure_flags_get_type(): U64 =>
//   fun g_mount_mount_flags_get_type(): U64 =>
//   fun g_mount_unmount_flags_get_type(): U64 =>
//   fun g_drive_start_flags_get_type(): U64 =>
//   fun g_drive_start_stop_type_get_type(): U64 =>
//   fun g_file_copy_flags_get_type(): U64 =>
//   fun g_file_monitor_flags_get_type(): U64 =>
//   fun g_file_type_get_type(): U64 =>
//   fun g_filesystem_preview_type_get_type(): U64 =>
//   fun g_file_monitor_event_get_type(): U64 =>
//   fun g_io_error_enum_get_type(): U64 =>
//   fun g_ask_password_flags_get_type(): U64 =>
//   fun g_password_save_get_type(): U64 =>
//   fun g_mount_operation_result_get_type(): U64 =>
//   fun g_output_stream_splice_flags_get_type(): U64 =>
//   fun g_io_stream_splice_flags_get_type(): U64 =>
//   fun g_emblem_origin_get_type(): U64 =>
//   fun g_resolver_error_get_type(): U64 =>
//   fun g_resolver_record_type_get_type(): U64 =>
//   fun g_resource_error_get_type(): U64 =>
//   fun g_resource_flags_get_type(): U64 =>
//   fun g_resource_lookup_flags_get_type(): U64 =>
//   fun g_socket_family_get_type(): U64 =>
//   fun g_socket_type_get_type(): U64 =>
//   fun g_socket_msg_flags_get_type(): U64 =>
//   fun g_socket_protocol_get_type(): U64 =>
//   fun g_zlib_compressor_format_get_type(): U64 =>
//   fun g_unix_socket_address_type_get_type(): U64 =>
//   fun g_bus_type_get_type(): U64 =>
//   fun g_bus_name_owner_flags_get_type(): U64 =>
//   fun g_bus_name_watcher_flags_get_type(): U64 =>
//   fun g_dbus_proxy_flags_get_type(): U64 =>
//   fun g_dbus_error_get_type(): U64 =>
//   fun g_dbus_connection_flags_get_type(): U64 =>
//   fun g_dbus_capability_flags_get_type(): U64 =>
//   fun g_dbus_call_flags_get_type(): U64 =>
//   fun g_dbus_message_type_get_type(): U64 =>
//   fun g_dbus_message_flags_get_type(): U64 =>
//   fun g_dbus_message_header_field_get_type(): U64 =>
//   fun g_dbus_property_info_flags_get_type(): U64 =>
//   fun g_dbus_subtree_flags_get_type(): U64 =>
//   fun g_dbus_server_flags_get_type(): U64 =>
//   fun g_dbus_signal_flags_get_type(): U64 =>
//   fun g_dbus_send_message_flags_get_type(): U64 =>
//   fun g_credentials_type_get_type(): U64 =>
//   fun g_dbus_message_byte_order_get_type(): U64 =>
//   fun g_application_flags_get_type(): U64 =>
//   fun g_tls_error_get_type(): U64 =>
//   fun g_tls_certificate_flags_get_type(): U64 =>
//   fun g_tls_authentication_mode_get_type(): U64 =>
//   fun g_tls_channel_binding_type_get_type(): U64 =>
//   fun g_tls_channel_binding_error_get_type(): U64 =>
//   fun g_tls_rehandshake_mode_get_type(): U64 =>
//   fun g_tls_password_flags_get_type(): U64 =>
//   fun g_tls_interaction_result_get_type(): U64 =>
//   fun g_dbus_interface_skeleton_flags_get_type(): U64 =>
//   fun g_dbus_object_manager_client_flags_get_type(): U64 =>
//   fun g_tls_database_verify_flags_get_type(): U64 =>
//   fun g_tls_database_lookup_flags_get_type(): U64 =>
//   fun g_tls_certificate_request_flags_get_type(): U64 =>
//   fun g_io_module_scope_flags_get_type(): U64 =>
//   fun g_socket_client_event_get_type(): U64 =>
//   fun g_socket_listener_event_get_type(): U64 =>
//   fun g_test_dbus_flags_get_type(): U64 =>
//   fun g_subprocess_flags_get_type(): U64 =>
//   fun g_notification_priority_get_type(): U64 =>
//   fun g_network_connectivity_get_type(): U64 =>
//   fun g_pollable_return_get_type(): U64 =>
//   fun g_memory_monitor_warning_level_get_type(): U64 =>
//   fun g_resolver_name_lookup_flags_get_type(): U64 =>
//   fun g_settings_bind_flags_get_type(): U64 =>
//   fun g_module_supported(): I32 =>
//   fun g_module_open(filename: Pointer[U8] tag, flags: I32): NullablePointer[GModule] =>
//   fun g_module_close(module: NullablePointer[GModule] tag): I32 =>
//   fun g_module_make_resident(module: NullablePointer[GModule] tag): None =>
//   fun g_module_error(): Pointer[U8] =>
//   fun g_module_symbol(module: NullablePointer[GModule] tag, symbolname: Pointer[U8] tag, symbol: NullablePointer[Pointer[None]] tag): I32 =>
//   fun g_module_name(module: NullablePointer[GModule] tag): Pointer[U8] =>
//   fun g_module_build_path(directory: Pointer[U8] tag, modulename: Pointer[U8] tag): Pointer[U8] =>
//   fun g_io_module_scope_new(flags: I32): NullablePointer[GIOModuleScope] =>
//   fun g_io_module_scope_free(scope: NullablePointer[GIOModuleScope] tag): None =>
//   fun g_io_module_scope_block(scope: NullablePointer[GIOModuleScope] tag, basename: Pointer[U8] tag): None =>
//   fun g_io_module_get_type(): U64 =>
//   fun g_io_module_new(filename: Pointer[U8] tag): NullablePointer[GIOModule] =>
//   fun g_io_modules_scan_all_in_directory(dirname: Pointer[U8] tag): None =>
//   fun g_io_modules_load_all_in_directory(dirname: Pointer[U8] tag): NullablePointer[GList] =>
//   fun g_io_modules_scan_all_in_directory_with_scope(dirname: Pointer[U8] tag, scope: NullablePointer[GIOModuleScope] tag): None =>
//   fun g_io_modules_load_all_in_directory_with_scope(dirname: Pointer[U8] tag, scope: NullablePointer[GIOModuleScope] tag): NullablePointer[GList] =>
//   fun g_io_extension_point_register(name: Pointer[U8] tag): NullablePointer[GIOExtensionPoint] =>
//   fun g_io_extension_point_lookup(name: Pointer[U8] tag): NullablePointer[GIOExtensionPoint] =>
//   fun g_io_extension_point_set_required_type(extensionpoint: NullablePointer[GIOExtensionPoint] tag, g_type: U64): None =>
//   fun g_io_extension_point_get_required_type(extensionpoint: NullablePointer[GIOExtensionPoint] tag): U64 =>
//   fun g_io_extension_point_get_extensions(extensionpoint: NullablePointer[GIOExtensionPoint] tag): NullablePointer[GList] =>
//   fun g_io_extension_point_get_extension_by_name(extensionpoint: NullablePointer[GIOExtensionPoint] tag, name: Pointer[U8] tag): NullablePointer[GIOExtension] =>
//   fun g_io_extension_point_implement(extensionpointname: Pointer[U8] tag, g_type: U64, extensionname: Pointer[U8] tag, priority: I32): NullablePointer[GIOExtension] =>
//   fun g_io_extension_get_type(extension: NullablePointer[GIOExtension] tag): U64 =>
//   fun g_io_extension_get_name(extension: NullablePointer[GIOExtension] tag): Pointer[U8] =>
//   fun g_io_extension_get_priority(extension: NullablePointer[GIOExtension] tag): I32 =>
//   fun g_io_extension_ref_class(extension: NullablePointer[GIOExtension] tag): NullablePointer[GTypeClass] =>
//   fun g_io_module_load(module: NullablePointer[GIOModule] tag): None =>
//   fun g_io_module_unload(module: NullablePointer[GIOModule] tag): None =>
//   fun g_io_module_query(): NullablePointer[Pointer[U8]] =>
//   fun g_io_scheduler_push_job(jobfunc: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, notify: NullablePointer[FUNCTIONTYPE] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag): None =>
//     @g_io_scheduler_push_job(jobfunc, userdata, notify, iopriority, cancellable)
//   fun g_io_scheduler_cancel_all_jobs(): None =>
//   fun g_io_scheduler_job_send_to_mainloop(job: NullablePointer[GIOSchedulerJob] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, notify: NullablePointer[FUNCTIONTYPE] tag): I32 =>
//     @g_io_scheduler_job_send_to_mainloop(job, func, userdata, notify)
//   fun g_io_scheduler_job_send_to_mainloop_async(job: NullablePointer[GIOSchedulerJob] tag, func: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, notify: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_io_scheduler_job_send_to_mainloop_async(job, func, userdata, notify)
//   fun g_list_model_get_type(): U64 =>
//   fun glib_autoptr_clear_GListModel(ptr: NullablePointer[GListModel] tag): None =>
//   fun glib_autoptr_cleanup_GListModel(ptr: NullablePointer[NullablePointer[GListModel]] tag): None =>
//   fun glib_listautoptr_cleanup_GListModel(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GListModel(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GListModel(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun G_LIST_MODEL(ptr: Pointer[None] tag): NullablePointer[GListModel] =>
//   fun G_IS_LIST_MODEL(ptr: Pointer[None] tag): I32 =>
//   fun G_LIST_MODEL_GET_IFACE(ptr: Pointer[None] tag): NullablePointer[GListModelInterface] =>
//   fun g_list_model_get_item_type(list: NullablePointer[GListModel] tag): U64 =>
//   fun g_list_model_get_n_items(list: NullablePointer[GListModel] tag): U32 =>
//   fun g_list_model_get_item(list: NullablePointer[GListModel] tag, position: U32): Pointer[None] =>
//   fun g_list_model_get_object(list: NullablePointer[GListModel] tag, position: U32): NullablePointer[GObject] =>
//   fun g_list_model_items_changed(list: NullablePointer[GListModel] tag, position: U32, removed: U32, added: U32): None =>
//   fun g_list_store_get_type(): U64 =>
//   fun glib_autoptr_clear_GListStore(ptr: NullablePointer[GListStore] tag): None =>
//   fun glib_autoptr_cleanup_GListStore(ptr: NullablePointer[NullablePointer[GListStore]] tag): None =>
//   fun glib_listautoptr_cleanup_GListStore(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GListStore(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GListStore(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GListStoreClass(ptr: Pointer[None]): None =>
//   fun glib_autoptr_cleanup_GListStoreClass(ptr: Pointer[None] tag): None =>
//   fun glib_listautoptr_cleanup_GListStoreClass(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GListStoreClass(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GListStoreClass(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun G_LIST_STORE(ptr: Pointer[None] tag): NullablePointer[GListStore] =>
//   fun G_IS_LIST_STORE(ptr: Pointer[None] tag): I32 =>
//   fun g_list_store_new(itemtype: U64): NullablePointer[GListStore] =>
//   fun g_list_store_insert(store: NullablePointer[GListStore] tag, position: U32, item: Pointer[None] tag): None =>
//   fun g_list_store_insert_sorted(store: NullablePointer[GListStore] tag, item: Pointer[None] tag, comparefunc: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): U32 =>
//     @g_list_store_insert_sorted(store, item, comparefunc, userdata)
//   fun g_list_store_sort(store: NullablePointer[GListStore] tag, comparefunc: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//     @g_list_store_sort(store, comparefunc, userdata)
//   fun g_list_store_append(store: NullablePointer[GListStore] tag, item: Pointer[None] tag): None =>
//   fun g_list_store_remove(store: NullablePointer[GListStore] tag, position: U32): None =>
//   fun g_list_store_remove_all(store: NullablePointer[GListStore] tag): None =>
//   fun g_list_store_splice(store: NullablePointer[GListStore] tag, position: U32, nremovals: U32, additions: NullablePointer[Pointer[None]] tag, nadditions: U32): None =>
//   fun g_list_store_find(store: NullablePointer[GListStore] tag, item: Pointer[None] tag, position: Pointer[U32] tag): I32 =>
//   Original Name: g_list_store_find_with_equal_func/nix/store/b2fbjmfynng5an3nsb2f1286zpxs5vyh-glib-2.68.3-dev/include/glib-2.0/gio/gliststore.h:81
//   fun g_list_store_find_with_equal_func(store: NullablePointer[GListStore] tag, item: Pointer[None] tag, equalfunc: NullablePointer[FUNCTIONTYPE] tag, position: Pointer[U32] tag): I32 =>
//     @g_list_store_find_with_equal_func(store, item, equalfunc, position)
//   fun g_loadable_icon_get_type(): U64 =>
//   fun g_loadable_icon_load(icon: NullablePointer[GLoadableIcon] tag, size: I32, g_type: NullablePointer[Pointer[U8]] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GInputStream] =>
//   fun g_loadable_icon_load_async(icon: NullablePointer[GLoadableIcon] tag, size: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_loadable_icon_load_finish(icon: NullablePointer[GLoadableIcon] tag, res: NullablePointer[GAsyncResult] tag, g_type: NullablePointer[Pointer[U8]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GInputStream] =>
//   fun g_memory_monitor_get_type(): U64 =>
//   fun glib_autoptr_clear_GMemoryMonitor(ptr: NullablePointer[GMemoryMonitor] tag): None =>
//   fun glib_autoptr_cleanup_GMemoryMonitor(ptr: NullablePointer[NullablePointer[GMemoryMonitor]] tag): None =>
//   fun glib_listautoptr_cleanup_GMemoryMonitor(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GMemoryMonitor(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GMemoryMonitor(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun g_memory_monitor(ptr: Pointer[None] tag): NullablePointer[GMemoryMonitor] =>
//   fun g_IS_memory_monitor(ptr: Pointer[None] tag): I32 =>
//   fun g_memory_monitor_GET_IFACE(ptr: Pointer[None] tag): NullablePointer[GMemoryMonitorInterface] =>
//   fun g_memory_monitor_dup_default(): NullablePointer[GMemoryMonitor] =>
//   fun g_menu_get_type(): U64 =>
//   fun g_menu_new(): NullablePointer[GMenu] =>
//   fun g_menu_freeze(menu: NullablePointer[GMenu] tag): None =>
//   fun g_menu_insert_item(menu: NullablePointer[GMenu] tag, position: I32, item: NullablePointer[GMenuItem] tag): None =>
//   fun g_menu_prepend_item(menu: NullablePointer[GMenu] tag, item: NullablePointer[GMenuItem] tag): None =>
//   fun g_menu_append_item(menu: NullablePointer[GMenu] tag, item: NullablePointer[GMenuItem] tag): None =>
//   fun g_menu_remove(menu: NullablePointer[GMenu] tag, position: I32): None =>
//   fun g_menu_remove_all(menu: NullablePointer[GMenu] tag): None =>
//   fun g_menu_insert(menu: NullablePointer[GMenu] tag, position: I32, label: Pointer[U8] tag, detailedaction: Pointer[U8] tag): None =>
//   fun g_menu_prepend(menu: NullablePointer[GMenu] tag, label: Pointer[U8] tag, detailedaction: Pointer[U8] tag): None =>
//   fun g_menu_append(menu: NullablePointer[GMenu] tag, label: Pointer[U8] tag, detailedaction: Pointer[U8] tag): None =>
//   fun g_menu_insert_section(menu: NullablePointer[GMenu] tag, position: I32, label: Pointer[U8] tag, section: NullablePointer[GMenuModel] tag): None =>
//   fun g_menu_prepend_section(menu: NullablePointer[GMenu] tag, label: Pointer[U8] tag, section: NullablePointer[GMenuModel] tag): None =>
//   fun g_menu_append_section(menu: NullablePointer[GMenu] tag, label: Pointer[U8] tag, section: NullablePointer[GMenuModel] tag): None =>
//   fun g_menu_insert_submenu(menu: NullablePointer[GMenu] tag, position: I32, label: Pointer[U8] tag, submenu: NullablePointer[GMenuModel] tag): None =>
//   fun g_menu_prepend_submenu(menu: NullablePointer[GMenu] tag, label: Pointer[U8] tag, submenu: NullablePointer[GMenuModel] tag): None =>
//   fun g_menu_append_submenu(menu: NullablePointer[GMenu] tag, label: Pointer[U8] tag, submenu: NullablePointer[GMenuModel] tag): None =>
//   fun g_menu_item_get_type(): U64 =>
//   fun g_menu_item_new(label: Pointer[U8] tag, detailedaction: Pointer[U8] tag): NullablePointer[GMenuItem] =>
//   fun g_menu_item_new_from_model(model: NullablePointer[GMenuModel] tag, itemindex: I32): NullablePointer[GMenuItem] =>
//   fun g_menu_item_new_submenu(label: Pointer[U8] tag, submenu: NullablePointer[GMenuModel] tag): NullablePointer[GMenuItem] =>
//   fun g_menu_item_new_section(label: Pointer[U8] tag, section: NullablePointer[GMenuModel] tag): NullablePointer[GMenuItem] =>
//   fun g_menu_item_get_attribute_value(menuitem: NullablePointer[GMenuItem] tag, attribute: Pointer[U8] tag, expectedtype: NullablePointer[GVariantType] tag): NullablePointer[GVariant] =>
// /*  fun g_menu_item_get_attribute(menuitem: NullablePointer[GMenuItem] tag, attribute: Pointer[U8] tag, formatstring: Pointer[U8] tag, ...): I32 =>
//   fun g_menu_item_get_link(menuitem: NullablePointer[GMenuItem] tag, link: Pointer[U8] tag): NullablePointer[GMenuModel] =>
//   fun g_menu_item_set_attribute_value(menuitem: NullablePointer[GMenuItem] tag, attribute: Pointer[U8] tag, value: NullablePointer[GVariant] tag): None =>
// /*  fun g_menu_item_set_attribute(menuitem: NullablePointer[GMenuItem] tag, attribute: Pointer[U8] tag, formatstring: Pointer[U8] tag, ...): None =>
//   fun g_menu_item_set_link(menuitem: NullablePointer[GMenuItem] tag, link: Pointer[U8] tag, model: NullablePointer[GMenuModel] tag): None =>
//   fun g_menu_item_set_label(menuitem: NullablePointer[GMenuItem] tag, label: Pointer[U8] tag): None =>
//   fun g_menu_item_set_submenu(menuitem: NullablePointer[GMenuItem] tag, submenu: NullablePointer[GMenuModel] tag): None =>
//   fun g_menu_item_set_section(menuitem: NullablePointer[GMenuItem] tag, section: NullablePointer[GMenuModel] tag): None =>
//   fun g_menu_item_set_action_and_target_value(menuitem: NullablePointer[GMenuItem] tag, action: Pointer[U8] tag, targetvalue: NullablePointer[GVariant] tag): None =>
// /*  fun g_menu_item_set_action_and_target(menuitem: NullablePointer[GMenuItem] tag, action: Pointer[U8] tag, formatstring: Pointer[U8] tag, ...): None =>
//   fun g_menu_item_set_detailed_action(menuitem: NullablePointer[GMenuItem] tag, detailedaction: Pointer[U8] tag): None =>
//   fun g_menu_item_set_icon(menuitem: NullablePointer[GMenuItem] tag, icon: NullablePointer[GIcon] tag): None =>
//   fun g_dbus_connection_export_menu_model(connection: NullablePointer[GDBusConnection] tag, objectpath: Pointer[U8] tag, menu: NullablePointer[GMenuModel] tag, g_error: NullablePointer[NullablePointer[GError]] tag): U32 =>
//   fun g_dbus_connection_unexport_menu_model(connection: NullablePointer[GDBusConnection] tag, exportid: U32): None =>
//   fun g_mount_get_type(): U64 =>
//   fun g_mount_get_root(mount: NullablePointer[GMount] tag): NullablePointer[GFile] =>
//   fun g_mount_get_default_location(mount: NullablePointer[GMount] tag): NullablePointer[GFile] =>
//   fun g_mount_get_name(mount: NullablePointer[GMount] tag): Pointer[U8] =>
//   fun g_mount_get_icon(mount: NullablePointer[GMount] tag): NullablePointer[GIcon] =>
//   fun g_mount_get_symbolic_icon(mount: NullablePointer[GMount] tag): NullablePointer[GIcon] =>
//   fun g_mount_get_uuid(mount: NullablePointer[GMount] tag): Pointer[U8] =>
//   fun g_mount_get_volume(mount: NullablePointer[GMount] tag): NullablePointer[GVolume] =>
//   fun g_mount_get_drive(mount: NullablePointer[GMount] tag): NullablePointer[GDrive] =>
//   fun g_mount_can_unmount(mount: NullablePointer[GMount] tag): I32 =>
//   fun g_mount_can_eject(mount: NullablePointer[GMount] tag): I32 =>
//   fun g_mount_unmount(mount: NullablePointer[GMount] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_mount_unmount_finish(mount: NullablePointer[GMount] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_mount_eject(mount: NullablePointer[GMount] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_mount_eject_finish(mount: NullablePointer[GMount] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_mount_remount(mount: NullablePointer[GMount] tag, flags: I32, mountoperation: NullablePointer[GMountOperation] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_mount_remount_finish(mount: NullablePointer[GMount] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_mount_guess_content_type(mount: NullablePointer[GMount] tag, forcerescan: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_mount_guess_content_type_finish(mount: NullablePointer[GMount] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[Pointer[U8]] =>
//   fun g_mount_guess_content_type_sync(mount: NullablePointer[GMount] tag, forcerescan: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[Pointer[U8]] =>
//   fun g_mount_is_shadowed(mount: NullablePointer[GMount] tag): I32 =>
//   fun g_mount_shadow(mount: NullablePointer[GMount] tag): None =>
//   fun g_mount_unshadow(mount: NullablePointer[GMount] tag): None =>
//   fun g_mount_unmount_with_operation(mount: NullablePointer[GMount] tag, flags: I32, mountoperation: NullablePointer[GMountOperation] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_mount_unmount_with_operation_finish(mount: NullablePointer[GMount] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_mount_eject_with_operation(mount: NullablePointer[GMount] tag, flags: I32, mountoperation: NullablePointer[GMountOperation] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_mount_eject_with_operation_finish(mount: NullablePointer[GMount] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_mount_get_sort_key(mount: NullablePointer[GMount] tag): Pointer[U8] =>
//   fun g_native_volume_monitor_get_type(): U64 =>
//   fun g_network_monitor_get_type(): U64 =>
//   fun g_network_monitor_get_default(): NullablePointer[GNetworkMonitor] =>
//   fun g_network_monitor_get_network_available(monitor: NullablePointer[GNetworkMonitor] tag): I32 =>
//   fun g_network_monitor_get_network_metered(monitor: NullablePointer[GNetworkMonitor] tag): I32 =>
//   fun g_network_monitor_get_connectivity(monitor: NullablePointer[GNetworkMonitor] tag): I32 =>
//   fun g_network_monitor_can_reach(monitor: NullablePointer[GNetworkMonitor] tag, connectable: NullablePointer[GSocketConnectable] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_network_monitor_can_reach_async(monitor: NullablePointer[GNetworkMonitor] tag, connectable: NullablePointer[GSocketConnectable] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_network_monitor_can_reach_finish(monitor: NullablePointer[GNetworkMonitor] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_notification_get_type(): U64 =>
//   fun g_notification_new(title: Pointer[U8] tag): NullablePointer[GNotification] =>
//   fun g_notification_set_title(notification: NullablePointer[GNotification] tag, title: Pointer[U8] tag): None =>
//   fun g_notification_set_body(notification: NullablePointer[GNotification] tag, body: Pointer[U8] tag): None =>
//   fun g_notification_set_icon(notification: NullablePointer[GNotification] tag, icon: NullablePointer[GIcon] tag): None =>
//   fun g_notification_set_urgent(notification: NullablePointer[GNotification] tag, urgent: I32): None =>
//   fun g_notification_set_priority(notification: NullablePointer[GNotification] tag, priority: I32): None =>
//   fun g_notification_add_button(notification: NullablePointer[GNotification] tag, label: Pointer[U8] tag, detailedaction: Pointer[U8] tag): None =>
// /*  fun g_notification_add_button_with_target(notification: NullablePointer[GNotification] tag, label: Pointer[U8] tag, action: Pointer[U8] tag, targetformat: Pointer[U8] tag, ...): None =>
//   fun g_notification_add_button_with_target_value(notification: NullablePointer[GNotification] tag, label: Pointer[U8] tag, action: Pointer[U8] tag, target: NullablePointer[GVariant] tag): None =>
//   fun g_notification_set_default_action(notification: NullablePointer[GNotification] tag, detailedaction: Pointer[U8] tag): None =>
// /*  fun g_notification_set_default_action_and_target(notification: NullablePointer[GNotification] tag, action: Pointer[U8] tag, targetformat: Pointer[U8] tag, ...): None =>
//   fun g_notification_set_default_action_and_target_value(notification: NullablePointer[GNotification] tag, action: Pointer[U8] tag, target: NullablePointer[GVariant] tag): None =>
//   fun g_pollable_input_stream_get_type(): U64 =>
//   fun g_pollable_input_stream_can_poll(stream: NullablePointer[GPollableInputStream] tag): I32 =>
//   fun g_pollable_input_stream_is_readable(stream: NullablePointer[GPollableInputStream] tag): I32 =>
//   fun g_pollable_input_stream_create_source(stream: NullablePointer[GPollableInputStream] tag, cancellable: NullablePointer[GCancellable] tag): NullablePointer[GSource] =>
//   fun g_pollable_input_stream_read_nonblocking(stream: NullablePointer[GPollableInputStream] tag, buffer: Pointer[None] tag, count: U64, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_pollable_output_stream_get_type(): U64 =>
//   fun g_pollable_output_stream_can_poll(stream: NullablePointer[GPollableOutputStream] tag): I32 =>
//   fun g_pollable_output_stream_is_writable(stream: NullablePointer[GPollableOutputStream] tag): I32 =>
//   fun g_pollable_output_stream_create_source(stream: NullablePointer[GPollableOutputStream] tag, cancellable: NullablePointer[GCancellable] tag): NullablePointer[GSource] =>
//   fun g_pollable_output_stream_write_nonblocking(stream: NullablePointer[GPollableOutputStream] tag, buffer: Pointer[None] tag, count: U64, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_pollable_output_stream_writev_nonblocking(stream: NullablePointer[GPollableOutputStream] tag, vectors: NullablePointer[GOutputVector] tag, nvectors: U64, byteswritten: Pointer[U64] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_pollable_source_new(pollablestream: NullablePointer[GObject] tag): NullablePointer[GSource] =>
//   fun g_pollable_source_new_full(pollablestream: Pointer[None] tag, childsource: NullablePointer[GSource] tag, cancellable: NullablePointer[GCancellable] tag): NullablePointer[GSource] =>
//   fun g_pollable_stream_read(stream: NullablePointer[GInputStream] tag, buffer: Pointer[None] tag, count: U64, blocking: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_pollable_stream_write(stream: NullablePointer[GOutputStream] tag, buffer: Pointer[None] tag, count: U64, blocking: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_pollable_stream_write_all(stream: NullablePointer[GOutputStream] tag, buffer: Pointer[None] tag, count: U64, blocking: I32, byteswritten: Pointer[U64] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_property_action_get_type(): U64 =>
//   fun g_property_action_new(name: Pointer[U8] tag, g_object: Pointer[None] tag, propertyname: Pointer[U8] tag): NullablePointer[GPropertyAction] =>
//   fun g_proxy_get_type(): U64 =>
//   fun g_proxy_get_default_for_protocol(protocol: Pointer[U8] tag): NullablePointer[GProxy] =>
//   fun g_proxy_connect(proxy: NullablePointer[GProxy] tag, connection: NullablePointer[GIOStream] tag, proxyaddress: NullablePointer[GProxyAddress] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GIOStream] =>
//   fun g_proxy_connect_async(proxy: NullablePointer[GProxy] tag, connection: NullablePointer[GIOStream] tag, proxyaddress: NullablePointer[GProxyAddress] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_proxy_connect_finish(proxy: NullablePointer[GProxy] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GIOStream] =>
//   fun g_proxy_supports_hostname(proxy: NullablePointer[GProxy] tag): I32 =>
//   fun g_proxy_resolver_get_type(): U64 =>
//   fun g_proxy_resolver_get_default(): NullablePointer[GProxyResolver] =>
//   fun g_proxy_resolver_is_supported(resolver: NullablePointer[GProxyResolver] tag): I32 =>
//   fun g_proxy_resolver_lookup(resolver: NullablePointer[GProxyResolver] tag, uri: Pointer[U8] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[Pointer[U8]] =>
//   fun g_proxy_resolver_lookup_async(resolver: NullablePointer[GProxyResolver] tag, uri: Pointer[U8] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_proxy_resolver_lookup_finish(resolver: NullablePointer[GProxyResolver] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[Pointer[U8]] =>
//   fun g_remote_action_group_get_type(): U64 =>
//   fun g_remote_action_group_activate_action_full(remote: NullablePointer[GRemoteActionGroup] tag, actionname: Pointer[U8] tag, parameter: NullablePointer[GVariant] tag, platformdata: NullablePointer[GVariant] tag): None =>
//   fun g_remote_action_group_change_action_state_full(remote: NullablePointer[GRemoteActionGroup] tag, actionname: Pointer[U8] tag, value: NullablePointer[GVariant] tag, platformdata: NullablePointer[GVariant] tag): None =>
//   fun g_resource_error_quark(): U32 =>
//   fun g_resource_get_type(): U64 =>
//   fun g_resource_new_from_data(data: NullablePointer[GBytes] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GResource] =>
//   fun g_resource_ref(resource: NullablePointer[GResource] tag): NullablePointer[GResource] =>
//   fun g_resource_unref(resource: NullablePointer[GResource] tag): None =>
//   fun g_resource_load(filename: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GResource] =>
//   fun g_resource_open_stream(resource: NullablePointer[GResource] tag, path: Pointer[U8] tag, lookupflags: I32, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GInputStream] =>
//   fun g_resource_lookup_data(resource: NullablePointer[GResource] tag, path: Pointer[U8] tag, lookupflags: I32, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GBytes] =>
//   fun g_resource_enumerate_children(resource: NullablePointer[GResource] tag, path: Pointer[U8] tag, lookupflags: I32, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[Pointer[U8]] =>
//   fun g_resource_get_info(resource: NullablePointer[GResource] tag, path: Pointer[U8] tag, lookupflags: I32, size: Pointer[U64] tag, flags: Pointer[U32] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_resources_register(resource: NullablePointer[GResource] tag): None =>
//   fun g_resources_unregister(resource: NullablePointer[GResource] tag): None =>
//   fun g_resources_open_stream(path: Pointer[U8] tag, lookupflags: I32, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GInputStream] =>
//   fun g_resources_lookup_data(path: Pointer[U8] tag, lookupflags: I32, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GBytes] =>
//   fun g_resources_enumerate_children(path: Pointer[U8] tag, lookupflags: I32, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[Pointer[U8]] =>
//   fun g_resources_get_info(path: Pointer[U8] tag, lookupflags: I32, size: Pointer[U64] tag, flags: Pointer[U32] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_static_resource_init(staticresource: NullablePointer[GStaticResource] tag): None =>
//   fun g_static_resource_fini(staticresource: NullablePointer[GStaticResource] tag): None =>
//   fun g_static_resource_get_resource(staticresource: NullablePointer[GStaticResource] tag): NullablePointer[GResource] =>
//   fun g_seekable_get_type(): U64 =>
//   fun g_seekable_tell(seekable: NullablePointer[GSeekable] tag): I64 =>
//   fun g_seekable_can_seek(seekable: NullablePointer[GSeekable] tag): I32 =>
//   fun g_seekable_seek(seekable: NullablePointer[GSeekable] tag, offset: I64, g_type: I32, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_seekable_can_truncate(seekable: NullablePointer[GSeekable] tag): I32 =>
//   fun g_seekable_truncate(seekable: NullablePointer[GSeekable] tag, offset: I64, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_settings_schema_source_get_type(): U64 =>
//   fun g_settings_schema_source_get_default(): NullablePointer[GSettingsSchemaSource] =>
//   fun g_settings_schema_source_ref(source: NullablePointer[GSettingsSchemaSource] tag): NullablePointer[GSettingsSchemaSource] =>
//   fun g_settings_schema_source_unref(source: NullablePointer[GSettingsSchemaSource] tag): None =>
//   fun g_settings_schema_source_new_from_directory(directory: Pointer[U8] tag, parent: NullablePointer[GSettingsSchemaSource] tag, trusted: I32, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSettingsSchemaSource] =>
//   fun g_settings_schema_source_lookup(source: NullablePointer[GSettingsSchemaSource] tag, schemaid: Pointer[U8] tag, recursive: I32): NullablePointer[GSettingsSchema] =>
//   fun g_settings_schema_source_list_schemas(source: NullablePointer[GSettingsSchemaSource] tag, recursive: I32, nonrelocatable: NullablePointer[NullablePointer[Pointer[U8]]] tag, relocatable: NullablePointer[NullablePointer[Pointer[U8]]] tag): None =>
//   fun g_settings_schema_get_type(): U64 =>
//   fun g_settings_schema_ref(schema: NullablePointer[GSettingsSchema] tag): NullablePointer[GSettingsSchema] =>
//   fun g_settings_schema_unref(schema: NullablePointer[GSettingsSchema] tag): None =>
//   fun g_settings_schema_get_id(schema: NullablePointer[GSettingsSchema] tag): Pointer[U8] =>
//   fun g_settings_schema_get_path(schema: NullablePointer[GSettingsSchema] tag): Pointer[U8] =>
//   fun g_settings_schema_get_key(schema: NullablePointer[GSettingsSchema] tag, name: Pointer[U8] tag): NullablePointer[GSettingsSchemaKey] =>
//   fun g_settings_schema_has_key(schema: NullablePointer[GSettingsSchema] tag, name: Pointer[U8] tag): I32 =>
//   fun g_settings_schema_list_keys(schema: NullablePointer[GSettingsSchema] tag): NullablePointer[Pointer[U8]] =>
//   fun g_settings_schema_list_children(schema: NullablePointer[GSettingsSchema] tag): NullablePointer[Pointer[U8]] =>
//   fun g_settings_schema_key_get_type(): U64 =>
//   fun g_settings_schema_key_ref(key: NullablePointer[GSettingsSchemaKey] tag): NullablePointer[GSettingsSchemaKey] =>
//   fun g_settings_schema_key_unref(key: NullablePointer[GSettingsSchemaKey] tag): None =>
//   fun g_settings_schema_key_get_value_type(key: NullablePointer[GSettingsSchemaKey] tag): NullablePointer[GVariantType] =>
//   fun g_settings_schema_key_get_default_value(key: NullablePointer[GSettingsSchemaKey] tag): NullablePointer[GVariant] =>
//   fun g_settings_schema_key_get_range(key: NullablePointer[GSettingsSchemaKey] tag): NullablePointer[GVariant] =>
//   fun g_settings_schema_key_range_check(key: NullablePointer[GSettingsSchemaKey] tag, value: NullablePointer[GVariant] tag): I32 =>
//   fun g_settings_schema_key_get_name(key: NullablePointer[GSettingsSchemaKey] tag): Pointer[U8] =>
//   fun g_settings_schema_key_get_summary(key: NullablePointer[GSettingsSchemaKey] tag): Pointer[U8] =>
//   fun g_settings_schema_key_get_description(key: NullablePointer[GSettingsSchemaKey] tag): Pointer[U8] =>
//   fun g_simple_action_get_type(): U64 =>
//   fun g_simple_action_new(name: Pointer[U8] tag, parametertype: NullablePointer[GVariantType] tag): NullablePointer[GSimpleAction] =>
//   fun g_simple_action_new_stateful(name: Pointer[U8] tag, parametertype: NullablePointer[GVariantType] tag, state: NullablePointer[GVariant] tag): NullablePointer[GSimpleAction] =>
//   fun g_simple_action_set_enabled(simple: NullablePointer[GSimpleAction] tag, enabled: I32): None =>
//   fun g_simple_action_set_state(simple: NullablePointer[GSimpleAction] tag, value: NullablePointer[GVariant] tag): None =>
//   fun g_simple_action_set_state_hint(simple: NullablePointer[GSimpleAction] tag, statehint: NullablePointer[GVariant] tag): None =>
//   fun g_simple_async_result_get_type(): U64 =>
//   fun g_simple_async_result_new(sourceobject: NullablePointer[GObject] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, sourcetag: Pointer[None] tag): NullablePointer[GSimpleAsyncResult] =>
// /*  fun g_simple_async_result_new_error(sourceobject: NullablePointer[GObject] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, domain: U32, code: I32, format: Pointer[U8] tag, ...): NullablePointer[GSimpleAsyncResult] =>
//   fun g_simple_async_result_new_from_error(sourceobject: NullablePointer[GObject] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, g_error: NullablePointer[GError] tag): NullablePointer[GSimpleAsyncResult] =>
//   fun g_simple_async_result_new_take_error(sourceobject: NullablePointer[GObject] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, g_error: NullablePointer[GError] tag): NullablePointer[GSimpleAsyncResult] =>
//   fun g_simple_async_result_set_op_res_gpointer(simple: NullablePointer[GSimpleAsyncResult] tag, opres: Pointer[None] tag, destroyopres: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_simple_async_result_get_op_res_gpointer(simple: NullablePointer[GSimpleAsyncResult] tag): Pointer[None] =>
//   fun g_simple_async_result_set_op_res_gssize(simple: NullablePointer[GSimpleAsyncResult] tag, opres: I64): None =>
//   fun g_simple_async_result_get_op_res_gssize(simple: NullablePointer[GSimpleAsyncResult] tag): I64 =>
//   fun g_simple_async_result_set_op_res_gboolean(simple: NullablePointer[GSimpleAsyncResult] tag, opres: I32): None =>
//   fun g_simple_async_result_get_op_res_gboolean(simple: NullablePointer[GSimpleAsyncResult] tag): I32 =>
//   fun g_simple_async_result_set_check_cancellable(simple: NullablePointer[GSimpleAsyncResult] tag, checkcancellable: NullablePointer[GCancellable] tag): None =>
//   fun g_simple_async_result_get_source_tag(simple: NullablePointer[GSimpleAsyncResult] tag): Pointer[None] =>
//   fun g_simple_async_result_set_handle_cancellation(simple: NullablePointer[GSimpleAsyncResult] tag, handlecancellation: I32): None =>
//   fun g_simple_async_result_complete(simple: NullablePointer[GSimpleAsyncResult] tag): None =>
//   fun g_simple_async_result_complete_in_idle(simple: NullablePointer[GSimpleAsyncResult] tag): None =>
//   fun g_simple_async_result_run_in_thread(simple: NullablePointer[GSimpleAsyncResult] tag, func: NullablePointer[FUNCTIONTYPE] tag, iopriority: I32, cancellable: NullablePointer[GCancellable] tag): None =>
//     @g_simple_async_result_run_in_thread(simple, func, iopriority, cancellable)
//   fun g_simple_async_result_set_from_error(simple: NullablePointer[GSimpleAsyncResult] tag, g_error: NullablePointer[GError] tag): None =>
//   fun g_simple_async_result_take_error(simple: NullablePointer[GSimpleAsyncResult] tag, g_error: NullablePointer[GError] tag): None =>
//   fun g_simple_async_result_propagate_error(simple: NullablePointer[GSimpleAsyncResult] tag, dest: NullablePointer[NullablePointer[GError]] tag): I32 =>
// /*  fun g_simple_async_result_set_error(simple: NullablePointer[GSimpleAsyncResult] tag, domain: U32, code: I32, format: Pointer[U8] tag, ...): None =>
//   fun g_simple_async_result_set_error_va(simple: NullablePointer[GSimpleAsyncResult] tag, domain: U32, code: I32, format: Pointer[U8] tag, args: NullablePointer[Valisttag] tag): None =>
//   fun g_simple_async_result_is_valid(result: NullablePointer[GAsyncResult] tag, source: NullablePointer[GObject] tag, sourcetag: Pointer[None] tag): I32 =>
// /*  fun g_simple_async_report_error_in_idle(g_object: NullablePointer[GObject] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, domain: U32, code: I32, format: Pointer[U8] tag, ...): None =>
//   fun g_simple_async_report_gerror_in_idle(g_object: NullablePointer[GObject] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, g_error: NullablePointer[GError] tag): None =>
//   fun g_simple_async_report_take_gerror_in_idle(g_object: NullablePointer[GObject] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, g_error: NullablePointer[GError] tag): None =>
//   fun g_simple_io_stream_get_type(): U64 =>
//   fun g_simple_io_stream_new(inputstream: NullablePointer[GInputStream] tag, outputstream: NullablePointer[GOutputStream] tag): NullablePointer[GIOStream] =>
//   fun g_simple_permission_get_type(): U64 =>
//   fun g_simple_permission_new(allowed: I32): NullablePointer[GPermission] =>
//   fun g_simple_proxy_resolver_get_type(): U64 =>
//   fun g_simple_proxy_resolver_new(defaultproxy: Pointer[U8] tag, ignorehosts: NullablePointer[Pointer[U8]] tag): NullablePointer[GProxyResolver] =>
//   fun g_simple_proxy_resolver_set_default_proxy(resolver: NullablePointer[GSimpleProxyResolver] tag, defaultproxy: Pointer[U8] tag): None =>
//   fun g_simple_proxy_resolver_set_ignore_hosts(resolver: NullablePointer[GSimpleProxyResolver] tag, ignorehosts: NullablePointer[Pointer[U8]] tag): None =>
//   fun g_simple_proxy_resolver_set_uri_proxy(resolver: NullablePointer[GSimpleProxyResolver] tag, urischeme: Pointer[U8] tag, proxy: Pointer[U8] tag): None =>
//   fun g_socket_connectable_get_type(): U64 =>
//   fun g_socket_connectable_enumerate(connectable: NullablePointer[GSocketConnectable] tag): NullablePointer[GSocketAddressEnumerator] =>
//   fun g_socket_connectable_proxy_enumerate(connectable: NullablePointer[GSocketConnectable] tag): NullablePointer[GSocketAddressEnumerator] =>
//   fun g_socket_connectable_to_string(connectable: NullablePointer[GSocketConnectable] tag): Pointer[U8] =>
//   fun g_srv_target_get_type(): U64 =>
//   fun g_srv_target_new(hostname: Pointer[U8] tag, port: U16, priority: U16, weight: U16): NullablePointer[GSrvTarget] =>
//   fun g_srv_target_copy(target: NullablePointer[GSrvTarget] tag): NullablePointer[GSrvTarget] =>
//   fun g_srv_target_free(target: NullablePointer[GSrvTarget] tag): None =>
//   fun g_srv_target_get_hostname(target: NullablePointer[GSrvTarget] tag): Pointer[U8] =>
//   fun g_srv_target_get_port(target: NullablePointer[GSrvTarget] tag): U16 =>
//   fun g_srv_target_get_priority(target: NullablePointer[GSrvTarget] tag): U16 =>
//   fun g_srv_target_get_weight(target: NullablePointer[GSrvTarget] tag): U16 =>
//   fun g_srv_target_list_sort(targets: NullablePointer[GList] tag): NullablePointer[GList] =>
//   fun g_subprocess_get_type(): U64 =>
// /*  fun g_subprocess_new(flags: I32, g_error: NullablePointer[NullablePointer[GError]] tag, argv0: Pointer[U8] tag, ...): NullablePointer[GSubprocess] =>
//   fun g_subprocess_newv(argv: NullablePointer[Pointer[U8]] tag, flags: I32, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSubprocess] =>
//   fun g_subprocess_get_stdin_pipe(subprocess: NullablePointer[GSubprocess] tag): NullablePointer[GOutputStream] =>
//   fun g_subprocess_get_stdout_pipe(subprocess: NullablePointer[GSubprocess] tag): NullablePointer[GInputStream] =>
//   fun g_subprocess_get_stderr_pipe(subprocess: NullablePointer[GSubprocess] tag): NullablePointer[GInputStream] =>
//   fun g_subprocess_get_identifier(subprocess: NullablePointer[GSubprocess] tag): Pointer[U8] =>
//   fun g_subprocess_send_signal(subprocess: NullablePointer[GSubprocess] tag, signalnum: I32): None =>
//   fun g_subprocess_force_exit(subprocess: NullablePointer[GSubprocess] tag): None =>
//   fun g_subprocess_wait(subprocess: NullablePointer[GSubprocess] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_subprocess_wait_async(subprocess: NullablePointer[GSubprocess] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_subprocess_wait_finish(subprocess: NullablePointer[GSubprocess] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_subprocess_wait_check(subprocess: NullablePointer[GSubprocess] tag, cancellable: NullablePointer[GCancellable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_subprocess_wait_check_async(subprocess: NullablePointer[GSubprocess] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_subprocess_wait_check_finish(subprocess: NullablePointer[GSubprocess] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_subprocess_get_status(subprocess: NullablePointer[GSubprocess] tag): I32 =>
//   fun g_subprocess_get_successful(subprocess: NullablePointer[GSubprocess] tag): I32 =>
//   fun g_subprocess_get_if_exited(subprocess: NullablePointer[GSubprocess] tag): I32 =>
//   fun g_subprocess_get_exit_status(subprocess: NullablePointer[GSubprocess] tag): I32 =>
//   fun g_subprocess_get_if_signaled(subprocess: NullablePointer[GSubprocess] tag): I32 =>
//   fun g_subprocess_get_term_sig(subprocess: NullablePointer[GSubprocess] tag): I32 =>
//   fun g_subprocess_communicate(subprocess: NullablePointer[GSubprocess] tag, stdinbuf: NullablePointer[GBytes] tag, cancellable: NullablePointer[GCancellable] tag, stdoutbuf: NullablePointer[NullablePointer[GBytes]] tag, stderrbuf: NullablePointer[NullablePointer[GBytes]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_subprocess_communicate_async(subprocess: NullablePointer[GSubprocess] tag, stdinbuf: NullablePointer[GBytes] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_subprocess_communicate_finish(subprocess: NullablePointer[GSubprocess] tag, result: NullablePointer[GAsyncResult] tag, stdoutbuf: NullablePointer[NullablePointer[GBytes]] tag, stderrbuf: NullablePointer[NullablePointer[GBytes]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_subprocess_communicate_utf8(subprocess: NullablePointer[GSubprocess] tag, stdinbuf: Pointer[U8] tag, cancellable: NullablePointer[GCancellable] tag, stdoutbuf: NullablePointer[Pointer[U8]] tag, stderrbuf: NullablePointer[Pointer[U8]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_subprocess_communicate_utf8_async(subprocess: NullablePointer[GSubprocess] tag, stdinbuf: Pointer[U8] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_subprocess_communicate_utf8_finish(subprocess: NullablePointer[GSubprocess] tag, result: NullablePointer[GAsyncResult] tag, stdoutbuf: NullablePointer[Pointer[U8]] tag, stderrbuf: NullablePointer[Pointer[U8]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_subprocess_launcher_get_type(): U64 =>
//   fun g_subprocess_launcher_new(flags: I32): NullablePointer[GSubprocessLauncher] =>
// /*  fun g_subprocess_launcher_spawn(self: NullablePointer[GSubprocessLauncher] tag, g_error: NullablePointer[NullablePointer[GError]] tag, argv0: Pointer[U8] tag, ...): NullablePointer[GSubprocess] =>
//   fun g_subprocess_launcher_spawnv(self: NullablePointer[GSubprocessLauncher] tag, argv: NullablePointer[Pointer[U8]] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GSubprocess] =>
//   fun g_subprocess_launcher_set_environ(self: NullablePointer[GSubprocessLauncher] tag, env: NullablePointer[Pointer[U8]] tag): None =>
//   fun g_subprocess_launcher_setenv(self: NullablePointer[GSubprocessLauncher] tag, variable: Pointer[U8] tag, value: Pointer[U8] tag, overwrite: I32): None =>
//   fun g_subprocess_launcher_unsetenv(self: NullablePointer[GSubprocessLauncher] tag, variable: Pointer[U8] tag): None =>
//   fun g_subprocess_launcher_getenv(self: NullablePointer[GSubprocessLauncher] tag, variable: Pointer[U8] tag): Pointer[U8] =>
//   fun g_subprocess_launcher_set_cwd(self: NullablePointer[GSubprocessLauncher] tag, cwd: Pointer[U8] tag): None =>
//   fun g_subprocess_launcher_set_flags(self: NullablePointer[GSubprocessLauncher] tag, flags: I32): None =>
//   fun g_subprocess_launcher_set_stdin_file_path(self: NullablePointer[GSubprocessLauncher] tag, path: Pointer[U8] tag): None =>
//   fun g_subprocess_launcher_take_stdin_fd(self: NullablePointer[GSubprocessLauncher] tag, fd: I32): None =>
//   fun g_subprocess_launcher_set_stdout_file_path(self: NullablePointer[GSubprocessLauncher] tag, path: Pointer[U8] tag): None =>
//   fun g_subprocess_launcher_take_stdout_fd(self: NullablePointer[GSubprocessLauncher] tag, fd: I32): None =>
//   fun g_subprocess_launcher_set_stderr_file_path(self: NullablePointer[GSubprocessLauncher] tag, path: Pointer[U8] tag): None =>
//   fun g_subprocess_launcher_take_stderr_fd(self: NullablePointer[GSubprocessLauncher] tag, fd: I32): None =>
//   fun g_subprocess_launcher_take_fd(self: NullablePointer[GSubprocessLauncher] tag, sourcefd: I32, targetfd: I32): None =>
//   fun g_subprocess_launcher_close(self: NullablePointer[GSubprocessLauncher] tag): None =>
//   fun g_subprocess_launcher_set_child_setup(self: NullablePointer[GSubprocessLauncher] tag, childsetup: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag, destroynotify: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_task_get_type(): U64 =>
//   fun g_task_new(sourceobject: Pointer[None] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, callbackdata: Pointer[None] tag): NullablePointer[GTask] =>
//   fun g_task_report_error(sourceobject: Pointer[None] tag, callback: NullablePointer[FUNCTIONTYPE] tag, callbackdata: Pointer[None] tag, sourcetag: Pointer[None] tag, g_error: NullablePointer[GError] tag): None =>
// /*  fun g_task_report_new_error(sourceobject: Pointer[None] tag, callback: NullablePointer[FUNCTIONTYPE] tag, callbackdata: Pointer[None] tag, sourcetag: Pointer[None] tag, domain: U32, code: I32, format: Pointer[U8] tag, ...): None =>
//   fun g_task_set_task_data(task: NullablePointer[GTask] tag, taskdata: Pointer[None] tag, taskdatadestroy: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_task_set_priority(task: NullablePointer[GTask] tag, priority: I32): None =>
//   fun g_task_set_check_cancellable(task: NullablePointer[GTask] tag, checkcancellable: I32): None =>
//   fun g_task_set_source_tag(task: NullablePointer[GTask] tag, sourcetag: Pointer[None] tag): None =>
//   fun g_task_set_name(task: NullablePointer[GTask] tag, name: Pointer[U8] tag): None =>
//   fun g_task_get_source_object(task: NullablePointer[GTask] tag): Pointer[None] =>
//   fun g_task_get_task_data(task: NullablePointer[GTask] tag): Pointer[None] =>
//   fun g_task_get_priority(task: NullablePointer[GTask] tag): I32 =>
//   fun g_task_get_context(task: NullablePointer[GTask] tag): NullablePointer[GMainContext] =>
//   fun g_task_get_cancellable(task: NullablePointer[GTask] tag): NullablePointer[GCancellable] =>
//   fun g_task_get_check_cancellable(task: NullablePointer[GTask] tag): I32 =>
//   fun g_task_get_source_tag(task: NullablePointer[GTask] tag): Pointer[None] =>
//   fun g_task_get_name(task: NullablePointer[GTask] tag): Pointer[U8] =>
//   fun g_task_is_valid(result: Pointer[None] tag, sourceobject: Pointer[None] tag): I32 =>
//   fun g_task_run_in_thread(task: NullablePointer[GTask] tag, taskfunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_task_run_in_thread(task, taskfunc)
//   fun g_task_run_in_thread_sync(task: NullablePointer[GTask] tag, taskfunc: NullablePointer[FUNCTIONTYPE] tag): None =>
//     @g_task_run_in_thread_sync(task, taskfunc)
//   fun g_task_set_return_on_cancel(task: NullablePointer[GTask] tag, returnoncancel: I32): I32 =>
//   fun g_task_get_return_on_cancel(task: NullablePointer[GTask] tag): I32 =>
//   fun g_task_attach_source(task: NullablePointer[GTask] tag, source: NullablePointer[GSource] tag, callback: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_task_return_pointer(task: NullablePointer[GTask] tag, result: Pointer[None] tag, resultdestroy: NullablePointer[FUNCTIONTYPE] tag): None =>
//   fun g_task_return_boolean(task: NullablePointer[GTask] tag, result: I32): None =>
//   fun g_task_return_int(task: NullablePointer[GTask] tag, result: I64): None =>
//   fun g_task_return_error(task: NullablePointer[GTask] tag, g_error: NullablePointer[GError] tag): None =>
// /*  fun g_task_return_new_error(task: NullablePointer[GTask] tag, domain: U32, code: I32, format: Pointer[U8] tag, ...): None =>
//   fun g_task_return_value(task: NullablePointer[GTask] tag, result: NullablePointer[GValue] tag): None =>
//   fun g_task_return_error_if_cancelled(task: NullablePointer[GTask] tag): I32 =>
//   fun g_task_propagate_pointer(task: NullablePointer[GTask] tag, g_error: NullablePointer[NullablePointer[GError]] tag): Pointer[None] =>
//   fun g_task_propagate_boolean(task: NullablePointer[GTask] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_task_propagate_int(task: NullablePointer[GTask] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I64 =>
//   fun g_task_propagate_value(task: NullablePointer[GTask] tag, value: NullablePointer[GValue] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_task_had_error(task: NullablePointer[GTask] tag): I32 =>
//   fun g_task_get_completed(task: NullablePointer[GTask] tag): I32 =>
//   fun g_test_dbus_get_type(): U64 =>
//   fun g_test_dbus_new(flags: I32): NullablePointer[GTestDBus] =>
//   fun g_test_dbus_get_flags(self: NullablePointer[GTestDBus] tag): I32 =>
//   fun g_test_dbus_get_bus_address(self: NullablePointer[GTestDBus] tag): Pointer[U8] =>
//   fun g_test_dbus_add_service_dir(self: NullablePointer[GTestDBus] tag, path: Pointer[U8] tag): None =>
//   fun g_test_dbus_up(self: NullablePointer[GTestDBus] tag): None =>
//   fun g_test_dbus_stop(self: NullablePointer[GTestDBus] tag): None =>
//   fun g_test_dbus_down(self: NullablePointer[GTestDBus] tag): None =>
//   fun g_test_dbus_unset(): None =>
//   fun g_themed_icon_get_type(): U64 =>
//   fun g_themed_icon_new(iconname: Pointer[U8] tag): NullablePointer[GIcon] =>
//   fun g_themed_icon_new_with_default_fallbacks(iconname: Pointer[U8] tag): NullablePointer[GIcon] =>
//   fun g_themed_icon_new_from_names(iconnames: NullablePointer[Pointer[U8]] tag, len: I32): NullablePointer[GIcon] =>
//   fun g_themed_icon_prepend_name(icon: NullablePointer[GThemedIcon] tag, iconname: Pointer[U8] tag): None =>
//   fun g_themed_icon_append_name(icon: NullablePointer[GThemedIcon] tag, iconname: Pointer[U8] tag): None =>
//   fun g_themed_icon_get_names(icon: NullablePointer[GThemedIcon] tag): NullablePointer[Pointer[U8]] =>
//   fun g_tls_backend_get_type(): U64 =>
//   fun g_tls_backend_get_default(): NullablePointer[GTlsBackend] =>
//   fun g_tls_backend_get_default_database(backend: NullablePointer[GTlsBackend] tag): NullablePointer[GTlsDatabase] =>
//   fun g_tls_backend_set_default_database(backend: NullablePointer[GTlsBackend] tag, database: NullablePointer[GTlsDatabase] tag): None =>
//   fun g_tls_backend_supports_tls(backend: NullablePointer[GTlsBackend] tag): I32 =>
//   fun g_tls_backend_supports_dtls(backend: NullablePointer[GTlsBackend] tag): I32 =>
//   fun g_tls_backend_get_certificate_type(backend: NullablePointer[GTlsBackend] tag): U64 =>
//   fun g_tls_backend_get_client_connection_type(backend: NullablePointer[GTlsBackend] tag): U64 =>
//   fun g_tls_backend_get_server_connection_type(backend: NullablePointer[GTlsBackend] tag): U64 =>
//   fun g_tls_backend_get_file_database_type(backend: NullablePointer[GTlsBackend] tag): U64 =>
//   fun g_tls_backend_get_dtls_client_connection_type(backend: NullablePointer[GTlsBackend] tag): U64 =>
//   fun g_tls_backend_get_dtls_server_connection_type(backend: NullablePointer[GTlsBackend] tag): U64 =>
//   fun g_tls_client_connection_get_type(): U64 =>
//   fun g_tls_client_connection_new(baseiostream: NullablePointer[GIOStream] tag, serveridentity: NullablePointer[GSocketConnectable] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GIOStream] =>
//   fun g_tls_client_connection_get_validation_flags(conn: NullablePointer[GTlsClientConnection] tag): I32 =>
//   fun g_tls_client_connection_set_validation_flags(conn: NullablePointer[GTlsClientConnection] tag, flags: I32): None =>
//   fun g_tls_client_connection_get_server_identity(conn: NullablePointer[GTlsClientConnection] tag): NullablePointer[GSocketConnectable] =>
//   fun g_tls_client_connection_set_server_identity(conn: NullablePointer[GTlsClientConnection] tag, identity: NullablePointer[GSocketConnectable] tag): None =>
//   fun g_tls_client_connection_get_use_ssl3(conn: NullablePointer[GTlsClientConnection] tag): I32 =>
//   fun g_tls_client_connection_set_use_ssl3(conn: NullablePointer[GTlsClientConnection] tag, usessl3: I32): None =>
//   fun g_tls_client_connection_get_accepted_cas(conn: NullablePointer[GTlsClientConnection] tag): NullablePointer[GList] =>
//   fun g_tls_client_connection_copy_session_state(conn: NullablePointer[GTlsClientConnection] tag, source: NullablePointer[GTlsClientConnection] tag): None =>
//   fun g_tls_file_database_get_type(): U64 =>
//   fun g_tls_file_database_new(anchors: Pointer[U8] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GTlsDatabase] =>
//   fun g_tls_server_connection_get_type(): U64 =>
//   fun g_tls_server_connection_new(baseiostream: NullablePointer[GIOStream] tag, certificate: NullablePointer[GTlsCertificate] tag, g_error: NullablePointer[NullablePointer[GError]] tag): NullablePointer[GIOStream] =>
//   fun g_volume_get_type(): U64 =>
//   fun g_volume_get_name(volume: NullablePointer[GVolume] tag): Pointer[U8] =>
//   fun g_volume_get_icon(volume: NullablePointer[GVolume] tag): NullablePointer[GIcon] =>
//   fun g_volume_get_symbolic_icon(volume: NullablePointer[GVolume] tag): NullablePointer[GIcon] =>
//   fun g_volume_get_uuid(volume: NullablePointer[GVolume] tag): Pointer[U8] =>
//   fun g_volume_get_drive(volume: NullablePointer[GVolume] tag): NullablePointer[GDrive] =>
//   fun g_volume_get_mount(volume: NullablePointer[GVolume] tag): NullablePointer[GMount] =>
//   fun g_volume_can_mount(volume: NullablePointer[GVolume] tag): I32 =>
//   fun g_volume_can_eject(volume: NullablePointer[GVolume] tag): I32 =>
//   fun g_volume_should_automount(volume: NullablePointer[GVolume] tag): I32 =>
//   fun g_volume_mount(volume: NullablePointer[GVolume] tag, flags: I32, mountoperation: NullablePointer[GMountOperation] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_volume_mount_finish(volume: NullablePointer[GVolume] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_volume_eject(volume: NullablePointer[GVolume] tag, flags: I32, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_volume_eject_finish(volume: NullablePointer[GVolume] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_volume_get_identifier(volume: NullablePointer[GVolume] tag, kind: Pointer[U8] tag): Pointer[U8] =>
//   fun g_volume_enumerate_identifiers(volume: NullablePointer[GVolume] tag): NullablePointer[Pointer[U8]] =>
//   fun g_volume_get_activation_root(volume: NullablePointer[GVolume] tag): NullablePointer[GFile] =>
//   fun g_volume_eject_with_operation(volume: NullablePointer[GVolume] tag, flags: I32, mountoperation: NullablePointer[GMountOperation] tag, cancellable: NullablePointer[GCancellable] tag, callback: NullablePointer[FUNCTIONTYPE] tag, userdata: Pointer[None] tag): None =>
//   fun g_volume_eject_with_operation_finish(volume: NullablePointer[GVolume] tag, result: NullablePointer[GAsyncResult] tag, g_error: NullablePointer[NullablePointer[GError]] tag): I32 =>
//   fun g_volume_get_sort_key(volume: NullablePointer[GVolume] tag): Pointer[U8] =>
//   fun g_zlib_compressor_get_type(): U64 =>
//   fun g_zlib_compressor_new(format: I32, level: I32): NullablePointer[GZlibCompressor] =>
//   fun g_zlib_compressor_get_file_info(compressor: NullablePointer[GZlibCompressor] tag): NullablePointer[GFileInfo] =>
//   fun g_zlib_compressor_set_file_info(compressor: NullablePointer[GZlibCompressor] tag, fileinfo: NullablePointer[GFileInfo] tag): None =>
//   fun g_zlib_decompressor_get_type(): U64 =>
//   fun g_zlib_decompressor_new(format: I32): NullablePointer[GZlibDecompressor] =>
//   fun g_zlib_decompressor_get_file_info(decompressor: NullablePointer[GZlibDecompressor] tag): NullablePointer[GFileInfo] =>
//   fun glib_autoptr_clear_GAction(ptr: NullablePointer[GAction] tag): None =>
//   fun glib_autoptr_cleanup_GAction(ptr: NullablePointer[NullablePointer[GAction]] tag): None =>
//   fun glib_listautoptr_cleanup_GAction(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GAction(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GAction(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GActionMap(ptr: NullablePointer[GActionMap] tag): None =>
//   fun glib_autoptr_cleanup_GActionMap(ptr: NullablePointer[NullablePointer[GActionMap]] tag): None =>
//   fun glib_listautoptr_cleanup_GActionMap(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GActionMap(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GActionMap(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GAppInfo(ptr: NullablePointer[GAppInfo] tag): None =>
//   fun glib_autoptr_cleanup_GAppInfo(ptr: NullablePointer[NullablePointer[GAppInfo]] tag): None =>
//   fun glib_listautoptr_cleanup_GAppInfo(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GAppInfo(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GAppInfo(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GAppLaunchContext(ptr: NullablePointer[GAppLaunchContext] tag): None =>
//   fun glib_autoptr_cleanup_GAppLaunchContext(ptr: NullablePointer[NullablePointer[GAppLaunchContext]] tag): None =>
//   fun glib_listautoptr_cleanup_GAppLaunchContext(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GAppLaunchContext(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GAppLaunchContext(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GAppInfoMonitor(ptr: NullablePointer[GAppInfoMonitor] tag): None =>
//   fun glib_autoptr_cleanup_GAppInfoMonitor(ptr: NullablePointer[NullablePointer[GAppInfoMonitor]] tag): None =>
//   fun glib_listautoptr_cleanup_GAppInfoMonitor(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GAppInfoMonitor(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GAppInfoMonitor(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GApplicationCommandLine(ptr: NullablePointer[GApplicationCommandLine] tag): None =>
//   fun glib_autoptr_cleanup_GApplicationCommandLine(ptr: NullablePointer[NullablePointer[GApplicationCommandLine]] tag): None =>
//   fun glib_listautoptr_cleanup_GApplicationCommandLine(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GApplicationCommandLine(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GApplicationCommandLine(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GApplication(ptr: NullablePointer[GApplication] tag): None =>
//   fun glib_autoptr_cleanup_GApplication(ptr: NullablePointer[NullablePointer[GApplication]] tag): None =>
//   fun glib_listautoptr_cleanup_GApplication(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GApplication(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GApplication(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GAsyncInitable(ptr: NullablePointer[GAsyncInitable] tag): None =>
//   fun glib_autoptr_cleanup_GAsyncInitable(ptr: NullablePointer[NullablePointer[GAsyncInitable]] tag): None =>
//   fun glib_listautoptr_cleanup_GAsyncInitable(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GAsyncInitable(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GAsyncInitable(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GAsyncResult(ptr: NullablePointer[GAsyncResult] tag): None =>
//   fun glib_autoptr_cleanup_GAsyncResult(ptr: NullablePointer[NullablePointer[GAsyncResult]] tag): None =>
//   fun glib_listautoptr_cleanup_GAsyncResult(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GAsyncResult(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GAsyncResult(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GBufferedInputStream(ptr: NullablePointer[GBufferedInputStream] tag): None =>
//   fun glib_autoptr_cleanup_GBufferedInputStream(ptr: NullablePointer[NullablePointer[GBufferedInputStream]] tag): None =>
//   fun glib_listautoptr_cleanup_GBufferedInputStream(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GBufferedInputStream(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GBufferedInputStream(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GBufferedOutputStream(ptr: NullablePointer[GBufferedOutputStream] tag): None =>
//   fun glib_autoptr_cleanup_GBufferedOutputStream(ptr: NullablePointer[NullablePointer[GBufferedOutputStream]] tag): None =>
//   fun glib_listautoptr_cleanup_GBufferedOutputStream(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GBufferedOutputStream(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GBufferedOutputStream(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GBytesIcon(ptr: NullablePointer[GBytesIcon] tag): None =>
//   fun glib_autoptr_cleanup_GBytesIcon(ptr: NullablePointer[NullablePointer[GBytesIcon]] tag): None =>
//   fun glib_listautoptr_cleanup_GBytesIcon(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GBytesIcon(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GBytesIcon(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GCancellable(ptr: NullablePointer[GCancellable] tag): None =>
//   fun glib_autoptr_cleanup_GCancellable(ptr: NullablePointer[NullablePointer[GCancellable]] tag): None =>
//   fun glib_listautoptr_cleanup_GCancellable(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GCancellable(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GCancellable(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GCharsetConverter(ptr: NullablePointer[GCharsetConverter] tag): None =>
//   fun glib_autoptr_cleanup_GCharsetConverter(ptr: NullablePointer[NullablePointer[GCharsetConverter]] tag): None =>
//   fun glib_listautoptr_cleanup_GCharsetConverter(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GCharsetConverter(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GCharsetConverter(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GConverter(ptr: NullablePointer[GConverter] tag): None =>
//   fun glib_autoptr_cleanup_GConverter(ptr: NullablePointer[NullablePointer[GConverter]] tag): None =>
//   fun glib_listautoptr_cleanup_GConverter(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GConverter(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GConverter(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GConverterInputStream(ptr: NullablePointer[GConverterInputStream] tag): None =>
//   fun glib_autoptr_cleanup_GConverterInputStream(ptr: NullablePointer[NullablePointer[GConverterInputStream]] tag): None =>
//   fun glib_listautoptr_cleanup_GConverterInputStream(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GConverterInputStream(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GConverterInputStream(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GConverterOutputStream(ptr: NullablePointer[GConverterOutputStream] tag): None =>
//   fun glib_autoptr_cleanup_GConverterOutputStream(ptr: NullablePointer[NullablePointer[GConverterOutputStream]] tag): None =>
//   fun glib_listautoptr_cleanup_GConverterOutputStream(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GConverterOutputStream(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GConverterOutputStream(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GCredentials(ptr: NullablePointer[GCredentials] tag): None =>
//   fun glib_autoptr_cleanup_GCredentials(ptr: NullablePointer[NullablePointer[GCredentials]] tag): None =>
//   fun glib_listautoptr_cleanup_GCredentials(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GCredentials(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GCredentials(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GDatagramBased(ptr: NullablePointer[GDatagramBased] tag): None =>
//   fun glib_autoptr_cleanup_GDatagramBased(ptr: NullablePointer[NullablePointer[GDatagramBased]] tag): None =>
//   fun glib_listautoptr_cleanup_GDatagramBased(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GDatagramBased(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GDatagramBased(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GDataInputStream(ptr: NullablePointer[GDataInputStream] tag): None =>
//   fun glib_autoptr_cleanup_GDataInputStream(ptr: NullablePointer[NullablePointer[GDataInputStream]] tag): None =>
//   fun glib_listautoptr_cleanup_GDataInputStream(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GDataInputStream(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GDataInputStream(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GDataOutputStream(ptr: NullablePointer[GDataOutputStream] tag): None =>
//   fun glib_autoptr_cleanup_GDataOutputStream(ptr: NullablePointer[NullablePointer[GDataOutputStream]] tag): None =>
//   fun glib_listautoptr_cleanup_GDataOutputStream(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GDataOutputStream(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GDataOutputStream(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GDBusActionGroup(ptr: NullablePointer[GDBusActionGroup] tag): None =>
//   fun glib_autoptr_cleanup_GDBusActionGroup(ptr: NullablePointer[NullablePointer[GDBusActionGroup]] tag): None =>
//   fun glib_listautoptr_cleanup_GDBusActionGroup(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GDBusActionGroup(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GDBusActionGroup(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GDBusAuthObserver(ptr: NullablePointer[GDBusAuthObserver] tag): None =>
//   fun glib_autoptr_cleanup_GDBusAuthObserver(ptr: NullablePointer[NullablePointer[GDBusAuthObserver]] tag): None =>
//   fun glib_listautoptr_cleanup_GDBusAuthObserver(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GDBusAuthObserver(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GDBusAuthObserver(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GDBusConnection(ptr: NullablePointer[GDBusConnection] tag): None =>
//   fun glib_autoptr_cleanup_GDBusConnection(ptr: NullablePointer[NullablePointer[GDBusConnection]] tag): None =>
//   fun glib_listautoptr_cleanup_GDBusConnection(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GDBusConnection(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GDBusConnection(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GDBusInterface(ptr: NullablePointer[GDBusInterface] tag): None =>
//   fun glib_autoptr_cleanup_GDBusInterface(ptr: NullablePointer[NullablePointer[GDBusInterface]] tag): None =>
//   fun glib_listautoptr_cleanup_GDBusInterface(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GDBusInterface(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GDBusInterface(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GDBusInterfaceSkeleton(ptr: NullablePointer[GDBusInterfaceSkeleton] tag): None =>
//   fun glib_autoptr_cleanup_GDBusInterfaceSkeleton(ptr: NullablePointer[NullablePointer[GDBusInterfaceSkeleton]] tag): None =>
//   fun glib_listautoptr_cleanup_GDBusInterfaceSkeleton(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GDBusInterfaceSkeleton(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GDBusInterfaceSkeleton(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GDBusMenuModel(ptr: NullablePointer[GDBusMenuModel] tag): None =>
//   fun glib_autoptr_cleanup_GDBusMenuModel(ptr: NullablePointer[NullablePointer[GDBusMenuModel]] tag): None =>
//   fun glib_listautoptr_cleanup_GDBusMenuModel(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GDBusMenuModel(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GDBusMenuModel(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GDBusMessage(ptr: NullablePointer[GDBusMessage] tag): None =>
//   fun glib_autoptr_cleanup_GDBusMessage(ptr: NullablePointer[NullablePointer[GDBusMessage]] tag): None =>
//   fun glib_listautoptr_cleanup_GDBusMessage(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GDBusMessage(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GDBusMessage(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GDBusMethodInvocation(ptr: NullablePointer[GDBusMethodInvocation] tag): None =>
//   fun glib_autoptr_cleanup_GDBusMethodInvocation(ptr: NullablePointer[NullablePointer[GDBusMethodInvocation]] tag): None =>
//   fun glib_listautoptr_cleanup_GDBusMethodInvocation(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GDBusMethodInvocation(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GDBusMethodInvocation(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GDBusNodeInfo(ptr: NullablePointer[GDBusNodeInfo] tag): None =>
//   fun glib_autoptr_cleanup_GDBusNodeInfo(ptr: NullablePointer[NullablePointer[GDBusNodeInfo]] tag): None =>
//   fun glib_listautoptr_cleanup_GDBusNodeInfo(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GDBusNodeInfo(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GDBusNodeInfo(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GDBusObject(ptr: NullablePointer[GDBusObject] tag): None =>
//   fun glib_autoptr_cleanup_GDBusObject(ptr: NullablePointer[NullablePointer[GDBusObject]] tag): None =>
//   fun glib_listautoptr_cleanup_GDBusObject(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GDBusObject(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GDBusObject(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GDBusObjectManagerClient(ptr: NullablePointer[GDBusObjectManagerClient] tag): None =>
//   fun glib_autoptr_cleanup_GDBusObjectManagerClient(ptr: NullablePointer[NullablePointer[GDBusObjectManagerClient]] tag): None =>
//   fun glib_listautoptr_cleanup_GDBusObjectManagerClient(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GDBusObjectManagerClient(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GDBusObjectManagerClient(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GDBusObjectManager(ptr: NullablePointer[GDBusObjectManager] tag): None =>
//   fun glib_autoptr_cleanup_GDBusObjectManager(ptr: NullablePointer[NullablePointer[GDBusObjectManager]] tag): None =>
//   fun glib_listautoptr_cleanup_GDBusObjectManager(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GDBusObjectManager(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GDBusObjectManager(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GDBusObjectManagerServer(ptr: NullablePointer[GDBusObjectManagerServer] tag): None =>
//   fun glib_autoptr_cleanup_GDBusObjectManagerServer(ptr: NullablePointer[NullablePointer[GDBusObjectManagerServer]] tag): None =>
//   fun glib_listautoptr_cleanup_GDBusObjectManagerServer(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GDBusObjectManagerServer(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GDBusObjectManagerServer(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GDBusObjectProxy(ptr: NullablePointer[GDBusObjectProxy] tag): None =>
//   fun glib_autoptr_cleanup_GDBusObjectProxy(ptr: NullablePointer[NullablePointer[GDBusObjectProxy]] tag): None =>
//   fun glib_listautoptr_cleanup_GDBusObjectProxy(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GDBusObjectProxy(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GDBusObjectProxy(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GDBusObjectSkeleton(ptr: NullablePointer[GDBusObjectSkeleton] tag): None =>
//   fun glib_autoptr_cleanup_GDBusObjectSkeleton(ptr: NullablePointer[NullablePointer[GDBusObjectSkeleton]] tag): None =>
//   fun glib_listautoptr_cleanup_GDBusObjectSkeleton(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GDBusObjectSkeleton(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GDBusObjectSkeleton(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GDBusProxy(ptr: NullablePointer[GDBusProxy] tag): None =>
//   fun glib_autoptr_cleanup_GDBusProxy(ptr: NullablePointer[NullablePointer[GDBusProxy]] tag): None =>
//   fun glib_listautoptr_cleanup_GDBusProxy(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GDBusProxy(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GDBusProxy(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GDBusServer(ptr: NullablePointer[GDBusServer] tag): None =>
//   fun glib_autoptr_cleanup_GDBusServer(ptr: NullablePointer[NullablePointer[GDBusServer]] tag): None =>
//   fun glib_listautoptr_cleanup_GDBusServer(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GDBusServer(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GDBusServer(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GDrive(ptr: NullablePointer[GDrive] tag): None =>
//   fun glib_autoptr_cleanup_GDrive(ptr: NullablePointer[NullablePointer[GDrive]] tag): None =>
//   fun glib_listautoptr_cleanup_GDrive(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GDrive(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GDrive(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GEmblemedIcon(ptr: NullablePointer[GEmblemedIcon] tag): None =>
//   fun glib_autoptr_cleanup_GEmblemedIcon(ptr: NullablePointer[NullablePointer[GEmblemedIcon]] tag): None =>
//   fun glib_listautoptr_cleanup_GEmblemedIcon(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GEmblemedIcon(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GEmblemedIcon(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GEmblem(ptr: NullablePointer[GEmblem] tag): None =>
//   fun glib_autoptr_cleanup_GEmblem(ptr: NullablePointer[NullablePointer[GEmblem]] tag): None =>
//   fun glib_listautoptr_cleanup_GEmblem(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GEmblem(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GEmblem(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GFileEnumerator(ptr: NullablePointer[GFileEnumerator] tag): None =>
//   fun glib_autoptr_cleanup_GFileEnumerator(ptr: NullablePointer[NullablePointer[GFileEnumerator]] tag): None =>
//   fun glib_listautoptr_cleanup_GFileEnumerator(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GFileEnumerator(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GFileEnumerator(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GFile(ptr: NullablePointer[GFile] tag): None =>
//   fun glib_autoptr_cleanup_GFile(ptr: NullablePointer[NullablePointer[GFile]] tag): None =>
//   fun glib_listautoptr_cleanup_GFile(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GFile(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GFile(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GFileAttributeInfoList(ptr: NullablePointer[GFileAttributeInfoList] tag): None =>
//   fun glib_autoptr_cleanup_GFileAttributeInfoList(ptr: NullablePointer[NullablePointer[GFileAttributeInfoList]] tag): None =>
//   fun glib_listautoptr_cleanup_GFileAttributeInfoList(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GFileAttributeInfoList(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GFileAttributeInfoList(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GFileIcon(ptr: NullablePointer[GFileIcon] tag): None =>
//   fun glib_autoptr_cleanup_GFileIcon(ptr: NullablePointer[NullablePointer[GFileIcon]] tag): None =>
//   fun glib_listautoptr_cleanup_GFileIcon(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GFileIcon(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GFileIcon(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GFileInfo(ptr: NullablePointer[GFileInfo] tag): None =>
//   fun glib_autoptr_cleanup_GFileInfo(ptr: NullablePointer[NullablePointer[GFileInfo]] tag): None =>
//   fun glib_listautoptr_cleanup_GFileInfo(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GFileInfo(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GFileInfo(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GFileInputStream(ptr: NullablePointer[GFileInputStream] tag): None =>
//   fun glib_autoptr_cleanup_GFileInputStream(ptr: NullablePointer[NullablePointer[GFileInputStream]] tag): None =>
//   fun glib_listautoptr_cleanup_GFileInputStream(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GFileInputStream(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GFileInputStream(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GFileIOStream(ptr: NullablePointer[GFileIOStream] tag): None =>
//   fun glib_autoptr_cleanup_GFileIOStream(ptr: NullablePointer[NullablePointer[GFileIOStream]] tag): None =>
//   fun glib_listautoptr_cleanup_GFileIOStream(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GFileIOStream(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GFileIOStream(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GFileMonitor(ptr: NullablePointer[GFileMonitor] tag): None =>
//   fun glib_autoptr_cleanup_GFileMonitor(ptr: NullablePointer[NullablePointer[GFileMonitor]] tag): None =>
//   fun glib_listautoptr_cleanup_GFileMonitor(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GFileMonitor(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GFileMonitor(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GFilenameCompleter(ptr: NullablePointer[GFilenameCompleter] tag): None =>
//   fun glib_autoptr_cleanup_GFilenameCompleter(ptr: NullablePointer[NullablePointer[GFilenameCompleter]] tag): None =>
//   fun glib_listautoptr_cleanup_GFilenameCompleter(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GFilenameCompleter(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GFilenameCompleter(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GFileOutputStream(ptr: NullablePointer[GFileOutputStream] tag): None =>
//   fun glib_autoptr_cleanup_GFileOutputStream(ptr: NullablePointer[NullablePointer[GFileOutputStream]] tag): None =>
//   fun glib_listautoptr_cleanup_GFileOutputStream(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GFileOutputStream(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GFileOutputStream(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GFilterInputStream(ptr: NullablePointer[GFilterInputStream] tag): None =>
//   fun glib_autoptr_cleanup_GFilterInputStream(ptr: NullablePointer[NullablePointer[GFilterInputStream]] tag): None =>
//   fun glib_listautoptr_cleanup_GFilterInputStream(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GFilterInputStream(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GFilterInputStream(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GFilterOutputStream(ptr: NullablePointer[GFilterOutputStream] tag): None =>
//   fun glib_autoptr_cleanup_GFilterOutputStream(ptr: NullablePointer[NullablePointer[GFilterOutputStream]] tag): None =>
//   fun glib_listautoptr_cleanup_GFilterOutputStream(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GFilterOutputStream(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GFilterOutputStream(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GIcon(ptr: NullablePointer[GIcon] tag): None =>
//   fun glib_autoptr_cleanup_GIcon(ptr: NullablePointer[NullablePointer[GIcon]] tag): None =>
//   fun glib_listautoptr_cleanup_GIcon(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GIcon(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GIcon(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GInetAddress(ptr: NullablePointer[GInetAddress] tag): None =>
//   fun glib_autoptr_cleanup_GInetAddress(ptr: NullablePointer[NullablePointer[GInetAddress]] tag): None =>
//   fun glib_listautoptr_cleanup_GInetAddress(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GInetAddress(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GInetAddress(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GInetAddressMask(ptr: NullablePointer[GInetAddressMask] tag): None =>
//   fun glib_autoptr_cleanup_GInetAddressMask(ptr: NullablePointer[NullablePointer[GInetAddressMask]] tag): None =>
//   fun glib_listautoptr_cleanup_GInetAddressMask(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GInetAddressMask(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GInetAddressMask(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GInetSocketAddress(ptr: NullablePointer[GInetSocketAddress] tag): None =>
//   fun glib_autoptr_cleanup_GInetSocketAddress(ptr: NullablePointer[NullablePointer[GInetSocketAddress]] tag): None =>
//   fun glib_listautoptr_cleanup_GInetSocketAddress(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GInetSocketAddress(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GInetSocketAddress(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GInitable(ptr: NullablePointer[GInitable] tag): None =>
//   fun glib_autoptr_cleanup_GInitable(ptr: NullablePointer[NullablePointer[GInitable]] tag): None =>
//   fun glib_listautoptr_cleanup_GInitable(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GInitable(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GInitable(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GInputStream(ptr: NullablePointer[GInputStream] tag): None =>
//   fun glib_autoptr_cleanup_GInputStream(ptr: NullablePointer[NullablePointer[GInputStream]] tag): None =>
//   fun glib_listautoptr_cleanup_GInputStream(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GInputStream(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GInputStream(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GIOModule(ptr: NullablePointer[GIOModule] tag): None =>
//   fun glib_autoptr_cleanup_GIOModule(ptr: NullablePointer[NullablePointer[GIOModule]] tag): None =>
//   fun glib_listautoptr_cleanup_GIOModule(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GIOModule(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GIOModule(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GIOStream(ptr: NullablePointer[GIOStream] tag): None =>
//   fun glib_autoptr_cleanup_GIOStream(ptr: NullablePointer[NullablePointer[GIOStream]] tag): None =>
//   fun glib_listautoptr_cleanup_GIOStream(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GIOStream(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GIOStream(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GLoadableIcon(ptr: NullablePointer[GLoadableIcon] tag): None =>
//   fun glib_autoptr_cleanup_GLoadableIcon(ptr: NullablePointer[NullablePointer[GLoadableIcon]] tag): None =>
//   fun glib_listautoptr_cleanup_GLoadableIcon(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GLoadableIcon(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GLoadableIcon(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GMemoryInputStream(ptr: NullablePointer[GMemoryInputStream] tag): None =>
//   fun glib_autoptr_cleanup_GMemoryInputStream(ptr: NullablePointer[NullablePointer[GMemoryInputStream]] tag): None =>
//   fun glib_listautoptr_cleanup_GMemoryInputStream(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GMemoryInputStream(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GMemoryInputStream(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GMemoryOutputStream(ptr: NullablePointer[GMemoryOutputStream] tag): None =>
//   fun glib_autoptr_cleanup_GMemoryOutputStream(ptr: NullablePointer[NullablePointer[GMemoryOutputStream]] tag): None =>
//   fun glib_listautoptr_cleanup_GMemoryOutputStream(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GMemoryOutputStream(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GMemoryOutputStream(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GMenu(ptr: NullablePointer[GMenu] tag): None =>
//   fun glib_autoptr_cleanup_GMenu(ptr: NullablePointer[NullablePointer[GMenu]] tag): None =>
//   fun glib_listautoptr_cleanup_GMenu(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GMenu(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GMenu(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GMenuItem(ptr: NullablePointer[GMenuItem] tag): None =>
//   fun glib_autoptr_cleanup_GMenuItem(ptr: NullablePointer[NullablePointer[GMenuItem]] tag): None =>
//   fun glib_listautoptr_cleanup_GMenuItem(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GMenuItem(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GMenuItem(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GMenuModel(ptr: NullablePointer[GMenuModel] tag): None =>
//   fun glib_autoptr_cleanup_GMenuModel(ptr: NullablePointer[NullablePointer[GMenuModel]] tag): None =>
//   fun glib_listautoptr_cleanup_GMenuModel(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GMenuModel(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GMenuModel(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GMenuAttributeIter(ptr: NullablePointer[GMenuAttributeIter] tag): None =>
//   fun glib_autoptr_cleanup_GMenuAttributeIter(ptr: NullablePointer[NullablePointer[GMenuAttributeIter]] tag): None =>
//   fun glib_listautoptr_cleanup_GMenuAttributeIter(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GMenuAttributeIter(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GMenuAttributeIter(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GMenuLinkIter(ptr: NullablePointer[GMenuLinkIter] tag): None =>
//   fun glib_autoptr_cleanup_GMenuLinkIter(ptr: NullablePointer[NullablePointer[GMenuLinkIter]] tag): None =>
//   fun glib_listautoptr_cleanup_GMenuLinkIter(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GMenuLinkIter(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GMenuLinkIter(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GMount(ptr: NullablePointer[GMount] tag): None =>
//   fun glib_autoptr_cleanup_GMount(ptr: NullablePointer[NullablePointer[GMount]] tag): None =>
//   fun glib_listautoptr_cleanup_GMount(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GMount(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GMount(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GMountOperation(ptr: NullablePointer[GMountOperation] tag): None =>
//   fun glib_autoptr_cleanup_GMountOperation(ptr: NullablePointer[NullablePointer[GMountOperation]] tag): None =>
//   fun glib_listautoptr_cleanup_GMountOperation(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GMountOperation(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GMountOperation(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GNativeVolumeMonitor(ptr: NullablePointer[GNativeVolumeMonitor] tag): None =>
//   fun glib_autoptr_cleanup_GNativeVolumeMonitor(ptr: NullablePointer[NullablePointer[GNativeVolumeMonitor]] tag): None =>
//   fun glib_listautoptr_cleanup_GNativeVolumeMonitor(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GNativeVolumeMonitor(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GNativeVolumeMonitor(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GNetworkAddress(ptr: NullablePointer[GNetworkAddress] tag): None =>
//   fun glib_autoptr_cleanup_GNetworkAddress(ptr: NullablePointer[NullablePointer[GNetworkAddress]] tag): None =>
//   fun glib_listautoptr_cleanup_GNetworkAddress(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GNetworkAddress(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GNetworkAddress(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GNetworkMonitor(ptr: NullablePointer[GNetworkMonitor] tag): None =>
//   fun glib_autoptr_cleanup_GNetworkMonitor(ptr: NullablePointer[NullablePointer[GNetworkMonitor]] tag): None =>
//   fun glib_listautoptr_cleanup_GNetworkMonitor(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GNetworkMonitor(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GNetworkMonitor(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GNetworkService(ptr: NullablePointer[GNetworkService] tag): None =>
//   fun glib_autoptr_cleanup_GNetworkService(ptr: NullablePointer[NullablePointer[GNetworkService]] tag): None =>
//   fun glib_listautoptr_cleanup_GNetworkService(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GNetworkService(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GNetworkService(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GNotification(ptr: NullablePointer[GNotification] tag): None =>
//   fun glib_autoptr_cleanup_GNotification(ptr: NullablePointer[NullablePointer[GNotification]] tag): None =>
//   fun glib_listautoptr_cleanup_GNotification(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GNotification(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GNotification(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GOutputStream(ptr: NullablePointer[GOutputStream] tag): None =>
//   fun glib_autoptr_cleanup_GOutputStream(ptr: NullablePointer[NullablePointer[GOutputStream]] tag): None =>
//   fun glib_listautoptr_cleanup_GOutputStream(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GOutputStream(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GOutputStream(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GPermission(ptr: NullablePointer[GPermission] tag): None =>
//   fun glib_autoptr_cleanup_GPermission(ptr: NullablePointer[NullablePointer[GPermission]] tag): None =>
//   fun glib_listautoptr_cleanup_GPermission(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GPermission(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GPermission(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GPollableInputStream(ptr: NullablePointer[GPollableInputStream] tag): None =>
//   fun glib_autoptr_cleanup_GPollableInputStream(ptr: NullablePointer[NullablePointer[GPollableInputStream]] tag): None =>
//   fun glib_listautoptr_cleanup_GPollableInputStream(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GPollableInputStream(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GPollableInputStream(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GPollableOutputStream(ptr: NullablePointer[GPollableOutputStream] tag): None =>
//   fun glib_autoptr_cleanup_GPollableOutputStream(ptr: NullablePointer[NullablePointer[GPollableOutputStream]] tag): None =>
//   fun glib_listautoptr_cleanup_GPollableOutputStream(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GPollableOutputStream(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GPollableOutputStream(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GPropertyAction(ptr: NullablePointer[GPropertyAction] tag): None =>
//   fun glib_autoptr_cleanup_GPropertyAction(ptr: NullablePointer[NullablePointer[GPropertyAction]] tag): None =>
//   fun glib_listautoptr_cleanup_GPropertyAction(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GPropertyAction(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GPropertyAction(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GProxyAddressEnumerator(ptr: NullablePointer[GProxyAddressEnumerator] tag): None =>
//   fun glib_autoptr_cleanup_GProxyAddressEnumerator(ptr: NullablePointer[NullablePointer[GProxyAddressEnumerator]] tag): None =>
//   fun glib_listautoptr_cleanup_GProxyAddressEnumerator(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GProxyAddressEnumerator(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GProxyAddressEnumerator(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GProxyAddress(ptr: NullablePointer[GProxyAddress] tag): None =>
//   fun glib_autoptr_cleanup_GProxyAddress(ptr: NullablePointer[NullablePointer[GProxyAddress]] tag): None =>
//   fun glib_listautoptr_cleanup_GProxyAddress(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GProxyAddress(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GProxyAddress(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GProxy(ptr: NullablePointer[GProxy] tag): None =>
//   fun glib_autoptr_cleanup_GProxy(ptr: NullablePointer[NullablePointer[GProxy]] tag): None =>
//   fun glib_listautoptr_cleanup_GProxy(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GProxy(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GProxy(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GProxyResolver(ptr: NullablePointer[GProxyResolver] tag): None =>
//   fun glib_autoptr_cleanup_GProxyResolver(ptr: NullablePointer[NullablePointer[GProxyResolver]] tag): None =>
//   fun glib_listautoptr_cleanup_GProxyResolver(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GProxyResolver(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GProxyResolver(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GRemoteActionGroup(ptr: NullablePointer[GRemoteActionGroup] tag): None =>
//   fun glib_autoptr_cleanup_GRemoteActionGroup(ptr: NullablePointer[NullablePointer[GRemoteActionGroup]] tag): None =>
//   fun glib_listautoptr_cleanup_GRemoteActionGroup(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GRemoteActionGroup(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GRemoteActionGroup(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GResolver(ptr: NullablePointer[GResolver] tag): None =>
//   fun glib_autoptr_cleanup_GResolver(ptr: NullablePointer[NullablePointer[GResolver]] tag): None =>
//   fun glib_listautoptr_cleanup_GResolver(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GResolver(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GResolver(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GResource(ptr: NullablePointer[GResource] tag): None =>
//   fun glib_autoptr_cleanup_GResource(ptr: NullablePointer[NullablePointer[GResource]] tag): None =>
//   fun glib_listautoptr_cleanup_GResource(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GResource(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GResource(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSeekable(ptr: NullablePointer[GSeekable] tag): None =>
//   fun glib_autoptr_cleanup_GSeekable(ptr: NullablePointer[NullablePointer[GSeekable]] tag): None =>
//   fun glib_listautoptr_cleanup_GSeekable(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSeekable(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSeekable(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSettingsBackend(ptr: NullablePointer[GSettingsBackend] tag): None =>
//   fun glib_autoptr_cleanup_GSettingsBackend(ptr: NullablePointer[NullablePointer[GSettingsBackend]] tag): None =>
//   fun glib_listautoptr_cleanup_GSettingsBackend(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSettingsBackend(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSettingsBackend(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSettingsSchema(ptr: NullablePointer[GSettingsSchema] tag): None =>
//   fun glib_autoptr_cleanup_GSettingsSchema(ptr: NullablePointer[NullablePointer[GSettingsSchema]] tag): None =>
//   fun glib_listautoptr_cleanup_GSettingsSchema(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSettingsSchema(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSettingsSchema(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSettingsSchemaKey(ptr: NullablePointer[GSettingsSchemaKey] tag): None =>
//   fun glib_autoptr_cleanup_GSettingsSchemaKey(ptr: NullablePointer[NullablePointer[GSettingsSchemaKey]] tag): None =>
//   fun glib_listautoptr_cleanup_GSettingsSchemaKey(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSettingsSchemaKey(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSettingsSchemaKey(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSettingsSchemaSource(ptr: NullablePointer[GSettingsSchemaSource] tag): None =>
//   fun glib_autoptr_cleanup_GSettingsSchemaSource(ptr: NullablePointer[NullablePointer[GSettingsSchemaSource]] tag): None =>
//   fun glib_listautoptr_cleanup_GSettingsSchemaSource(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSettingsSchemaSource(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSettingsSchemaSource(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSettings(ptr: NullablePointer[GSettings] tag): None =>
//   fun glib_autoptr_cleanup_GSettings(ptr: NullablePointer[NullablePointer[GSettings]] tag): None =>
//   fun glib_listautoptr_cleanup_GSettings(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSettings(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSettings(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSimpleActionGroup(ptr: NullablePointer[GSimpleActionGroup] tag): None =>
//   fun glib_autoptr_cleanup_GSimpleActionGroup(ptr: NullablePointer[NullablePointer[GSimpleActionGroup]] tag): None =>
//   fun glib_listautoptr_cleanup_GSimpleActionGroup(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSimpleActionGroup(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSimpleActionGroup(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSimpleAction(ptr: NullablePointer[GSimpleAction] tag): None =>
//   fun glib_autoptr_cleanup_GSimpleAction(ptr: NullablePointer[NullablePointer[GSimpleAction]] tag): None =>
//   fun glib_listautoptr_cleanup_GSimpleAction(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSimpleAction(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSimpleAction(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSimpleAsyncResult(ptr: NullablePointer[GSimpleAsyncResult] tag): None =>
//   fun glib_autoptr_cleanup_GSimpleAsyncResult(ptr: NullablePointer[NullablePointer[GSimpleAsyncResult]] tag): None =>
//   fun glib_listautoptr_cleanup_GSimpleAsyncResult(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSimpleAsyncResult(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSimpleAsyncResult(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSimplePermission(ptr: NullablePointer[GSimplePermission] tag): None =>
//   fun glib_autoptr_cleanup_GSimplePermission(ptr: NullablePointer[NullablePointer[GSimplePermission]] tag): None =>
//   fun glib_listautoptr_cleanup_GSimplePermission(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSimplePermission(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSimplePermission(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSimpleProxyResolver(ptr: NullablePointer[GSimpleProxyResolver] tag): None =>
//   fun glib_autoptr_cleanup_GSimpleProxyResolver(ptr: NullablePointer[NullablePointer[GSimpleProxyResolver]] tag): None =>
//   fun glib_listautoptr_cleanup_GSimpleProxyResolver(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSimpleProxyResolver(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSimpleProxyResolver(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSocketAddressEnumerator(ptr: NullablePointer[GSocketAddressEnumerator] tag): None =>
//   fun glib_autoptr_cleanup_GSocketAddressEnumerator(ptr: NullablePointer[NullablePointer[GSocketAddressEnumerator]] tag): None =>
//   fun glib_listautoptr_cleanup_GSocketAddressEnumerator(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSocketAddressEnumerator(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSocketAddressEnumerator(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSocketAddress(ptr: NullablePointer[GSocketAddress] tag): None =>
//   fun glib_autoptr_cleanup_GSocketAddress(ptr: NullablePointer[NullablePointer[GSocketAddress]] tag): None =>
//   fun glib_listautoptr_cleanup_GSocketAddress(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSocketAddress(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSocketAddress(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSocketClient(ptr: NullablePointer[GSocketClient] tag): None =>
//   fun glib_autoptr_cleanup_GSocketClient(ptr: NullablePointer[NullablePointer[GSocketClient]] tag): None =>
//   fun glib_listautoptr_cleanup_GSocketClient(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSocketClient(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSocketClient(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSocketConnectable(ptr: NullablePointer[GSocketConnectable] tag): None =>
//   fun glib_autoptr_cleanup_GSocketConnectable(ptr: NullablePointer[NullablePointer[GSocketConnectable]] tag): None =>
//   fun glib_listautoptr_cleanup_GSocketConnectable(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSocketConnectable(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSocketConnectable(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSocketConnection(ptr: NullablePointer[GSocketConnection] tag): None =>
//   fun glib_autoptr_cleanup_GSocketConnection(ptr: NullablePointer[NullablePointer[GSocketConnection]] tag): None =>
//   fun glib_listautoptr_cleanup_GSocketConnection(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSocketConnection(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSocketConnection(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSocketControlMessage(ptr: NullablePointer[GSocketControlMessage] tag): None =>
//   fun glib_autoptr_cleanup_GSocketControlMessage(ptr: NullablePointer[NullablePointer[GSocketControlMessage]] tag): None =>
//   fun glib_listautoptr_cleanup_GSocketControlMessage(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSocketControlMessage(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSocketControlMessage(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSocket(ptr: NullablePointer[GSocket] tag): None =>
//   fun glib_autoptr_cleanup_GSocket(ptr: NullablePointer[NullablePointer[GSocket]] tag): None =>
//   fun glib_listautoptr_cleanup_GSocket(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSocket(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSocket(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSocketListener(ptr: NullablePointer[GSocketListener] tag): None =>
//   fun glib_autoptr_cleanup_GSocketListener(ptr: NullablePointer[NullablePointer[GSocketListener]] tag): None =>
//   fun glib_listautoptr_cleanup_GSocketListener(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSocketListener(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSocketListener(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSocketService(ptr: NullablePointer[GSocketService] tag): None =>
//   fun glib_autoptr_cleanup_GSocketService(ptr: NullablePointer[NullablePointer[GSocketService]] tag): None =>
//   fun glib_listautoptr_cleanup_GSocketService(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSocketService(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSocketService(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSubprocess(ptr: NullablePointer[GSubprocess] tag): None =>
//   fun glib_autoptr_cleanup_GSubprocess(ptr: NullablePointer[NullablePointer[GSubprocess]] tag): None =>
//   fun glib_listautoptr_cleanup_GSubprocess(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSubprocess(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSubprocess(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GSubprocessLauncher(ptr: NullablePointer[GSubprocessLauncher] tag): None =>
//   fun glib_autoptr_cleanup_GSubprocessLauncher(ptr: NullablePointer[NullablePointer[GSubprocessLauncher]] tag): None =>
//   fun glib_listautoptr_cleanup_GSubprocessLauncher(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GSubprocessLauncher(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GSubprocessLauncher(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GTask(ptr: NullablePointer[GTask] tag): None =>
//   fun glib_autoptr_cleanup_GTask(ptr: NullablePointer[NullablePointer[GTask]] tag): None =>
//   fun glib_listautoptr_cleanup_GTask(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GTask(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GTask(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GTcpConnection(ptr: NullablePointer[GTcpConnection] tag): None =>
//   fun glib_autoptr_cleanup_GTcpConnection(ptr: NullablePointer[NullablePointer[GTcpConnection]] tag): None =>
//   fun glib_listautoptr_cleanup_GTcpConnection(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GTcpConnection(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GTcpConnection(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GTcpWrapperConnection(ptr: NullablePointer[GTcpWrapperConnection] tag): None =>
//   fun glib_autoptr_cleanup_GTcpWrapperConnection(ptr: NullablePointer[NullablePointer[GTcpWrapperConnection]] tag): None =>
//   fun glib_listautoptr_cleanup_GTcpWrapperConnection(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GTcpWrapperConnection(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GTcpWrapperConnection(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GTestDBus(ptr: NullablePointer[GTestDBus] tag): None =>
//   fun glib_autoptr_cleanup_GTestDBus(ptr: NullablePointer[NullablePointer[GTestDBus]] tag): None =>
//   fun glib_listautoptr_cleanup_GTestDBus(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GTestDBus(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GTestDBus(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GThemedIcon(ptr: NullablePointer[GThemedIcon] tag): None =>
//   fun glib_autoptr_cleanup_GThemedIcon(ptr: NullablePointer[NullablePointer[GThemedIcon]] tag): None =>
//   fun glib_listautoptr_cleanup_GThemedIcon(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GThemedIcon(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GThemedIcon(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GThreadedSocketService(ptr: NullablePointer[GThreadedSocketService] tag): None =>
//   fun glib_autoptr_cleanup_GThreadedSocketService(ptr: NullablePointer[NullablePointer[GThreadedSocketService]] tag): None =>
//   fun glib_listautoptr_cleanup_GThreadedSocketService(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GThreadedSocketService(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GThreadedSocketService(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GTlsBackend(ptr: NullablePointer[GTlsBackend] tag): None =>
//   fun glib_autoptr_cleanup_GTlsBackend(ptr: NullablePointer[NullablePointer[GTlsBackend]] tag): None =>
//   fun glib_listautoptr_cleanup_GTlsBackend(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GTlsBackend(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GTlsBackend(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GTlsCertificate(ptr: NullablePointer[GTlsCertificate] tag): None =>
//   fun glib_autoptr_cleanup_GTlsCertificate(ptr: NullablePointer[NullablePointer[GTlsCertificate]] tag): None =>
//   fun glib_listautoptr_cleanup_GTlsCertificate(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GTlsCertificate(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GTlsCertificate(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GTlsClientConnection(ptr: NullablePointer[GTlsClientConnection] tag): None =>
//   fun glib_autoptr_cleanup_GTlsClientConnection(ptr: NullablePointer[NullablePointer[GTlsClientConnection]] tag): None =>
//   fun glib_listautoptr_cleanup_GTlsClientConnection(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GTlsClientConnection(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GTlsClientConnection(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GTlsConnection(ptr: NullablePointer[GTlsConnection] tag): None =>
//   fun glib_autoptr_cleanup_GTlsConnection(ptr: NullablePointer[NullablePointer[GTlsConnection]] tag): None =>
//   fun glib_listautoptr_cleanup_GTlsConnection(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GTlsConnection(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GTlsConnection(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GTlsDatabase(ptr: NullablePointer[GTlsDatabase] tag): None =>
//   fun glib_autoptr_cleanup_GTlsDatabase(ptr: NullablePointer[NullablePointer[GTlsDatabase]] tag): None =>
//   fun glib_listautoptr_cleanup_GTlsDatabase(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GTlsDatabase(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GTlsDatabase(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GTlsFileDatabase(ptr: NullablePointer[GTlsFileDatabase] tag): None =>
//   fun glib_autoptr_cleanup_GTlsFileDatabase(ptr: NullablePointer[NullablePointer[GTlsFileDatabase]] tag): None =>
//   fun glib_listautoptr_cleanup_GTlsFileDatabase(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GTlsFileDatabase(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GTlsFileDatabase(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GTlsInteraction(ptr: NullablePointer[GTlsInteraction] tag): None =>
//   fun glib_autoptr_cleanup_GTlsInteraction(ptr: NullablePointer[NullablePointer[GTlsInteraction]] tag): None =>
//   fun glib_listautoptr_cleanup_GTlsInteraction(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GTlsInteraction(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GTlsInteraction(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GTlsPassword(ptr: NullablePointer[GTlsPassword] tag): None =>
//   fun glib_autoptr_cleanup_GTlsPassword(ptr: NullablePointer[NullablePointer[GTlsPassword]] tag): None =>
//   fun glib_listautoptr_cleanup_GTlsPassword(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GTlsPassword(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GTlsPassword(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GTlsServerConnection(ptr: NullablePointer[GTlsServerConnection] tag): None =>
//   fun glib_autoptr_cleanup_GTlsServerConnection(ptr: NullablePointer[NullablePointer[GTlsServerConnection]] tag): None =>
//   fun glib_listautoptr_cleanup_GTlsServerConnection(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GTlsServerConnection(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GTlsServerConnection(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GVfs(ptr: NullablePointer[GVfs] tag): None =>
//   fun glib_autoptr_cleanup_GVfs(ptr: NullablePointer[NullablePointer[GVfs]] tag): None =>
//   fun glib_listautoptr_cleanup_GVfs(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GVfs(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GVfs(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GVolume(ptr: NullablePointer[GVolume] tag): None =>
//   fun glib_autoptr_cleanup_GVolume(ptr: NullablePointer[NullablePointer[GVolume]] tag): None =>
//   fun glib_listautoptr_cleanup_GVolume(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GVolume(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GVolume(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GVolumeMonitor(ptr: NullablePointer[GVolumeMonitor] tag): None =>
//   fun glib_autoptr_cleanup_GVolumeMonitor(ptr: NullablePointer[NullablePointer[GVolumeMonitor]] tag): None =>
//   fun glib_listautoptr_cleanup_GVolumeMonitor(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GVolumeMonitor(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GVolumeMonitor(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GZlibCompressor(ptr: NullablePointer[GZlibCompressor] tag): None =>
//   fun glib_autoptr_cleanup_GZlibCompressor(ptr: NullablePointer[NullablePointer[GZlibCompressor]] tag): None =>
//   fun glib_listautoptr_cleanup_GZlibCompressor(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GZlibCompressor(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GZlibCompressor(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
//   fun glib_autoptr_clear_GZlibDecompressor(ptr: NullablePointer[GZlibDecompressor] tag): None =>
//   fun glib_autoptr_cleanup_GZlibDecompressor(ptr: NullablePointer[NullablePointer[GZlibDecompressor]] tag): None =>
//   fun glib_listautoptr_cleanup_GZlibDecompressor(l: NullablePointer[NullablePointer[GList]] tag): None =>
//   fun glib_slistautoptr_cleanup_GZlibDecompressor(l: NullablePointer[NullablePointer[GSList]] tag): None =>
//   fun glib_queueautoptr_cleanup_GZlibDecompressor(q: NullablePointer[NullablePointer[GQueue]] tag): None =>
